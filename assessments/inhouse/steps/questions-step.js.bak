/**
 * In-House Marketing Assessment - Questions Step
 * 
 * Consolidated step that handles all question types:
 * - Core questions (people, process, strategy)
 * - Industry-specific questions
 * - Activity-specific questions
 */

// StepBase will be accessed as a browser global

class QuestionsStep extends StepBase {
    constructor(assessment) {
        super(assessment);
        this.cleanupListeners = [];
        this.questionTypes = ['core', 'industry', 'activity'];
        this.currentQuestionType = 'core';
    }
    
    onEnter() {
        console.log('[QuestionsStep] onEnter called for step:', this.assessment.state.currentStep);
        
        // Extract step type from the current step ID if needed
        // This handles 'core-questions', 'industry-questions', etc.
        const currentStepId = this.assessment.state.currentStep;
        if (currentStepId && currentStepId.includes('-questions')) {
            const questionType = currentStepId.split('-')[0];
            if (this.questionTypes.includes(questionType)) {
                console.log(`[QuestionsStep] Setting question type to '${questionType}' based on step ID`);
                this.assessment.state.currentQuestionType = questionType;
                this.currentQuestionType = questionType;
            }
        }
        
        // Always initialize the current question index if it's undefined or zero
        if (!this.assessment.state.currentQuestionIndex) {
            console.log('[QuestionsStep] Initializing currentQuestionIndex to 0');
            this.assessment.state.currentQuestionIndex = 0;
        }
        
        // Make sure we have a question type
        if (!this.assessment.state.currentQuestionType) {
            console.log('[QuestionsStep] Initializing currentQuestionType to "core"');
            this.assessment.state.currentQuestionType = 'core';
            this.currentQuestionType = 'core';
        } else {
            this.currentQuestionType = this.assessment.state.currentQuestionType;
        }
        
        console.log('[QuestionsStep] Current question type:', this.currentQuestionType);
        console.log('[QuestionsStep] Current question index:', this.assessment.state.currentQuestionIndex);
        
        // Filter questions based on selections
        this.filterQuestions();
    }
    
    filterQuestions() {
        console.log('[QuestionsStep] Filtering questions based on selections');
        
        try {
            // Get all available questions
            const allQuestions = {
                core: this.assessment.getQuestionsByType('core') || [],
                industry: this.assessment.getQuestionsByType('industry') || [],
                activity: this.assessment.getQuestionsByType('activity') || []
            };
            
            // Log what we found for debugging
            console.log('[QuestionsStep] Found questions:', {
                'core': allQuestions.core.length,
                'industry': allQuestions.industry.length,
                'activity': allQuestions.activity.length
            });
            
            // If no core questions are found, the config might be missing
            if (allQuestions.core.length === 0) {
                console.warn('[QuestionsStep] No core questions found. Check configuration!');
                
                // Try to add at least one question to avoid getting stuck
                allQuestions.core = [{
                    id: 'fallback_question',
                    question: 'How would you rate your team\'s current AI knowledge?',
                    dimension: 'people_skills',
                    type: 'core',
                    options: [
                        { text: 'Very low - No knowledge', score: 1 },
                        { text: 'Low - Basic awareness', score: 2 },
                        { text: 'Medium - Some understanding', score: 3 },
                        { text: 'High - Good knowledge', score: 4 },
                        { text: 'Very high - Expert knowledge', score: 5 }
                    ]
                }];
            }
            
            // Store filtered question IDs in state for future reference
            this.assessment.state.filteredQuestions = {
                core: allQuestions.core.map(q => q.id),
                industry: allQuestions.industry.map(q => q.id),
                activity: allQuestions.activity.map(q => q.id)
            };
            
            // Log the filtered question IDs
            console.log('[QuestionsStep] Filtered question IDs:', {
                'core': this.assessment.state.filteredQuestions.core.length,
                'industry': this.assessment.state.filteredQuestions.industry.length,
                'activity': this.assessment.state.filteredQuestions.activity.length
            });
            
            // Update progress information
            this.updateProgressInfo();
        } catch (error) {
            console.error('[QuestionsStep] Error filtering questions:', error);
            // Ensure we have some minimal state to proceed
            if (!this.assessment.state.filteredQuestions) {
                this.assessment.state.filteredQuestions = { core: [], industry: [], activity: [] };
            }
        }
    }
    
    updateProgressInfo() {
        // Update question progress in state
        const progress = {
            core: this.getTypeProgressInfo('core'),
            industry: this.getTypeProgressInfo('industry'),
            activity: this.getTypeProgressInfo('activity')
        };
        
        // Calculate overall progress
        const totalQuestions = progress.core.total + progress.industry.total + progress.activity.total;
        const totalAnswered = progress.core.answered + progress.industry.answered + progress.activity.answered;
        
        progress.overall = {
            answered: totalAnswered,
            total: totalQuestions,
            percentage: totalQuestions > 0 ? Math.round((totalAnswered / totalQuestions) * 100) : 0
        };
        
        this.assessment.state.questionProgress = progress;
    }
    
    getTypeProgressInfo(type) {
        const filteredQuestions = this.assessment.state.filteredQuestions?.[type] || [];
        const answers = this.assessment.state.answers || {};
        
        // Count how many of these questions have been answered
        const answered = filteredQuestions.filter(id => answers[id] !== undefined).length;
        
        return {
            answered,
            total: filteredQuestions.length,
            percentage: filteredQuestions.length > 0 ? Math.round((answered / filteredQuestions.length) * 100) : 0
        };
    }
    
    getCurrentQuestion() {
        try {
            console.log('[QuestionsStep] Getting current question...');
            const currentType = this.assessment.state.currentQuestionType;
            const currentIndex = this.assessment.state.currentQuestionIndex;
            
            console.log(`[QuestionsStep] Current type: ${currentType}, Current index: ${currentIndex}`);
            
            // Make sure we have filteredQuestions initialized
            if (!this.assessment.state.filteredQuestions) {
                console.warn('[QuestionsStep] filteredQuestions not initialized, creating default structure');
                this.assessment.state.filteredQuestions = { core: [], industry: [], activity: [] };
                this.filterQuestions(); // Attempt to populate them
            }
            
            const filteredIds = this.assessment.state.filteredQuestions?.[currentType] || [];
            console.log(`[QuestionsStep] Found ${filteredIds.length} filtered questions for type: ${currentType}`);
            
            if (filteredIds.length === 0) {
                console.warn(`[QuestionsStep] No questions found for type: ${currentType}`);
                return null;
            }
            
            if (currentIndex >= filteredIds.length) {
                console.log(`[QuestionsStep] Current index ${currentIndex} is past the end of available questions`);
                return null;
            }
            
            const questionId = filteredIds[currentIndex];
            console.log(`[QuestionsStep] Getting question with ID: ${questionId}`);
            
            // Get question details from the question type collection
            const questions = this.assessment.getQuestionsByType(currentType) || [];
            const question = questions.find(q => q.id === questionId);
            
            if (!question) {
                console.warn(`[QuestionsStep] Could not find question with ID: ${questionId}`);
                return null;
            }
            
            console.log('[QuestionsStep] Successfully found current question:', question.question);
            return question;
        } catch (error) {
            console.error('[QuestionsStep] Error getting current question:', error);
            return null;
        }
    }
    
    getAnsweredCount() {
        return Object.keys(this.assessment.state.answers || {}).length;
    }
    
    getTotalQuestions() {
        if (!this.assessment.state.filteredQuestions) {
            return 0;
        }
        
        const { core = [], industry = [], activity = [] } = this.assessment.state.filteredQuestions;
        return core.length + industry.length + activity.length;
    }
    
    render() {
        console.log('[QuestionsStep] Rendering questions step');
        
        try {
            // Make sure filtered questions are populated
            if (!this.assessment.state.filteredQuestions) {
                console.log('[QuestionsStep] Filtered questions not found, initializing...');
                this.filterQuestions();
            }
            
            // Get current question
            const currentQuestion = this.getCurrentQuestion();
            console.log('[QuestionsStep] Current question:', currentQuestion ? 'found' : 'not found');
            
            if (!currentQuestion) {
                console.log('[QuestionsStep] No current question found, trying to advance question type');
                // If no more questions in this type, try to advance to next type
                if (this.advanceToNextQuestionType()) {
                    console.log('[QuestionsStep] Advanced to next question type, re-rendering');
                    return this.render(); // Re-render with new type
                }
                
                console.log('[QuestionsStep] No more questions available, showing completion screen');
                // If no more questions at all, show completion screen
                return this.renderCompletionScreen();
            }
            
            // Update progress info
            this.updateProgressInfo();
            
            // Initialize progress state if it doesn't exist
            if (!this.assessment.state.questionProgress) {
                console.warn('[QuestionsStep] Question progress not initialized, creating default values');
                this.assessment.state.questionProgress = {
                    core: { total: 0, answered: 0 },
                    industry: { total: 0, answered: 0 },
                    activity: { total: 0, answered: 0 },
                    overall: { total: 0, answered: 0, percentage: 0 }
                };
                this.updateProgressInfo();
            }

        const progress = this.assessment.state.questionProgress;
        const currentType = this.assessment.state.currentQuestionType;
        const currentTypeProgress = progress[currentType] || { total: 0, answered: 0 };
        const overallProgress = progress.overall || { total: 0, answered: 0, percentage: 0 };

        // Get the current answer if any
        const answer = this.assessment.state.answers[currentQuestion.id];

        // Calculate dimension color for progress indicator
        let dimensionColor = '#3498db'; // Default blue
        if (currentQuestion.dimension) {
            switch (currentQuestion.dimension.split('_')[0]) {
                case 'people': dimensionColor = '#e74c3c'; break;  // Red
                case 'process': dimensionColor = '#2ecc71'; break; // Green
                case 'strategy': dimensionColor = '#9b59b6'; break; // Purple
            }
        }

        let html = `
            <div class="step-container questions-container">
                <!-- Progress Section -->
                <div class="questions-progress-container">
                    <div class="questions-progress-header">
                        <div class="questions-dimension" style="background-color: ${dimensionColor}">
                            ${this.getQuestionTypeName(currentType, currentQuestion)}
            
            let html = `
                <div class="step-container questions-container">
                    <!-- Progress Section -->
                    <div class="questions-progress-container">
                        <div class="questions-progress-header">
                            <div class="questions-dimension" style="background-color: ${dimensionColor}">
                                ${this.getQuestionTypeName(currentType, currentQuestion)}
                            </div>
                            <div class="questions-progress-text">
                                Question ${currentTypeProgress.answered + 1} of ${currentTypeProgress.total}
                            </div>
                        </div>
                        
                        <div class="questions-progress-bar">
                            <div class="questions-progress-bar-outer">
                                <div class="questions-progress-bar-fill" style="width: ${overallProgress.percentage}%; background-color: ${dimensionColor};"></div>
                            </div>
                            <div class="questions-progress-stats">
                                <div class="questions-progress-stat">
                                    <span class="stat-label">Core</span>
                                    <span class="stat-value">${progress.core.answered}/${progress.core.total}</span>
                                </div>
                                <div class="questions-progress-stat">
                                    <span class="stat-label">Industry</span>
                                    <span class="stat-value">${progress.industry.answered}/${progress.industry.total}</span>
                                </div>
                                <div class="questions-progress-stat">
                                    <span class="stat-label">Activities</span>
                                    <span class="stat-value">${progress.activity.answered}/${progress.activity.total}</span>
                                </div>
                                <div class="questions-progress-stat total">
                                    <span class="stat-label">Total</span>
                                    <span class="stat-value">${overallProgress.answered}/${overallProgress.total}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Question Box -->
                    <div class="question-box">
                        <h2 class="question-text">${currentQuestion.question}</h2>
                        
                        <div class="options-container">
            `;
                // Render options
        if (currentQuestion.options && Array.isArray(currentQuestion.options)) {
            currentQuestion.options.forEach((option, idx) => {
                const optionText = typeof option === 'object' ? option.text : option;
                const optionValue = typeof option === 'object' ? option.score : idx;
                const isSelected = answer === optionValue;
                
                html += `
                    <div class="question-option ${isSelected ? 'selected' : ''}" data-value="${optionValue}">
                        <div class="option-number">${idx + 1}</div>
                        <div class="option-text">${optionText}</div>
                        ${isSelected ? '<div class="option-selected-indicator"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/></svg></div>' : ''}
                    </div>
                `;
            });
        }
        
        html += `
                    </div>
                </div>
                
                <div class="question-navigation">
                    <div class="navigation-info">
                        <span class="answered-count">${this.getAnsweredCount()}/${this.getTotalQuestions()} questions answered</span>
                    </div>
                    <div class="navigation-buttons">
                        <button id="question-back" class="btn btn-secondary">Back</button>
                        <button id="question-next" class="btn btn-primary" ${answer === undefined ? 'disabled' : ''}>Next</button>
                    </div>
                </div>
            </div>
        `;
        
        return html;
        } catch (error) {
            console.error('[QuestionsStep] Error rendering question step:', error);
            // Return a basic error message as HTML
            return `
                <div class="step-container error-container">
                    <h2>Error Loading Questions</h2>
                    <p>There was a problem loading the questions. Please try refreshing the page.</p>
                    <div class="step-navigation">
                        <button id="question-back" class="btn btn-secondary">Back</button>
                    </div>
                </div>
            `;
        }
    }
    
    renderCompletionScreen() {
        const progress = this.assessment.state.questionProgress;
        const overallProgress = progress.overall;
        
        return `
            <div class="step-container completion-container">
                <div class="completion-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
                    </svg>
                </div>
                
                <h2>Assessment Complete!</h2>
                <p>You've answered ${overallProgress.answered} questions across all categories.</p>
                
                <div class="completion-stats">
                    <div class="stat-item">
                        <span class="stat-label">Core Questions</span>
                        <span class="stat-value">${progress.core.answered}/${progress.core.total}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Industry Questions</span>
                        <span class="stat-value">${progress.industry.answered}/${progress.industry.total}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Activity Questions</span>
                        <span class="stat-value">${progress.activity.answered}/${progress.activity.total}</span>
                    </div>
                </div>
                
                <p>We're now ready to analyze your marketing team's AI readiness.</p>
                
                <div class="step-navigation">
                    <button id="edit-responses" class="btn btn-secondary">Edit Responses</button>
                    <button id="continue-btn" class="btn btn-primary">Continue</button>
                </div>
            </div>
        `;
    }
    
    getQuestionTypeName(type, question) {
        if (type === 'core') {
            // For core questions, show the dimension
            return question.dimension ? this.formatDimension(question.dimension) : 'Core';
        } else if (type === 'industry') {
            // For industry questions, show the industry name
            const industry = this.assessment.config.industries.find(i => i.id === this.assessment.state.selectedIndustry);
            return industry ? industry.name : 'Industry';
        } else if (type === 'activity') {
            // For activity questions, show the activity name
            if (question.activity) {
                const activity = this.assessment.config.activities.find(a => a.id === question.activity);
                return activity ? activity.name : 'Activity';
            }
            return 'Activity';
        }
        return 'Question';
    }
    
    formatDimension(dimension) {
        // Convert snake_case to Title Case
        return dimension.split('_').map(word => 
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
    }
    
    setupEventListeners(container) {
        // Clear previous listeners
        this.cleanupEventListeners();
        
        // Check if we're showing the completion screen
        if (container.querySelector('.completion-container')) {
            this.setupCompletionListeners(container);
            return;
        }
        
        // Option selection
        const options = container.querySelectorAll('.question-option');
        const nextButton = container.querySelector('#question-next');
        const backButton = container.querySelector('#question-back');
        const questionTypes = container.querySelectorAll('.questions-progress-stat');
        
        // Add click listeners to options
        options.forEach(option => {
            const listener = this.handleOptionSelection.bind(this);
            option.addEventListener('click', listener);
            this.cleanupListeners.push(() => option.removeEventListener('click', listener));
        });
        
        // Add click listener to next button
        const nextListener = this.handleNext.bind(this);
        nextButton.addEventListener('click', nextListener);
        this.cleanupListeners.push(() => nextButton.removeEventListener('click', nextListener));
        
        // Add click listener to back button
        const backListener = this.handleBack.bind(this);
        backButton.addEventListener('click', backListener);
        this.cleanupListeners.push(() => backButton.removeEventListener('click', backListener));
        
        // Add click listeners to question type selectors
        questionTypes.forEach(typeSelector => {
            const listener = this.handleTypeSelection.bind(this);
            typeSelector.addEventListener('click', listener);
            this.cleanupListeners.push(() => typeSelector.removeEventListener('click', listener));
        });
    }
    
    setupCompletionListeners(container) {
        const continueButton = container.querySelector('#continue-btn');
        const editButton = container.querySelector('#edit-responses');
        
        if (continueButton) {
            const continueListener = () => {
                this.assessment.stateManager.saveState();
                this.assessment.navigationController.nextStep();
            };
            continueButton.addEventListener('click', continueListener);
            this.cleanupListeners.push(() => continueButton.removeEventListener('click', continueListener));
        }
        
        if (editButton) {
            const editListener = () => {
                // Reset to first core question to allow editing
                this.assessment.state.currentQuestionType = 'core';
                this.assessment.state.currentQuestionIndex = 0;
                this.assessment.renderCurrentStep();
            };
            editButton.addEventListener('click', editListener);
            this.cleanupListeners.push(() => editButton.removeEventListener('click', editListener));
        }
    }
    
    handleOptionSelection(event) {
        const value = parseInt(event.currentTarget.dataset.value);
        const currentQuestion = this.getCurrentQuestion();
        
        if (!currentQuestion) return;
        
        // Update answers in state
        this.assessment.state.answers[currentQuestion.id] = value;
        
        // Update UI
        document.querySelectorAll('.question-option').forEach(el => {
            el.classList.remove('selected');
        });
        event.currentTarget.classList.add('selected');
        
        // Add the checkmark indicator to the selected option
        const existingIndicators = document.querySelectorAll('.option-selected-indicator');
        existingIndicators.forEach(el => el.remove());
        
        const indicator = document.createElement('div');
        indicator.className = 'option-selected-indicator';
        indicator.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/></svg>';
        event.currentTarget.appendChild(indicator);
        
        // Enable next button
        const nextButton = document.getElementById('question-next');
        if (nextButton) {
            nextButton.disabled = false;
        }
        
        // Update progress info
        this.updateProgressInfo();
        
        // Save state
        this.assessment.stateManager.saveState();
        
        // Auto-advance to next question after a brief delay
        setTimeout(() => {
            // Check if we're not on the last question
            const filteredIds = this.assessment.state.filteredQuestions?.[this.assessment.state.currentQuestionType] || [];
            if (this.assessment.state.currentQuestionIndex < filteredIds.length - 1) {
                this.handleNext();
            }
        }, 750); // Slightly longer delay to allow user to see their selection
    }
    
    handleNext() {
        const currentQuestion = this.getCurrentQuestion();
        
        if (!currentQuestion) return;
        
        // Save state after each answer
        this.assessment.stateManager.saveState();
        
        // Increment question index
        this.assessment.state.currentQuestionIndex++;
        
        // If we've reached the end of questions for this type,
        // try to advance to the next type
        if (this.assessment.state.currentQuestionIndex >= 
            (this.assessment.state.filteredQuestions[this.assessment.state.currentQuestionType] || []).length) {
            
            if (!this.advanceToNextQuestionType()) {
                // No more questions in any type, proceed to next step
                this.assessment.navigationController.nextStep();
                return;
            }
        }
        
        // Re-render to show next question
        this.assessment.renderCurrentStep();
    }
    
    handleBack() {
        // Decrement question index
        if (this.assessment.state.currentQuestionIndex > 0) {
            this.assessment.state.currentQuestionIndex--;
            this.assessment.renderCurrentStep();
        } else {
            // If at the first question of a type, try to go back to previous type
            if (this.goBackToPreviousQuestionType()) {
                this.assessment.renderCurrentStep();
            } else {
                // If at the very first question, go back to previous step
                this.assessment.navigationController.previousStep();
            }
        }
    }
    
    handleTypeSelection(event) {
        const typeSelector = event.currentTarget;
        const newType = typeSelector.dataset.type;
        
        if (!newType || newType === this.assessment.state.currentQuestionType) return;
        
        // Switch to the selected question type
        this.assessment.state.currentQuestionType = newType;
        this.assessment.state.currentQuestionIndex = 0; // Start at the beginning of this type
        
        // Re-render
        this.assessment.renderCurrentStep();
    }
    
    advanceToNextQuestionType() {
        const currentTypeIndex = this.questionTypes.indexOf(this.assessment.state.currentQuestionType);
        
        // Try each subsequent type
        for (let i = currentTypeIndex + 1; i < this.questionTypes.length; i++) {
            const nextType = this.questionTypes[i];
            if ((this.assessment.state.filteredQuestions[nextType] || []).length > 0) {
                // Found a type with questions, switch to it
                this.assessment.state.currentQuestionType = nextType;
                this.assessment.state.currentQuestionIndex = 0;
                return true;
            }
        }
        
        // No more question types with questions
        return false;
    }
    
    goBackToPreviousQuestionType() {
        const currentTypeIndex = this.questionTypes.indexOf(this.assessment.state.currentQuestionType);
        
        // Try each previous type
        for (let i = currentTypeIndex - 1; i >= 0; i--) {
            const prevType = this.questionTypes[i];
            const prevTypeQuestions = this.assessment.state.filteredQuestions[prevType] || [];
            
            if (prevTypeQuestions.length > 0) {
                // Found a previous type with questions, switch to it
                this.assessment.state.currentQuestionType = prevType;
                this.assessment.state.currentQuestionIndex = prevTypeQuestions.length - 1; // Go to last question
                return true;
            }
        }
        
        // No previous question types with questions
        return false;
    }
    
    cleanupEventListeners() {
        this.cleanupListeners.forEach(cleanup => cleanup());
        this.cleanupListeners = [];
    }
    
    validate() {
        const currentQuestion = this.getCurrentQuestion();
        if (!currentQuestion) return true; // No question to validate
        
        return this.assessment.state.answers[currentQuestion.id] !== undefined;
    }
}

// Make the class available as a browser global
window.QuestionsStep = QuestionsStep;
