{"version":3,"file":"static/js/954.563f484f.chunk.js","mappings":"0LACO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,UAAY,CAAC,EAClBD,KAAKE,QAAU,CAAC,EAChBF,KAAKG,SAAW,CACZC,WAAW,IAAIC,MAAOC,cACtBC,aAAa,IAAIF,MAAOC,cAEhC,CAEAE,YAAAA,CAAaC,EAAYC,GACrBV,KAAKC,UAAUQ,GAAcC,EAC7BV,KAAKG,SAASI,aAAc,IAAIF,MAAOC,aAC3C,CAEAK,WAAAA,CAAYF,GACR,OAAOT,KAAKC,UAAUQ,EAC1B,CAEAG,YAAAA,GACI,OAAAC,EAAAA,EAAAA,GAAA,GAAYb,KAAKC,UACrB,CAEAa,YAAAA,CAAab,GACTD,KAAKC,WAASY,EAAAA,EAAAA,GAAA,GAAQZ,EAC1B,CAEAc,UAAAA,CAAWC,EAAKN,GACZV,KAAKE,QAAQc,GAAON,CACxB,CAEAO,UAAAA,CAAWD,GACP,OAAIA,EACOhB,KAAKE,QAAQc,IAExBH,EAAAA,EAAAA,GAAA,GAAYb,KAAKE,QACrB,CAEAgB,YAAAA,CAAaC,GACTnB,KAAKE,SAAOW,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQb,KAAKE,SAAYiB,EACzC,CAEAC,WAAAA,GACI,OAAAP,EAAAA,EAAAA,GAAA,GAAYb,KAAKG,SACrB,CAEAkB,uBAAAA,GACI,MAAMC,EAAQ,IAAIjB,KAAKL,KAAKG,SAASC,WAE/BmB,EADM,IAAIlB,KACKiB,EAErB,OADiBE,KAAKC,MAAMF,EAAS,IAEzC,CAEAG,KAAAA,GACI1B,KAAKC,UAAY,CAAC,EAClBD,KAAKE,QAAU,CAAC,EAChBF,KAAKG,SAAW,CACZC,WAAW,IAAIC,MAAOC,cACtBC,aAAa,IAAIF,MAAOC,cAEhC,CAEAqB,SACI,MAAO,CACH1B,UAAWD,KAAKY,eAChBV,QAASF,KAAKiB,aACdd,SAAUH,KAAKoB,cAEvB,CAEAQ,MAAAA,CAAOC,GACCA,EAAK5B,YAAWD,KAAKC,UAAY4B,EAAK5B,WACtC4B,EAAK3B,UAASF,KAAKE,QAAU2B,EAAK3B,SAClC2B,EAAK1B,WAAUH,KAAKG,SAAW0B,EAAK1B,SAC5C,E","sources":["core/engine/DataManager.js"],"sourcesContent":["\nexport class DataManager {\n    constructor() {\n        this.responses = {};\n        this.context = {};\n        this.metadata = {\n            startTime: new Date().toISOString(),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n\n    saveResponse(questionId, value) {\n        this.responses[questionId] = value;\n        this.metadata.lastUpdated = new Date().toISOString();\n    }\n\n    getResponse(questionId) {\n        return this.responses[questionId];\n    }\n\n    getResponses() {\n        return { ...this.responses };\n    }\n\n    setResponses(responses) {\n        this.responses = { ...responses };\n    }\n\n    setContext(key, value) {\n        this.context[key] = value;\n    }\n\n    getContext(key) {\n        if (key) {\n            return this.context[key];\n        }\n        return { ...this.context };\n    }\n\n    addToContext(updates) {\n        this.context = { ...this.context, ...updates };\n    }\n\n    getMetadata() {\n        return { ...this.metadata };\n    }\n\n    calculateCompletionTime() {\n        const start = new Date(this.metadata.startTime);\n        const end = new Date();\n        const diffMs = end - start;\n        const diffMins = Math.round(diffMs / 60000);\n        return diffMins;\n    }\n\n    reset() {\n        this.responses = {};\n        this.context = {};\n        this.metadata = {\n            startTime: new Date().toISOString(),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n\n    export() {\n        return {\n            responses: this.getResponses(),\n            context: this.getContext(),\n            metadata: this.getMetadata()\n        };\n    }\n\n    import(data) {\n        if (data.responses) this.responses = data.responses;\n        if (data.context) this.context = data.context;\n        if (data.metadata) this.metadata = data.metadata;\n    }\n}\n\nexport default DataManager;"],"names":["DataManager","constructor","this","responses","context","metadata","startTime","Date","toISOString","lastUpdated","saveResponse","questionId","value","getResponse","getResponses","_objectSpread","setResponses","setContext","key","getContext","addToContext","updates","getMetadata","calculateCompletionTime","start","diffMs","Math","round","reset","export","import","data"],"sourceRoot":""}