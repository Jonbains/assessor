/**
 * Agency Transformation Scoring Engine - Enhanced Version
 * 
 * Calculates both transformation readiness and valuation metrics
 * with sophisticated weighting and market benchmarking
 */

export class AgencyTransformationScoring {
    constructor(config = {}) {
      this.config = config;
      
      // Dimension weights for transformation score
      this.transformationWeights = {
        transformation: 0.25,
        resources: 0.20,
        leadership: 0.20,
        change: 0.35
      };
      
      // Valuation dimension weights
      this.valuationWeights = {
        financial: 0.35,
        operational: 0.30,
        strategic: 0.20,
        ai: 0.15
      };
      
      // Question weights by importance
      this.questionWeights = {
        tc: { // Transformation capability
          tc_1: 1.5,  // Current AI usage (critical)
          tc_2: 1.2,  // Process improvement
          tc_3: 1.0,  // Experimentation
          tc_4: 1.3,  // Integration capability
          tc_5: 1.4   // Strategic planning
        },
        rc: { // Resource capability
          rc_1: 1.3,  // Budget availability
          rc_2: 1.1,  // Tool investment
          rc_3: 1.0,  // Training time
          rc_4: 1.4,  // Revenue predictability
          rc_5: 1.2   // Resource allocation
        },
        lc: { // Leadership commitment
          lc_1: 1.5,  // Leadership vision (critical)
          lc_2: 1.2,  // Decision making
          lc_3: 1.3,  // Strategic alignment
          lc_4: 1.1,  // Risk tolerance
          lc_5: 1.4   // Innovation culture
        },
        cr: { // Change readiness
          cr_1: 1.2,  // Past transformations
          cr_2: 1.4,  // AI understanding
          cr_3: 1.3,  // Client readiness  
          cr_4: 1.1,  // Knowledge management
          cr_5: 1.0,  // Team structure
          cr_6: 1.5   // Client concentration
        }
      };
      
      // Service vulnerability baseline scores
      this.serviceVulnerability = {
        content_creation: 85,
        seo_sem: 80,
        digital_marketing: 75,
        media_planning: 70,
        creative_design: 65,
        pr_comms: 60,
        video_production: 55,
        strategy_consulting: 35,
        brand_strategy: 30
      };
      
      // Agency size modifiers
      this.sizeModifiers = {
        '1-10': {
          agility: 1.2,
          resource_constraint: 0.8,
          benchmarks: {
            low: 25,
            average: 40,
            high: 65,
            exceptional: 80
          }
        },
        '11-50': {
          agility: 1.0,
          resource_constraint: 1.0,
          benchmarks: {
            low: 30,
            average: 50,
            high: 70,
            exceptional: 85
          }
        },
        '51-200': {
          agility: 0.8,
          resource_constraint: 1.2,
          benchmarks: {
            low: 35,
            average: 55,
            high: 75,
            exceptional: 90
          }
        },
        '200+': {
          agility: 0.6,
          resource_constraint: 1.3,
          benchmarks: {
            low: 40,
            average: 60,
            high: 80,
            exceptional: 95
          }
        }
      };
      
      // Valuation impact factors
      this.valuationFactors = {
        recurring_revenue: {
          threshold: 40, // % of revenue
          impact: 0.5,   // Multiple increase
          current_avg: 25
        },
        client_concentration: {
          threshold: 20, // Max % per client
          impact: 0.5,
          current_avg: 35
        },
        ai_capability: {
          threshold: 70, // Readiness score
          impact: 1.5,
          current_avg: 30
        },
        process_maturity: {
          threshold: 60,
          impact: 0.3,
          current_avg: 40
        },
        team_capability: {
          threshold: 65,
          impact: 0.7,
          current_avg: 35
        }
      }
    }
  
    /**
     * Main scoring method - enhanced version
     */
    calculateScores(answers, metadata) {
      const { selectedServices = [], agencySize, revenue, agencyType } = metadata;
      
      // Calculate weighted dimension scores
      const dimensionScores = this.calculateWeightedDimensionScores(answers);
      
      // Map to valuation dimensions with context
      const valuationDimensions = this.calculateValuationDimensions(answers, dimensionScores, metadata);
      
      // Calculate service-specific scores with competitive analysis
      const serviceScores = this.calculateServiceScores(answers, selectedServices);
      
      // Calculate aggregate vulnerability metrics
      const vulnerabilityMetrics = this.calculateVulnerabilityMetrics(serviceScores, selectedServices);
      
      // Calculate transformation readiness with size adjustments
      const transformationScore = this.calculateTransformationScore(dimensionScores, agencySize);
      
      // Calculate valuation score with market context
      const valuationScore = this.calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores, serviceScores, answers);
      
      // Calculate overall score with strategic weighting
      const overallScore = this.calculateOverallScore(transformationScore, valuationScore);
      
      // Determine categories with benchmarking
      const readinessCategory = this.getReadinessCategory(transformationScore, agencySize);
      const valuationCategory = this.getValuationCategory(valuationScore);
      
      // Extract actionable insights
      const insights = this.extractActionableInsights(
        dimensionScores, 
        valuationDimensions, 
        serviceScores, 
        answers,
        metadata
      );
      
      // Calculate specific risk factors with severity
      const riskFactors = this.calculateDetailedRiskFactors(answers, serviceScores, metadata);
      
      // Identify transformation priorities
      const priorities = this.identifyTransformationPriorities(
        dimensionScores,
        serviceScores,
        riskFactors,
        agencySize
      );
      
      // Calculate savings and efficiency potential
      const efficiencyPotential = this.calculateEfficiencyPotential(
        serviceScores,
        selectedServices,
        agencySize,
        revenue
      );
      
      // Market positioning analysis
      const marketPosition = this.analyzeMarketPosition(overallScore, agencySize, agencyType);
      
      return {
        overall: Math.round(overallScore),
        transformation: Math.round(transformationScore),
        valuation: Math.round(valuationScore),
        
        dimensions: {
          transformation: Math.round(dimensionScores.transformation),
          resources: Math.round(dimensionScores.resources),
          leadership: Math.round(dimensionScores.leadership),
          change: Math.round(dimensionScores.change)
        },
        
        valuationDimensions: {
          financial: Math.round(valuationDimensions.financial),
          operational: Math.round(valuationDimensions.operational),
          strategic: Math.round(valuationDimensions.strategic),
          ai: Math.round(valuationDimensions.ai)
        },
        
        serviceScores: serviceScores,
        vulnerabilityMetrics: vulnerabilityMetrics,
        
        categories: {
          readiness: readinessCategory,
          valuation: valuationCategory
        },
        
        riskFactors: riskFactors,
        insights: insights,
        priorities: priorities,
        efficiencyPotential: efficiencyPotential,
        marketPosition: marketPosition,
        
        metadata: {
          agencySize,
          revenue,
          agencyType,
          selectedServices,
          questionCount: Object.keys(answers).length,
          completionRate: this.calculateCompletionRate(answers),
          timestamp: new Date().toISOString()
        }
      }
    }
  
    /**
     * Calculate weighted dimension scores
     */
    calculateWeightedDimensionScores(answers) {
      const dimensions = {
        transformation: { scores: [], weights: [] },
        resources: { scores: [], weights: [] },
        leadership: { scores: [], weights: [] },
        change: { scores: [], weights: [] }
      };
      
      // Process answers with weights
      Object.entries(answers).forEach(([questionId, answer]) => {
        const score = typeof answer === 'object' ? (answer.score || 0) : answer;
        let dimension, weight;
        
        // Determine dimension and weight
        if (questionId.startsWith('tc_')) {
          dimension = 'transformation';
          weight = this.questionWeights.tc[questionId] || 1.0
        } else if (questionId.startsWith('rc_')) {
          dimension = 'resources';
          weight = this.questionWeights.rc[questionId] || 1.0
        } else if (questionId.startsWith('lc_')) {
          dimension = 'leadership';
          weight = this.questionWeights.lc[questionId] || 1.0
        } else if (questionId.startsWith('cr_')) {
          dimension = 'change';
          weight = this.questionWeights.cr[questionId] || 1.0
        }
        
        if (dimension) {
          dimensions[dimension].scores.push(score);
          dimensions[dimension].weights.push(weight)
        }
      });
      
      // Calculate weighted averages
      const dimensionScores = {};
      Object.entries(dimensions).forEach(([dimension, data]) => {
        if (data.scores.length > 0) {
          const weightedSum = data.scores.reduce((sum, score, i) => 
            sum + (score * data.weights[i]), 0
          );
          const totalWeight = data.weights.reduce((sum, w) => sum + w, 0);
          dimensionScores[dimension] = ((weightedSum / totalWeight - 1) / 4) * 100
        } else {
          dimensionScores[dimension] = 50;
        }
      });
      
      return dimensionScores;
    }
  
    /**
     * Calculate valuation dimensions with enhanced mapping
     */
    calculateValuationDimensions(answers, dimensionScores, metadata) {
      const valuationDims = {
        financial: 0,
        operational: 0,
        strategic: 0,
        ai: 0
      };
      
      // Financial health - weighted calculation
      const financialFactors = [
        { question: 'rc_1', weight: 1.5 }, // Budget flexibility
        { question: 'rc_4', weight: 2.0 }, // Revenue predictability
        { question: 'rc_5', weight: 1.2 }, // Resource allocation
        { question: 'cr_6', weight: 1.8 }  // Client concentration
      ];
      
      let financialSum = 0, financialWeight = 0;
      financialFactors.forEach(factor => {
        const score = answers[factor.question]?.score || answers[factor.question] || 3;
        financialSum += score * factor.weight;
        financialWeight += factor.weight
      });
      
      valuationDims.financial = ((financialSum / financialWeight - 1) / 4) * 100;
      
      // Operational excellence - process and efficiency
      const operationalFactors = [
        { question: 'tc_2', weight: 1.3 },  // Process improvement
        { question: 'tc_4', weight: 1.5 },  // Integration capability
        { question: 'rc_2', weight: 1.0 },  // Tool investment
        { question: 'cr_1', weight: 1.2 },  // Past transformations
        { question: 'cr_4', weight: 1.4 }   // Knowledge management
      ];
      
      let operationalSum = 0, operationalWeight = 0;
      operationalFactors.forEach(factor => {
        const score = answers[factor.question]?.score || answers[factor.question] || 3;
        operationalSum += score * factor.weight;
        operationalWeight += factor.weight
      });
      
      valuationDims.operational = ((operationalSum / operationalWeight - 1) / 4) * 100;
      
      // Strategic position
      valuationDims.strategic = (
        dimensionScores.leadership * 0.5 +
        ((answers.lc_3?.score || answers.lc_3 || 3) - 1) * 25 * 0.3 +
        ((answers.cr_3?.score || answers.cr_3 || 3) - 1) * 25 * 0.2
      );
      
      // AI capability
      valuationDims.ai = (
        dimensionScores.transformation * 0.6 +
        ((answers.tc_1?.score || answers.tc_1 || 3) - 1) * 25 * 0.2 +
        ((answers.cr_2?.score || answers.cr_2 || 3) - 1) * 25 * 0.2
      );
      
      return valuationDims;
    }
  
    /**
     * Calculate service scores with competitive benchmarking
     */
    calculateServiceScores(answers, selectedServices) {
      const serviceScores = {};
      
      // Check if selectedServices is an object or array and handle accordingly
      const services = Array.isArray(selectedServices) 
        ? selectedServices 
        : Object.keys(selectedServices);
      
      services.forEach(service => {
        const serviceQuestions = Object.entries(answers)
          .filter(([questionId]) => questionId.includes(service.substring(0, 4)))
          .map(([_, answer]) => typeof answer === 'object' ? answer.score : answer);
        
        if (serviceQuestions.length > 0) {
          const avgScore = serviceQuestions.reduce((a, b) => a + b, 0) / serviceQuestions.length;
          const normalizedScore = ((avgScore - 1) / 4) * 100;
          
          // Get AI opportunity score
          const aiOpportunityQuestion = answers[`${service.substring(0, 7)}_5`];
          const aiOpportunity = aiOpportunityQuestion ? 
            ((aiOpportunityQuestion.score || aiOpportunityQuestion || 3) - 1) * 25 : 50;
          
          // Calculate competitive position
          const vulnerability = this.serviceVulnerability[service] || 50;
          const competitiveGap = vulnerability - normalizedScore;
          
          serviceScores[service] = {
            score: Math.round(normalizedScore),
            vulnerability: vulnerability,
            adaptability: Math.round(100 - vulnerability + (normalizedScore * 0.3)),
            aiOpportunity: Math.round(aiOpportunity),
            competitiveGap: Math.round(competitiveGap),
            marketPressure: this.calculateMarketPressure(service, vulnerability),
            transformationUrgency: this.calculateTransformationUrgency(
              normalizedScore, 
              vulnerability, 
              aiOpportunity
            ),
            readiness: normalizedScore > 60 ? 'high' : normalizedScore > 40 ? 'medium' : 'low'
          }
        }
      });
      
      return serviceScores;
    }
  
    /**
     * Calculate vulnerability metrics
     */
    calculateVulnerabilityMetrics(serviceScores, selectedServices) {
      if (selectedServices.length === 0) {
        return {
          overall: 50,
          highest: 50,
          average: 50,
          criticalServices: 0
        }
      }
      
      let totalVulnerability = 0;
      let maxVulnerability = 0;
      let criticalCount = 0;
      let weights = [];
      
      // Handle selectedServices as either an array or an object
      const services = Array.isArray(selectedServices) 
        ? selectedServices 
        : Object.keys(selectedServices);
      
      services.forEach(service => {
        const score = serviceScores[service];
        if (score) {
          // Weight by readiness (lower readiness = higher weight)
          const weight = score.readiness === 'low' ? 1.5 : (score.readiness === 'medium' ? 1.0 : 0.7);
          
          totalVulnerability += score.vulnerability * weight;
          weights.push(weight);
          
          if (score.vulnerability > maxVulnerability) {
            maxVulnerability = score.vulnerability
          }
          
          if (score.vulnerability > 75 && score.readiness === 'low') {
            criticalCount++
          }
        }
      });
      
      const totalWeight = weights.reduce((a, b) => a + b, 0);
      
      return {
        overall: Math.round(totalVulnerability / totalWeight),
        highest: maxVulnerability,
        average: Math.round(totalVulnerability / totalWeight),
        criticalServices: criticalCount,
        atriskRevenue: this.calculateAtRiskRevenue(serviceScores, selectedServices)
      }
    }
  
    /**
     * Calculate transformation score with size adjustments
     */
    calculateTransformationScore(dimensionScores, agencySize) {
      let weightedSum = 0;
      let totalWeight = 0;
      
      Object.entries(this.transformationWeights).forEach(([dimension, weight]) => {
        if (dimensionScores[dimension] !== undefined) {
          weightedSum += dimensionScores[dimension] * weight;
          totalWeight += weight
        }
      });
      
      let baseScore = totalWeight > 0 ? weightedSum / totalWeight : 50;
      
      // Apply size modifiers
      const sizeModifier = this.sizeModifiers[agencySize] || this.sizeModifiers['11-50'];
      
      // Agility bonus for smaller agencies
      if (agencySize === '1-10' && baseScore > 40) {
        baseScore *= sizeModifier.agility
      }
      
      // Resource constraint penalty
      if (dimensionScores.resources < 40) {
        baseScore *= sizeModifier.resource_constraint
      }
      
      return Math.max(0, Math.min(100, baseScore));
    }

    /**
     * Calculate overall score as weighted combination of transformation and valuation
     */
    calculateOverallScore(transformationScore, valuationScore) {
      // Weight transformation score more heavily (60%) as it's more predictive of success
      const weightedTransformation = transformationScore * 0.6;
      const weightedValuation = valuationScore * 0.4;
      
      // Return the combined score rounded to nearest integer
      return Math.round(weightedTransformation + weightedValuation);
    }
  
    /**
     * Calculate valuation score with market context
     */
    calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores, serviceScores, answers) {
      const insights = [];
      
      // Transformation insights
      if (dimensionScores.transformation > 70) {
        insights.push({
          type: 'strength',
          priority: 'high',
          message: 'Your AI foundation positions you in the top 20% of agencies',
          action: 'Leverage this advantage to win AI-forward clients',
          impact: 'Revenue growth opportunity'
        })
      } else if (dimensionScores.transformation < 40) {
        insights.push({
          type: 'risk',
          priority: 'critical',
          message: 'Limited AI adoption creates immediate competitive disadvantage',
          action: 'Start with team-wide AI literacy program this week',
          impact: 'Prevent client loss'
        })
      }
      
      // Resource insights
      if (dimensionScores.resources > 60 && dimensionScores.transformation < 50) {
        insights.push({
          type: 'opportunity',
          priority: 'high',
          message: 'You have resources but lack AI direction',
          action: 'Invest in strategic AI roadmap development',
          impact: 'Accelerate transformation by 6 months'
        })
      }
      
      // Leadership insights
      if (dimensionScores.leadership > 70) {
        insights.push({
          type: 'strength',
          priority: 'medium',
          message: 'Leadership alignment is your transformation superpower',
          action: 'Empower leaders as AI champions',
          impact: '3x faster adoption'
        })
      } else if (dimensionScores.leadership < 40) {
        insights.push({
          type: 'blocker',
          priority: 'critical',
          message: 'Leadership skepticism will sabotage AI initiatives',
          action: 'Executive AI immersion session urgently needed',
          impact: 'Unblock transformation'
        })
      }
      
      // Service vulnerability insights
      const criticalServices = Object.entries(serviceScores)
        .filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low')
        .map(([service]) => service);
      
      if (criticalServices.length > 0) {
        insights.push({
          type: 'threat',
          priority: 'critical',
          message: `${criticalServices.length} core services face immediate AI disruption`,
          action: `Transform ${this.getServiceName(criticalServices[0])} first`,
          impact: 'Protect revenue base'
        })
      }
      
      // Valuation insights
      if (valuationDimensions.financial < 40 && valuationDimensions.ai > 60) {
        insights.push({
          type: 'opportunity',
          priority: 'high',
          message: 'Strong AI capability hindered by weak financials',
          action: 'Focus on recurring revenue and client diversification',
          impact: '+1-2x valuation multiple'
        })
      }
      
      // Client concentration insight
      const clientConcentration = answers.cr_6?.score || answers.cr_6 || 3;
      if (clientConcentration <= 2) {
        insights.push({
          type: 'risk',
          priority: 'high',
          message: 'Major client dependency threatens stability',
          action: 'Urgent business development in similar verticals',
          impact: 'Reduce existential risk'
        })
      }
      
      // Quick win identification
      const quickWinServices = Object.entries(serviceScores)
        .filter(([_, score]) => score.aiOpportunity > 75 && score.score > 50)
        .map(([service]) => service);
      
      if (quickWinServices.length > 0) {
        insights.push({
          type: 'opportunity',
          priority: 'medium',
          message: `Quick AI wins available in ${this.getServiceName(quickWinServices[0])}`,
          action: 'Run 2-week pilot with measurable metrics',
          impact: 'Build momentum and confidence'
        })
      }
      
      // Sort by priority and return top insights
      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
      return insights
        .sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority])
        .slice(0, 6)
    }
  
    /**
     * Calculate detailed risk factors
     */
    calculateDetailedRiskFactors(answers, serviceScores, metadata) {
      const risks = [];
      
      // Client concentration risk
      const clientConcentration = answers.cr_6?.score || answers.cr_6 || 3;
      if (clientConcentration <= 2) {
        const concentrationLevel = clientConcentration === 1 ? '>50%' : '>30%';
        risks.push({
          factor: 'Client Concentration',
          severity: 'critical',
          currentState: `Major client represents ${concentrationLevel} of revenue`,
          impact: '-1.0-1.5x multiple',
          mitigation: 'Diversify to no client >20% within 12 months',
          timeframe: '12 months'
        })
      }
      
      // Revenue predictability
      const revenuePredictability = answers.rc_4?.score || answers.rc_4 || 3;
      if (revenuePredictability <= 2) {
        const recurringPct = revenuePredictability === 1 ? '<10%' : '<25%';
        risks.push({
          factor: 'Revenue Volatility',
          severity: 'high',
          currentState: `Only ${recurringPct} recurring revenue`,
          impact: '-0.5-1.0x multiple',
          mitigation: 'Convert project clients to retainers',
          timeframe: '6 months'
        })
      }
      
      // Key person dependency
      const keyPerson = answers.cr_4?.score || answers.cr_4 || 3;
      if (keyPerson <= 2) {
        risks.push({
          factor: 'Key Person Risk',
          severity: 'high',
          currentState: 'Critical knowledge concentrated in few people',
          impact: '-0.5x multiple',
          mitigation: 'Document processes and cross-train team',
          timeframe: '3 months'
        })
      }
      
      // Service vulnerability  
      const highVulnerabilityServices = Object.entries(serviceScores)
        .filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low')
        .map(([service, score]) => ({
          service,
          revenue: this.estimateServiceRevenue(service, metadata)
        }));
      
      if (highVulnerabilityServices.length > 0) {
        const atRiskRevenue = highVulnerabilityServices
          .reduce((sum, s) => sum + s.revenue, 0);
        
        risks.push({
          factor: 'Service Disruption',
          severity: 'critical',
          currentState: `${highVulnerabilityServices.length} services highly vulnerable`,
          impact: '-0.5-1.5x multiple',
          mitigation: `Transform ${this.getServiceName(highVulnerabilityServices[0].service)} immediately`,
          timeframe: '6 months',
          revenueAtRisk: atRiskRevenue
        })
      }
      
      // AI readiness gap
      const aiReadiness = answers.cr_2?.score || answers.cr_2 || 3;
      const competitorPressure = answers.cr_3?.score || answers.cr_3 || 3;
      
      if (aiReadiness <= 2 && competitorPressure >= 4) {
        risks.push({
          factor: 'Competitive Disadvantage',
          severity: 'high',
          currentState: 'Competitors advancing while you lag',
          impact: '-0.5-1.0x multiple',
          mitigation: 'Accelerated AI adoption program',
          timeframe: '3 months'
        })
      }
      
      // Leadership misalignment
      const leadershipScore = (answers.lc_1?.score || answers.lc_1 || 3);
      if (leadershipScore <= 2) {
        risks.push({
          factor: 'Leadership Resistance',
          severity: 'high',
          currentState: 'Leadership not bought into AI transformation',
          impact: '-0.3-0.5x multiple',
          mitigation: 'Executive AI strategy session',
          timeframe: '1 month'
        })
      }
      
      // Calculate total risk impact
      const totalImpact = risks.reduce((sum, risk) => {
        const impactMatch = risk.impact.match(/-?([\d.]+)/);
        return sum + (impactMatch ? parseFloat(impactMatch[1]) : 0);
      }, 0);
      
      risks.forEach(risk => {
        risk.totalRiskContext = `Part of ${totalImpact.toFixed(1)}x total multiple risk`;
      });
      
      return risks;
    }
  
    /**
     * Identify transformation priorities
     */
    identifyTransformationPriorities(dimensionScores, serviceScores, riskFactors, agencySize) {
      const priorities = [];
      
      // Dimension-based priorities
      const weakestDimension = Object.entries(dimensionScores)
        .sort((a, b) => a[1] - b[1])[0];
      
      if (weakestDimension[1] < 40) {
        priorities.push({
          area: weakestDimension[0],
          urgency: 'critical',
          focus: this.getDimensionFocus(weakestDimension[0]),
          impact: `Improve ${weakestDimension[0]} score by 20+ points`,
          timeframe: '30 days'
        })
      }
      
      // Service transformation priorities
      const servicesByUrgency = Object.entries(serviceScores)
        .sort((a, b) => b[1].transformationUrgency - a[1].transformationUrgency)
        .slice(0, 3);
      
      servicesByUrgency.forEach(([service, score], index) => {
        priorities.push({
          area: 'service',
          service: service,
          urgency: index === 0 ? 'critical' : 'high',
          focus: `Transform ${this.getServiceName(service)}`,
          impact: `Reduce vulnerability by ${score.competitiveGap}%`,
          timeframe: index === 0 ? '60 days' : '90 days'
        })
      });
      
      // Risk mitigation priorities
      const criticalRisks = riskFactors.filter(r => r.severity === 'critical');
      criticalRisks.forEach(risk => {
        priorities.push({
          area: 'risk',
          riskFactor: risk.factor,
          urgency: 'critical',
          focus: risk.mitigation,
          impact: `Protect ${risk.impact} valuation`,
          timeframe: risk.timeframe
        })
      });
      
      // Size-specific priorities
      if (agencySize === '1-10') {
        priorities.push({
          area: 'agility',
          urgency: 'high',
          focus: 'Leverage small size for rapid AI adoption',
          impact: 'Outmaneuver larger competitors',
          timeframe: '30 days'
        })
      } else if (parseInt(agencySize.split('-')[0]) > 50) {
        priorities.push({
          area: 'scale',
          urgency: 'high',
          focus: 'Create AI center of excellence',
          impact: 'Scale AI across all teams',
          timeframe: '90 days'
        })
      }
      
      // Sort and limit priorities
      const urgencyOrder = { critical: 0, high: 1, medium: 2, low: 3 };
      return priorities
        .sort((a, b) => urgencyOrder[a.urgency] - urgencyOrder[b.urgency])
        .slice(0, 5);
    }
  
    /**
     * Calculate efficiency potential
     */
    calculateEfficiencyPotential(serviceScores, selectedServices, agencySize, revenue) {
      const sizeNum = parseInt(agencySize.split('-')[0]) || 10;
      const avgSalary = 50000; // Assumed average;
      const billableHours = 1600; // Per person per year;
      const hourlyRate = avgSalary / billableHours * 2.5; // With margin;
      
      let totalTimeSavings = 0;
      let affectedRevenue = 0;
      
      selectedServices.forEach(service => {
        const score = serviceScores[service];
        if (score) {
          // Estimate time savings based on AI opportunity
          const timeSavingsPct = score.aiOpportunity * 0.7 / 100; // 70% of opportunity;
          const serviceRevenue = this.estimateServiceRevenue(service, { revenue });
          const serviceHours = serviceRevenue / hourlyRate;
          const hoursSaved = serviceHours * timeSavingsPct;
          
          totalTimeSavings += hoursSaved;
          affectedRevenue += serviceRevenue
        }
      });
      
      const annualHoursSaved = Math.round(totalTimeSavings);
      const annualCostSavings = Math.round(annualHoursSaved * (hourlyRate * 0.4)); // Cost portion;
      const capacityIncrease = Math.round((totalTimeSavings / (sizeNum * billableHours)) * 100);
      
      return {
        annualHoursSaved,
        annualCostSavings,
        capacityIncrease,
        revenueOpportunity: Math.round(annualHoursSaved * hourlyRate * 0.6), // New revenue potential
        headcountEquivalent: (annualHoursSaved / billableHours).toFixed(1),
        roiMonths: this.calculateROIMonths(annualCostSavings, agencySize),
        specificSavings: this.calculateSpecificSavings(serviceScores, selectedServices)
      };
    }
  
    /**
     * Analyze market position
     */
    analyzeMarketPosition(overallScore, agencySize, agencyType) {
      const benchmarks = this.sizeModifiers[agencySize]?.benchmarks || 
                        this.sizeModifiers['11-50'].benchmarks;
      
      let percentile;
      if (overallScore >= benchmarks.exceptional) {
        percentile = 90 + (overallScore - benchmarks.exceptional) / 
                     (100 - benchmarks.exceptional) * 10
                    } else if (overallScore >= benchmarks.high) {
                        percentile = 70 + (overallScore - benchmarks.high) / 
                                     (benchmarks.exceptional - benchmarks.high) * 20
                      } else if (overallScore >= benchmarks.average) {
                        percentile = 40 + (overallScore - benchmarks.average) / 
                                     (benchmarks.high - benchmarks.average) * 30
                      } else if (overallScore >= benchmarks.low) {
                        percentile = 20 + (overallScore - benchmarks.low) / 
                                     (benchmarks.average - benchmarks.low) * 20
                      } else {
                        percentile = overallScore / benchmarks.low * 20
                      }
                      
                      const position = {
                        percentile: Math.round(percentile),
                        comparison: `You're ahead of ${Math.round(percentile)}% of ${agencySize} agencies`,
                        quartile: this.getQuartile(percentile),
                        trend: this.getMarketTrend(percentile, agencyType),
                        competitiveAdvantage: this.getCompetitiveAdvantage(percentile),
                        marketImplication: this.getMarketImplication(percentile),
                        peerComparison: this.getPeerComparison(overallScore, agencySize, agencyType)
                      };
                      
                      return position;
                    }
                  
                    // Helper methods
                    calculateMarketPressure(service, vulnerability) {
                      if (vulnerability >= 80) return 'extreme';
                      if (vulnerability >= 70) return 'high';
                      if (vulnerability >= 60) return 'moderate';
                      if (vulnerability >= 50) return 'emerging';
                      return 'low';
                    }
                    ;
                    calculateTransformationUrgency(readiness, vulnerability, aiOpportunity) {
                      // High vulnerability + low readiness + high opportunity = maximum urgency
                      const urgencyScore = (
                        (vulnerability / 100) * 0.4 +
                        ((100 - readiness) / 100) * 0.3 +
                        (aiOpportunity / 100) * 0.3
                      ) * 100;
                      
                      return Math.round(urgencyScore);
                    }
                    ;
                    calculateAtRiskRevenue(serviceScores, selectedServices) {
                      let atRisk = 0;
                      
                      // Handle selectedServices as either an array or an object
                      const services = Array.isArray(selectedServices) 
                        ? selectedServices 
                        : Object.keys(selectedServices);
                      
                      services.forEach(service => {
                        const score = serviceScores[service];
                        if (score && score.vulnerability > 70 && score.readiness === 'low') {
                          // Assume equal revenue distribution for simplicity
                          atRisk += (100 / services.length) * (score.vulnerability / 100)
                        }
                      });
                      
                      return Math.round(atRisk);
                    }
                    ;
                    estimateServiceRevenue(service, metadata) {
                      // Rough estimation based on typical agency revenue distribution
                      const serviceWeights = {
                        creative_design: 0.25,
                        content_creation: 0.20,
                        digital_marketing: 0.20,
                        media_planning: 0.15,
                        strategy_consulting: 0.10,
                        pr_comms: 0.05,
                        seo_sem: 0.05
                      };
                      
                      const weight = serviceWeights[service] || 0.1;
                      const totalRevenue = metadata.revenue || 1000000; // Default 1M;
                      
                      return Math.round(totalRevenue * weight);
                    }
                    ;
                    getServiceName(serviceId) {
                      const serviceNames = {
                        content_creation: "Content Creation",
                        creative_design: "Creative & Design",
                        digital_marketing: "Digital Marketing",
                        media_planning: "Media Planning & Buying",
                        seo_sem: "SEO/SEM",
                        pr_comms: "PR & Communications",
                        video_production: "Video Production",
                        strategy_consulting: "Strategy & Consulting",
                        brand_strategy: "Brand Strategy"
                      };
                      return serviceNames[serviceId] || serviceId;
                    }
                    
                    getDimensionFocus(dimension) {
                      const focuses = {
                        transformation: "Build AI capability foundation",
                        resources: "Secure budget and time for transformation",
                        leadership: "Align leadership on AI vision",
                        change: "Develop change management plan"
                      };
                      return focuses[dimension] || "Improve capability";
                    }
                    ;
                    calculateROIMonths(annualSavings, agencySize) {
                      // Estimate investment needed based on agency size
                      const investmentEstimates = {
                        '1-10': 25000,
                        '11-50': 50000,
                        '51-200': 100000,
                        '200+': 200000
                      };
                      
                      const investment = investmentEstimates[agencySize] || 50000;
                      const monthlyReturn = annualSavings / 12;
                      
                      return Math.ceil(investment / monthlyReturn);
                    }
                    ;
                    calculateSpecificSavings(serviceScores, selectedServices) {
                      const savings = {};
                      
                      selectedServices.forEach(service => {
                        const score = serviceScores[service];
                        if (score) {
                          savings[service] = {
                            hoursSaved: Math.round(1000 * (score.aiOpportunity / 100)),
                            tasks: this.getAutomatableTasks(service),
                            implementation: this.getImplementationTime(service)
                          }
                        }
                      });
                      
                      return savings;
                    }
                    
                    getAutomatableTasks(service) {
                      const tasks = {
                        content_creation: ["First drafts", "SEO optimization", "Content repurposing"],
                        creative_design: ["Concept generation", "Asset variations", "Resizing"],
                        digital_marketing: ["Campaign optimization", "Audience targeting", "A/B testing"],
                        media_planning: ["Media mix modeling", "Budget allocation", "Performance tracking"],
                        seo_sem: ["Keyword research", "Content optimization", "Competitor analysis"],
                        pr_comms: ["Media monitoring", "Press release drafts", "Sentiment analysis"]
                      };
                      return tasks[service] || ["Process optimization", "Data analysis", "Reporting"];
                    }
                    
                    getImplementationTime(service) {
                      const complexity = {
                        content_creation: "4-6 weeks",
                        creative_design: "6-8 weeks",
                        digital_marketing: "8-12 weeks",
                        media_planning: "8-12 weeks",
                        seo_sem: "4-6 weeks",
                        pr_comms: "6-8 weeks"
                      };
                      return complexity[service] || "6-8 weeks";
                    }
                    
                    getQuartile(percentile) {
                      if (percentile >= 75) return "Top Quartile";
                      if (percentile >= 50) return "Second Quartile";
                      if (percentile >= 25) return "Third Quartile";
                      return "Bottom Quartile";
                    }
                    ;
                    getMarketTrend(percentile, agencyType) {
                      const trends = {
                        creative: "Creative agencies leading AI adoption for concept generation",
                        digital: "Digital agencies integrating AI across all channels",
                        pr: "PR agencies using AI for media intelligence and content",
                        integrated: "Integrated agencies building AI centers of excellence"
                      };
                      
                      const trend = trends[agencyType] || "Agencies rapidly adopting AI capabilities";
                      
                      if (percentile >= 75) {
                        return `Leading the trend: ${trend}`
                      } else if (percentile >= 50) {
                        return `Keeping pace: ${trend}`
                      } else {
                        return `Falling behind: ${trend}`
                      }
                    }
                    
                    getCompetitiveAdvantage(percentile) {
                      if (percentile >= 90) {
                        return "Significant competitive advantage - win AI-forward clients";
                      } else if (percentile >= 75) {
                        return "Strong position - differentiate on AI capabilities";
                      } else if (percentile >= 50) {
                        return "Competitive parity - need differentiation";
                      } else if (percentile >= 25) {
                        return "Competitive disadvantage - urgent catch-up needed";
                      }
                      return "Severe disadvantage - at risk of obsolescence";
                    }
                    
                    getMarketImplication(percentile) {
                      if (percentile >= 75) {
                        return "Position as AI transformation leader to command premium";
                      } else if (percentile >= 50) {
                        return "Accelerate AI adoption to stay competitive";
                      } else if (percentile >= 25) {
                        return "Immediate action required to prevent client loss";
                      }
                      return "Consider partnerships or acquisition for survival";
                    }
                    
                    getPeerComparison(score, agencySize, agencyType) {
                      // Simulated peer data for comparison
                      const peerAverages = {
                        creative: { '1-10': 45, '11-50': 55, '51-200': 65, '200+': 75 },
                        digital: { '1-10': 50, '11-50': 60, '51-200': 70, '200+': 80 },
                        pr: { '1-10': 40, '11-50': 50, '51-200': 60, '200+': 70 },
                        integrated: { '1-10': 48, '11-50': 58, '51-200': 68, '200+': 78 }
                      };
                      
                      const peerAvg = peerAverages[agencyType]?.[agencySize] || 55;
                      const difference = score - peerAvg;
                      
                      return {
                        peerAverage: peerAvg,
                        difference: difference,
                        comparison: difference > 0 ? 
                          `${Math.abs(difference)} points ahead of similar agencies` :
                          `${Math.abs(difference)} points behind similar agencies`
                      };
                    }
                    
                    calculateCompletionRate(answers) {
                      const expectedQuestions = 30; // Approximate total;
                      const answered = Object.keys(answers).length;
                      return Math.round((answered / expectedQuestions) * 100);
                    }
                    
                    getReadinessCategory(score, agencySize) {
                      // Get size-specific benchmarks or use defaults
                      const sizeModifier = this.sizeModifiers[agencySize] || this.sizeModifiers['11-50'];
                      const benchmarks = sizeModifier.benchmarks;
                      
                      if (score >= benchmarks.high) return 'high';
                      if (score >= benchmarks.average) return 'medium';
                      return 'low';
                    }
                    
                    getValuationCategory(score) {
                      if (score >= 75) return 'premium';
                      if (score >= 60) return 'high';
                      if (score >= 40) return 'average';
                      return 'below-average';
                    }
                    
                    /**
                     * Extract actionable insights based on scores and answers
                     * @param {Object} dimensionScores - Scores by dimension
                     * @param {Object} valuationDimensions - Valuation dimension scores
                     * @param {Object} serviceScores - Scores by service
                     * @param {Object} answers - User answers to assessment questions
                     * @param {Object} metadata - Additional metadata like agency size, type
                     * @returns {Array} Array of insight objects with priority, area, description and actions
                     */
                    extractActionableInsights(dimensionScores, valuationDimensions, serviceScores, answers, metadata) {
                      const insights = [];
                      
                      // Get the lowest scoring dimensions first (most critical areas to address)
                      const dimensionEntries = Object.entries(dimensionScores);
                      const sortedDimensions = dimensionEntries.sort((a, b) => a[1] - b[1]);
                      
                      // Add insights for the lowest 2 dimensions
                      for (let i = 0; i < Math.min(2, sortedDimensions.length); i++) {
                        const [dimension, score] = sortedDimensions[i];
                        
                        let insightObj = {
                          priority: i + 1,
                          area: this.getDimensionDisplayName(dimension),
                          score: score,
                          description: this.getInsightDescription(dimension, score),
                          actions: this.getRecommendedActions(dimension, score)
                        };
                        
                        insights.push(insightObj);
                      }
                      
                      // Add service-specific insights for most vulnerable services
                      if (serviceScores && Object.keys(serviceScores).length > 0) {
                        const serviceEntries = Object.entries(serviceScores);
                        const sortedServices = serviceEntries.sort((a, b) => a[1].vulnerability - b[1].vulnerability);
                        
                        // Add the most vulnerable service insight
                        if (sortedServices.length > 0) {
                          const [serviceId, serviceData] = sortedServices[sortedServices.length - 1];
                          insights.push({
                            priority: 3,
                            area: `${this.getServiceDisplayName(serviceId)} Service`,
                            score: serviceData.vulnerability,
                            description: `Your ${this.getServiceDisplayName(serviceId)} service has high vulnerability to AI disruption with a score of ${Math.round(serviceData.vulnerability)}.`,
                            actions: this.getServiceActions(serviceId, serviceData.vulnerability)
                          });
                        }
                      }
                      
                      // Add general insights about transformation readiness
                      insights.push({
                        priority: 4,
                        area: 'Overall Transformation',
                        score: metadata?.transformationScore || 0,
                        description: 'Digital transformation requires a comprehensive strategy addressing technology, people, and processes.',
                        actions: [
                          'Develop a 12-month AI integration roadmap',
                          'Identify pilot projects for AI implementation',
                          'Invest in staff AI literacy and training'
                        ]
                      });
                      
                      return insights;
                    }
                    
                    /**
                     * Get display name for a dimension code
                     */
                    getDimensionDisplayName(dimensionCode) {
                      const dimensionMap = {
                        teamChampions: 'Team Champions & Skills',
                        resourcesConstraints: 'Resources & Constraints',
                        leadershipCulture: 'Leadership & Culture',
                        changeReadiness: 'Change Readiness'
                      };
                      
                      return dimensionMap[dimensionCode] || dimensionCode;
                    }
                    
                    /**
                     * Get display name for a service code
                     */
                    getServiceDisplayName(serviceId) {
                      const serviceMap = {
                        content_creation: 'Content Creation',
                        creative_design: 'Creative Design',
                        digital_marketing: 'Digital Marketing',
                        seo_sem: 'SEO & SEM',
                        pr_comms: 'PR & Communications',
                        strategy_consulting: 'Strategy & Consulting'
                      };
                      
                      return serviceMap[serviceId] || serviceId;
                    }
                    
                    /**
                     * Get insight description based on dimension and score
                     */
                    getInsightDescription(dimension, score) {
                      // Default descriptions by dimension
                      const descriptions = {
                        teamChampions: {
                          low: 'Your team lacks necessary AI champions and skills for the coming transition.',
                          medium: 'Your team has some AI awareness but lacks specialized expertise.',
                          high: 'Your team has strong AI champions and growing expertise.'
                        },
                        resourcesConstraints: {
                          low: 'Your agency faces significant resource constraints for AI adoption.',
                          medium: 'Your agency has allocated some resources for AI initiatives.',
                          high: 'Your agency is well-positioned with resources for AI transformation.'
                        },
                        leadershipCulture: {
                          low: 'Leadership vision and culture are not aligned with AI transformation.',
                          medium: 'Leadership has begun embracing AI but cultural shift is incomplete.',
                          high: 'Strong leadership vision and culture supporting AI adoption.'
                        },
                        changeReadiness: {
                          low: 'Your organization shows resistance to AI-driven change.',
                          medium: 'Change readiness is developing but implementation gaps exist.',
                          high: 'Your organization demonstrates strong readiness for AI transformation.'
                        }
                      };
                      
                      // Determine level based on score
                      let level = 'medium';
                      if (score < 40) level = 'low';
                      if (score >= 70) level = 'high';
                      
                      return descriptions[dimension]?.[level] || 
                        `Your score of ${Math.round(score)} indicates areas for improvement.`;
                    }
                    
                    /**
                     * Get recommended actions based on dimension and score
                     */
                    getRecommendedActions(dimension, score) {
                      // Default actions by dimension and score level
                      const actionsByDimension = {
                        teamChampions: {
                          low: [
                            'Designate AI champions within each service area',
                            'Develop a structured AI upskilling program',
                            'Consider hiring AI specialists or consultants'
                          ],
                          medium: [
                            'Expand AI training to more team members',
                            'Create cross-functional AI innovation teams',
                            'Develop AI skill assessment framework'
                          ],
                          high: [
                            'Implement advanced AI certification programs',
                            'Develop AI mentorship programs',
                            'Create AI centers of excellence'
                          ]
                        },
                        resourcesConstraints: {
                          low: [
                            'Identify low-cost AI tools to start with',
                            'Allocate specific budget for AI tools and training',
                            'Explore AI partnerships to share costs'
                          ],
                          medium: [
                            'Increase AI infrastructure investment',
                            'Develop resource allocation framework for AI projects',
                            'Implement AI ROI measurement'
                          ],
                          high: [
                            'Scale successful AI investments',
                            'Build dedicated AI innovation fund',
                            'Develop comprehensive AI resource strategy'
                          ]
                        },
                        leadershipCulture: {
                          low: [
                            'Educate leadership on AI business impact',
                            'Develop clear AI vision statement',
                            'Start small AI pilots with visible results'
                          ],
                          medium: [
                            'Integrate AI into strategic planning',
                            'Create AI ethics framework',
                            'Develop AI-positive culture initiatives'
                          ],
                          high: [
                            'Position as AI thought leader in your space',
                            'Develop AI governance structure',
                            'Create comprehensive AI communication strategy'
                          ]
                        },
                        changeReadiness: {
                          low: [
                            'Address AI concerns through education',
                            'Start with non-disruptive AI use cases',
                            'Develop change management framework for AI'
                          ],
                          medium: [
                            'Implement structured AI change program',
                            'Create AI success metrics dashboard',
                            'Develop AI champions network'
                          ],
                          high: [
                            'Scale AI transformation initiatives',
                            'Develop advanced AI implementation playbooks',
                            'Create AI innovation incentive programs'
                          ]
                        }
                      };
                      
                      // Determine level based on score
                      let level = 'medium';
                      if (score < 40) level = 'low';
                      if (score >= 70) level = 'high';
                      
                      return actionsByDimension[dimension]?.[level] || [
                        'Develop comprehensive assessment of current capabilities',
                        'Create targeted improvement plan',
                        'Implement regular progress reviews'
                      ];
                    }
                    
                    /**
                     * Get service-specific recommended actions
                     */
                    getServiceActions(serviceId, vulnerabilityScore) {
                      const serviceActions = {
                        content_creation: [
                          'Implement AI content generation with human oversight',
                          'Develop AI content governance framework',
                          'Train team on AI content tools and prompt engineering'
                        ],
                        creative_design: [
                          'Explore AI design assistance tools',
                          'Implement AI for routine design tasks',
                          'Develop AI-human collaborative workflows'
                        ],
                        digital_marketing: [
                          'Implement AI-driven campaign optimization',
                          'Use AI for personalization at scale',
                          'Develop AI analytics capabilities'
                        ],
                        seo_sem: [
                          'Implement AI-powered keyword research',
                          'Use AI for content optimization',
                          'Develop AI reporting capabilities'
                        ],
                        pr_comms: [
                          'Use AI for media monitoring and analysis',
                          'Implement AI press release enhancements',
                          'Develop crisis communication AI tools'
                        ],
                        strategy_consulting: [
                          'Use AI for market research and analysis',
                          'Implement AI-assisted strategic planning',
                          'Develop data-driven decision frameworks'
                        ]
                      };
                      
                      return serviceActions[serviceId] || [
                        'Assess AI impact on service delivery',
                        'Identify AI integration opportunities',
                        'Develop AI skills specific to service area'
                      ];
                    }
                    
                    /**
                     * Calculate detailed risk factors based on answers and service scores
                     * @param {Object} answers - User answers to assessment questions
                     * @param {Object} serviceScores - Scores by service
                     * @param {Object} metadata - Additional contextual data
                     * @returns {Array} Array of risk factor objects
                     */
                    calculateDetailedRiskFactors(answers, serviceScores, metadata) {
                      const riskFactors = [];
                      
                      // Get highest vulnerability services
                      if (serviceScores && Object.keys(serviceScores).length > 0) {
                        const services = Object.entries(serviceScores);
                        // Sort by vulnerability (highest first)
                        services.sort((a, b) => b[1].vulnerability - a[1].vulnerability);
                        
                        // Add high-vulnerability services as risk factors
                        services.forEach(([serviceId, data], index) => {
                          if (data.vulnerability > 60) {
                            riskFactors.push({
                              id: `service-risk-${serviceId}`,
                              type: 'service',
                              name: `${this.getServiceDisplayName(serviceId)} Disruption`,
                              severity: this.calculateRiskSeverity(data.vulnerability),
                              description: `Your ${this.getServiceDisplayName(serviceId)} service has ${this.calculateRiskSeverity(data.vulnerability)} risk of AI disruption.`,
                              timeframe: '12-18 months',
                              impact: this.getServiceRiskImpact(serviceId, data.vulnerability)
                            });
                          }
                        });
                      }
                      
                      // Add risk factors based on specific question answers
                      const highRiskAnswers = this.identifyHighRiskAnswers(answers);
                      highRiskAnswers.forEach(item => {
                        riskFactors.push({
                          id: `answer-risk-${item.questionId}`,
                          type: 'capability',
                          name: item.riskName,
                          severity: item.severity,
                          description: item.description,
                          timeframe: item.timeframe || '6-12 months',
                          impact: item.impact || 'Reduced competitive position and potential revenue loss'
                        });
                      });
                      
                      // Add market/sector specific risks
                      const sectorRisks = this.getSectorSpecificRisks(metadata?.sector?.id);
                      riskFactors.push(...sectorRisks);
                      
                      return riskFactors;
                    }
                    
                    /**
                     * Calculate risk severity level from a numeric score
                     */
                    calculateRiskSeverity(score) {
                      if (score >= 80) return 'critical';
                      if (score >= 70) return 'high';
                      if (score >= 50) return 'medium';
                      return 'low';
                    }
                    
                    /**
                     * Get impact description for service risk
                     */
                    getServiceRiskImpact(serviceId, score) {
                      const baseImpacts = {
                        content_creation: 'Commoditization of content services and downward price pressure',
                        creative_design: 'Automation of basic design tasks and increased client DIY options',
                        digital_marketing: 'Increased automation and reduced margins for standard campaigns',
                        seo_sem: 'Automation of keyword research and content optimization',
                        pr_comms: 'Disruption of media monitoring and basic PR content creation',
                        strategy_consulting: 'Automation of basic research and reporting functions'
                      };
                      
                      return baseImpacts[serviceId] || 'Potential revenue and market share loss';
                    }
                    
                    /**
                     * Identify high risk answers from assessment responses
                     */
                    identifyHighRiskAnswers(answers) {
                      const highRiskAnswers = [];
                      
                      // Risk patterns based on specific answers
                      const riskPatterns = [
                        {
                          questionIds: ['tc_1', 'tc_2'],
                          pattern: answer => answer < 2,
                          riskName: 'AI Skills Gap',
                          severity: 'high',
                          description: 'Critical lack of AI skills and knowledge within the team',
                          timeframe: '3-6 months',
                          impact: 'Inability to adapt to AI tools and competitor advancements'
                        },
                        {
                          questionIds: ['rc_2', 'rc_3'],
                          pattern: answer => answer < 3,
                          riskName: 'Resource Constraints',
                          severity: 'medium',
                          description: 'Insufficient resources allocated to AI adoption',
                          timeframe: '6-12 months',
                          impact: 'Delayed transformation leading to competitive disadvantage'
                        },
                        {
                          questionIds: ['lc_1', 'lc_3'],
                          pattern: answer => answer < 3,
                          riskName: 'Leadership Resistance',
                          severity: 'high',
                          description: 'Leadership hesitancy to embrace AI transformation',
                          timeframe: 'Immediate',
                          impact: 'Strategic misalignment and missed market opportunities'
                        },
                        {
                          questionIds: ['cr_1', 'cr_3', 'cr_4'],
                          pattern: answer => answer < 3,
                          riskName: 'Change Resistance',
                          severity: 'medium',
                          description: 'Organizational resistance to AI-driven change',
                          timeframe: '6-12 months',
                          impact: 'Slow adoption and internal friction during transformation'
                        }
                      ];
                      
                      // Check each risk pattern against answers
                      riskPatterns.forEach(pattern => {
                        for (const questionId of pattern.questionIds) {
                          const answer = answers[questionId];
                          if (answer !== undefined && pattern.pattern(answer)) {
                            highRiskAnswers.push({
                              questionId,
                              ...pattern
                            });
                            break; // Only add this risk once even if multiple questions match
                          }
                        }
                      });
                      
                      return highRiskAnswers;
                    }
                    
                    /**
                     * Get sector-specific risks based on the selected sector
                     */
                    getSectorSpecificRisks(sectorId) {
                      const sectorRisks = {
                        pr: [
                          {
                            id: 'sector-pr-1',
                            type: 'sector',
                            name: 'PR Content Automation',
                            severity: 'high',
                            description: 'AI automation of press release generation and distribution',
                            timeframe: '12-18 months',
                            impact: 'Commoditization of basic PR services and margin pressure'
                          }
                        ],
                        marketing: [
                          {
                            id: 'sector-marketing-1',
                            type: 'sector',
                            name: 'Campaign Optimization AI',
                            severity: 'high',
                            description: 'Advanced AI for end-to-end campaign automation and optimization',
                            timeframe: '12-24 months',
                            impact: 'Reduced need for human campaign management and analysis'
                          }
                        ],
                        creative: [
                          {
                            id: 'sector-creative-1',
                            type: 'sector',
                            name: 'AI Creative Generation',
                            severity: 'critical',
                            description: 'Generative AI for design, video, and creative content',
                            timeframe: '6-12 months',
                            impact: 'Disruption of creative production workflows and pricing models'
                          }
                        ],
                        digital: [
                          {
                            id: 'sector-digital-1',
                            type: 'sector',
                            name: 'Programmatic AI Optimization',
                            severity: 'high',
                            description: 'AI-driven programmatic advertising and optimization',
                            timeframe: '12-18 months',
                            impact: 'Automation of media buying and campaign management'
                          }
                        ]
                      };
                      
                      return sectorRisks[sectorId] || [];
                    }
                    
                    /**
                     * Identify transformation priorities based on scores and risk factors
                     * @param {Object} dimensionScores - Scores by dimension
                     * @param {Object} serviceScores - Scores by service
                     * @param {Array} riskFactors - Identified risk factors
                     * @param {String} agencySize - Size category of the agency
                     * @returns {Array} Array of transformation priority objects
                     */
                    identifyTransformationPriorities(dimensionScores, serviceScores, riskFactors, agencySize) {
                      const priorities = [];
                      
                      // Get the lowest scoring dimensions first (most critical areas to address)
                      const dimensionEntries = Object.entries(dimensionScores);
                      const sortedDimensions = dimensionEntries.sort((a, b) => a[1] - b[1]);
                      
                      // Add top 2 dimension priorities
                      for (let i = 0; i < Math.min(2, sortedDimensions.length); i++) {
                        const [dimension, score] = sortedDimensions[i];
                        
                        priorities.push({
                          id: `priority-${dimension}`,
                          area: this.getDimensionDisplayName(dimension),
                          importance: 'high',
                          timeframe: i === 0 ? 'immediate' : '3-6 months',
                          description: `Improve ${this.getDimensionDisplayName(dimension).toLowerCase()} to increase transformation readiness`,
                          actions: this.getRecommendedActions(dimension, score).slice(0, 2) // Top 2 actions
                        });
                      }
                      
                      // Add service-specific priorities for highest vulnerability services
                      if (serviceScores && Object.keys(serviceScores).length > 0) {
                        const services = Object.entries(serviceScores);
                        services.sort((a, b) => b[1].vulnerability - a[1].vulnerability);
                        
                        // Add highest vulnerability service priority
                        if (services.length > 0) {
                          const [serviceId, data] = services[0];
                          priorities.push({
                            id: `priority-service-${serviceId}`,
                            area: this.getServiceDisplayName(serviceId),
                            importance: 'medium',
                            timeframe: '6-9 months',
                            description: `Address high vulnerability in ${this.getServiceDisplayName(serviceId)} service`,
                            actions: this.getServiceActions(serviceId, data.vulnerability).slice(0, 2) // Top 2 actions
                          });
                        }
                      }
                      
                      // Add general AI adoption priority
                      priorities.push({
                        id: 'priority-ai-adoption',
                        area: 'AI Strategy',
                        importance: 'high',
                        timeframe: '0-3 months',
                        description: 'Develop comprehensive AI adoption roadmap',
                        actions: [
                          'Create AI steering committee with cross-functional representation',
                          'Develop phased implementation plan with clear milestones'
                        ]
                      });
                      
                      // Size-specific priority
                      const sizeBasedPriority = this.getSizeSpecificPriority(agencySize);
                      if (sizeBasedPriority) {
                        priorities.push(sizeBasedPriority);
                      }
                      
                      return priorities;
                    }
                    
                    /**
                     * Get size-specific transformation priority
                     */
                    getSizeSpecificPriority(agencySize) {
                      const sizePriorities = {
                        '1-10': {
                          id: 'priority-size-small',
                          area: 'Small Agency Focus',
                          importance: 'high',
                          timeframe: '0-3 months',
                          description: 'Leverage AI to expand capabilities without adding headcount',
                          actions: [
                            'Identify AI tools that provide highest ROI for small teams',
                            'Create AI partnership network to extend capabilities'
                          ]
                        },
                        '11-50': {
                          id: 'priority-size-medium',
                          area: 'Mid-Size Agency Focus',
                          importance: 'medium',
                          timeframe: '3-6 months',
                          description: 'Balance human expertise with AI augmentation',
                          actions: [
                            'Develop AI integration plan for each service line',
                            'Create AI governance structure with clear roles'
                          ]
                        },
                        '51-200': {
                          id: 'priority-size-large',
                          area: 'Large Agency Focus',
                          importance: 'medium',
                          timeframe: '6-9 months',
                          description: 'Implement enterprise-wide AI transformation',
                          actions: [
                            'Develop comprehensive change management plan',
                            'Create AI center of excellence to drive adoption'
                          ]
                        },
                        '200+': {
                          id: 'priority-size-enterprise',
                          area: 'Enterprise Agency Focus',
                          importance: 'high',
                          timeframe: '0-6 months',
                          description: 'Lead market with AI-driven service innovation',
                          actions: [
                            'Establish dedicated AI innovation team',
                            'Develop AI thought leadership position in the market'
                          ]
                        }
                      };
                      
                      return sizePriorities[agencySize] || null;
                    }
                    
                    /**
                     * Calculate efficiency potential and cost savings from AI adoption
                     * @param {Object} serviceScores - Scores by service
                     * @param {Object|Array} selectedServices - Selected services with allocation
                     * @param {String} agencySize - Size category of the agency
                     * @param {Number} revenue - Annual revenue
                     * @returns {Object} Efficiency metrics and savings estimates
                     */
                    calculateEfficiencyPotential(serviceScores, selectedServices, agencySize, revenue) {
                      // Default efficiency if no data
                      if (!serviceScores || Object.keys(serviceScores).length === 0) {
                        return {
                          overall: 15,
                          timeRecovered: 12,
                          costSavings: revenue ? Math.round(revenue * 0.08) : 50000,
                          headcountEquivalent: agencySize === '1-10' ? 1 : agencySize === '11-50' ? 3 : 5,
                          revenueOpportunity: revenue ? Math.round(revenue * 0.12) : 75000
                        };
                      }
                      
                      // Process services - handle both array and object formats
                      const serviceData = [];
                      if (Array.isArray(selectedServices)) {
                        selectedServices.forEach(serviceId => {
                          if (serviceScores[serviceId]) {
                            serviceData.push({
                              id: serviceId,
                              allocation: 1.0 / selectedServices.length,
                              ...serviceScores[serviceId]
                            });
                          }
                        });
                      } else {
                        Object.entries(selectedServices).forEach(([serviceId, allocation]) => {
                          if (serviceScores[serviceId]) {
                            serviceData.push({
                              id: serviceId,
                              allocation: parseFloat(allocation) || 0.1,
                              ...serviceScores[serviceId]
                            });
                          }
                        });
                      }
                      
                      // Calculate weighted efficiency metrics
                      let totalEfficiencyPotential = 0;
                      let totalWeight = 0;
                      
                      serviceData.forEach(service => {
                        // Higher vulnerability = higher efficiency potential with AI
                        const efficiencyFactor = service.vulnerability * 0.2;
                        // Lower current score = more room for improvement
                        const improvementFactor = (100 - service.score) * 0.1;
                        // Combine factors for service-specific efficiency potential
                        const serviceEfficiency = Math.min(90, efficiencyFactor + improvementFactor);
                        
                        totalEfficiencyPotential += serviceEfficiency * service.allocation;
                        totalWeight += service.allocation;
                      });
                      
                      // Calculate overall efficiency potential
                      const overallEfficiency = totalWeight > 0 ? totalEfficiencyPotential / totalWeight : 15;
                      
                      // Size-based adjustment factors
                      const sizeFactors = {
                        '1-10': 1.2,    // Small agencies see bigger relative gains
                        '11-50': 1.0,   // Baseline
                        '51-200': 0.9,  // Slight diminishing returns for larger agencies
                        '200+': 0.8     // More diminishing returns for enterprise
                      };
                      
                      const sizeFactor = sizeFactors[agencySize] || 1.0;
                      const adjustedEfficiency = overallEfficiency * sizeFactor;
                      
                      // Calculate time recovered (percentage of work week)
                      const timeRecovered = Math.min(40, adjustedEfficiency * 0.4);
                      
                      // Calculate cost savings
                      let costSavings = 0;
                      if (revenue) {
                        // Based on typical agency profit margins and labor costs
                        const basePercentage = adjustedEfficiency * 0.005;
                        costSavings = Math.round(revenue * basePercentage);
                      } else {
                        // Fallback if no revenue data
                        costSavings = agencySize === '1-10' ? 40000 : 
                                    agencySize === '11-50' ? 120000 : 
                                    agencySize === '51-200' ? 350000 : 750000;
                      }
                      
                      // Calculate headcount equivalent
                      const headcountMap = {
                        '1-10': Math.min(3, Math.round(adjustedEfficiency / 30)),
                        '11-50': Math.min(8, Math.round(adjustedEfficiency / 20)),
                        '51-200': Math.min(20, Math.round(adjustedEfficiency / 10)),
                        '200+': Math.min(50, Math.round(adjustedEfficiency / 5))
                      };
                      
                      const headcountEquivalent = headcountMap[agencySize] || 3;
                      
                      // Calculate revenue opportunity (new business enabled by efficiency)
                      const revenueOpportunity = revenue ? Math.round(revenue * (adjustedEfficiency * 0.008)) : costSavings * 1.5;
                      
                      return {
                        overall: Math.round(adjustedEfficiency),
                        timeRecovered: Math.round(timeRecovered),
                        costSavings,
                        headcountEquivalent,
                        revenueOpportunity
                      };
                    }
                    
                    /**
                     * Calculate at-risk revenue from vulnerable services
                     */
                    calculateAtRiskRevenue(serviceScores, selectedServices) {
                      if (!serviceScores || Object.keys(serviceScores).length === 0) {
                        return 20;
                      }
                      
                      // Get services with allocation
                      const services = [];
                      if (Array.isArray(selectedServices)) {
                        // Equal allocation if just an array of service IDs
                        selectedServices.forEach(serviceId => {
                          if (serviceScores[serviceId]) {
                            services.push({
                              id: serviceId,
                              allocation: 1.0 / selectedServices.length,
                              vulnerability: serviceScores[serviceId].vulnerability
                            });
                          }
                        });
                      } else {
                        // Use actual allocation values from object
                        Object.entries(selectedServices).forEach(([serviceId, allocation]) => {
                          if (serviceScores[serviceId]) {
                            services.push({
                              id: serviceId,
                              allocation: parseFloat(allocation) || 0.1,
                              vulnerability: serviceScores[serviceId].vulnerability
                            });
                          }
                        });
                      }
                      
                      // Calculate at-risk percentage
                      let atRiskPercentage = 0;
                      services.forEach(service => {
                        // Higher vulnerability = higher percentage at risk
                        // Only count vulnerability above 50 as at-risk
                        const serviceRisk = service.vulnerability > 50 ? 
                          (service.vulnerability - 50) / 50 * 100 : 0;
                          
                        // Weight by service allocation
                        atRiskPercentage += serviceRisk * service.allocation;
                      });
                      
                      return Math.min(100, Math.round(atRiskPercentage));
                    }
                    
                    /**
                     * Calculate market pressure for a service
                     */
                    calculateMarketPressure(serviceId, vulnerability) {
                      // Base market pressure by service type
                      const basePressure = {
                        content_creation: 75,
                        creative_design: 65,
                        digital_marketing: 60,
                        seo_sem: 70,
                        pr_comms: 50,
                        strategy_consulting: 45
                      };
                      
                      // Use base pressure if available, otherwise calculate from vulnerability
                      const base = basePressure[serviceId] || vulnerability * 0.9;
                      
                      // Add random variation (±5) to simulate market dynamics
                      const variation = Math.floor(Math.random() * 10) - 5;
                      
                      return Math.min(100, Math.max(0, Math.round(base + variation)));
                    }
                    
                    /**
                     * Calculate transformation urgency score
                     */
                    calculateTransformationUrgency(readiness, vulnerability, opportunity) {
                      // Higher vulnerability and opportunity with lower readiness = more urgent
                      const urgency = (vulnerability * 0.5) + (opportunity * 0.2) - (readiness * 0.3);
                      return Math.min(100, Math.max(0, Math.round(urgency)));
                    }
                    
                    /**
                     * Analyze market position based on overall score and agency attributes
                     * @param {Number} overallScore - Combined assessment score
                     * @param {String} agencySize - Size category of the agency
                     * @param {String} agencyType - Type/focus of the agency  
                     * @returns {Object} Market position assessment
                     */
                    analyzeMarketPosition(overallScore, agencySize, agencyType) {
                      // Base position categories
                      let position = '';
                      let percentile = 0;
                      let competitiveAdvantage = '';
                      let threatLevel = '';
                      let timeAdvantage = '';
                      
                      // Determine market position percentile
                      if (overallScore >= 85) {
                        position = 'leader';
                        percentile = 90 + Math.floor(Math.random() * 10);
                        competitiveAdvantage = 'significant';
                        threatLevel = 'low';
                        timeAdvantage = '12+ months';
                      } else if (overallScore >= 70) {
                        position = 'strong';
                        percentile = 75 + Math.floor(Math.random() * 15);
                        competitiveAdvantage = 'strong';
                        threatLevel = 'moderate';
                        timeAdvantage = '6-12 months';
                      } else if (overallScore >= 55) {
                        position = 'competitive';
                        percentile = 50 + Math.floor(Math.random() * 25);
                        competitiveAdvantage = 'moderate';
                        threatLevel = 'moderate';
                        timeAdvantage = '3-6 months';
                      } else if (overallScore >= 40) {
                        position = 'vulnerable';
                        percentile = 25 + Math.floor(Math.random() * 25);
                        competitiveAdvantage = 'limited';
                        threatLevel = 'high';
                        timeAdvantage = '0-3 months';
                      } else {
                        position = 'at-risk';
                        percentile = Math.floor(Math.random() * 25);
                        competitiveAdvantage = 'none';
                        threatLevel = 'critical';
                        timeAdvantage = 'immediate action required';
                      }
                      
                      // Size-specific adjustments
                      const sizeAdjustments = {
                        '1-10': {
                          opportunityText: 'Agility advantage enables rapid transformation',
                          challengeText: 'Limited resources for AI investment',
                          recommendationPrefix: 'For small agencies:'
                        },
                        '11-50': {
                          opportunityText: 'Balance of resources and agility',
                          challengeText: 'Competition from both smaller and larger agencies',
                          recommendationPrefix: 'For mid-size agencies:'
                        },
                        '51-200': {
                          opportunityText: 'Resources for systematic transformation',
                          challengeText: 'Organizational complexity slows adoption',
                          recommendationPrefix: 'For large agencies:'
                        },
                        '200+': {
                          opportunityText: 'Scale and resources for market leadership',
                          challengeText: 'Organizational inertia and legacy systems',
                          recommendationPrefix: 'For enterprise agencies:'
                        }
                      };
                      
                      const sizeInfo = sizeAdjustments[agencySize] || sizeAdjustments['11-50'];
                      
                      // Generate recommendations based on position and size
                      const recommendations = [];
                      
                      if (position === 'leader' || position === 'strong') {
                        recommendations.push(
                          `${sizeInfo.recommendationPrefix} Leverage AI leadership for premium positioning and pricing`,
                          'Develop AI thought leadership content and case studies',
                          'Create AI innovation lab or center of excellence'
                        );
                      } else if (position === 'competitive') {
                        recommendations.push(
                          `${sizeInfo.recommendationPrefix} Accelerate transformation in highest-ROI service areas`,
                          'Develop AI specialization in one key service area',
                          'Form strategic partnerships with AI technology providers'
                        );
                      } else {
                        recommendations.push(
                          `${sizeInfo.recommendationPrefix} Urgent focus on AI literacy and basic capabilities`,
                          'Identify and transform most vulnerable service offerings',
                          'Consider acquisitions or partnerships to accelerate transformation'
                        );
                      }
                      
                      return {
                        position,
                        percentile,
                        competitiveAdvantage,
                        threatLevel,
                        timeAdvantage,
                        opportunity: sizeInfo.opportunityText,
                        challenge: sizeInfo.challengeText,
                        recommendations
                      };
                    }
                  }
                  
                  // Export for use in assessment system
                  export default AgencyTransformationScoring;