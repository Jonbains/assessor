import React from 'react';
import styles from '../../core/styles/components.module.css';

// SVG components for radar chart
const RadarChart = ({ dimensions, currentValues }) => {
  const maxValue = 100;
  const angleStep = (Math.PI * 2) / dimensions.length;
  const center = { x: 150, y: 150 };
  const scale = 100; // Size of the chart
  
  // Calculate points for the polygon
  const calculatePoint = (value, index) => {
    const angle = angleStep * index - Math.PI / 2; // Start from top
    const distance = (value / maxValue) * scale;
    return {
      x: center.x + distance * Math.cos(angle),
      y: center.y + distance * Math.sin(angle)
    };
  };
  
  // Generate points for current values
  const currentPoints = currentValues.map((value, i) => calculatePoint(value, i));
  const currentPathData = currentPoints.map((point, i) => 
    (i === 0 ? 'M' : 'L') + `${point.x},${point.y}`
  ).join(' ') + 'Z';
  
  // Generate grid lines
  const gridLines = [];
  for (let level = 1; level <= 4; level++) {
    const gridPoints = dimensions.map((_, i) => 
      calculatePoint((level * 25), i)
    );
    const gridPathData = gridPoints.map((point, i) => 
      (i === 0 ? 'M' : 'L') + `${point.x},${point.y}`
    ).join(' ') + 'Z';
    gridLines.push(
      <path
        key={`grid-${level}`}
        d={gridPathData}
        fill="none"
        stroke="rgba(255,255,255,0.1)"
        strokeWidth="1"
      />
    );
  }
  
  // Generate axis lines
  const axisLines = dimensions.map((_, i) => {
    const point = calculatePoint(maxValue, i);
    return (
      <line
        key={`axis-${i}`}
        x1={center.x}
        y1={center.y}
        x2={point.x}
        y2={point.y}
        stroke="rgba(255,255,255,0.2)"
        strokeWidth="1"
      />
    );
  });
  
  // Labels for dimensions
  const labels = dimensions.map((dimension, i) => {
    const point = calculatePoint(maxValue + 15, i);
    return (
      <text
        key={`label-${i}`}
        x={point.x}
        y={point.y}
        textAnchor="middle"
        dominantBaseline="middle"
        fontSize="12"
        fill="#ffffff"
      >
        {dimension}
      </text>
    );
  });
  
  // Values for dimensions
  const values = currentValues.map((value, i) => {
    const point = calculatePoint(value + 10, i);
    return (
      <text
        key={`value-${i}`}
        x={point.x}
        y={point.y}
        textAnchor="middle"
        dominantBaseline="middle"
        fontSize="9"
        fill="#ffffff"
        fontWeight="bold"
      >
        {value}
      </text>
    );
  });
  
  return (
    <svg viewBox="0 0 300 300" width="100%" height="100%">
      {gridLines}
      {axisLines}
      <path
        d={currentPathData}
        fill="rgba(64, 192, 87, 0.3)"
        stroke="#40C057"
        strokeWidth="2"
      />
      {labels}
      {values}
    </svg>
  );
};

// Timeline component
const Timeline = ({ milestones }) => {
  return (
    <div className={styles.timelineContainer}>
      <div className={styles.timelineLine}>
        {milestones.map((milestone, index) => (
          <div 
            key={index} 
            className={styles.timelineMilestone}
            style={{ left: `${milestone.position}%` }}
          >
            <div className={`${styles.timelineDot} ${milestone.active ? styles.activeDot : ''}`}></div>
            <div className={styles.timelineLabel}>{milestone.label}</div>
            <div className={styles.timelineDate}>{milestone.date}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Safe render helper to avoid rendering objects directly
const safeRender = (content) => {
  if (content === undefined || content === null) return '';
  if (typeof content === 'object') return JSON.stringify(content);
  return content;
};

// Agency Vulnerability Assessment Results View
const AgencyResultsView = ({ results }) => {
  console.log('AgencyResultsView received results:', results);
  
  // Check if results is undefined or missing
  if (!results) {
    console.error('AgencyResultsView: results prop is undefined or null');
    return <div className={styles.errorMessage}>No results data available. Please try again.</div>;
  }
  
  // Mock data for demonstration - in production this would come from results
  const mockReadinessScore = 47;
  const mockPercentile = '21%';
  
  // Mock data for radar chart
  const capabilityDimensions = ['Transformation', 'Adaptability', 'Resources', 'Leadership'];
  const capabilityValues = [78, 45, 62, 35];

  // Mock service vulnerability data
  const serviceVulnerability = 47;
  
  // Mock AI maturity levels
  const aiMaturityLevels = [
    { name: 'Unaware', score: 25 },
    { name: 'Exploring', score: 48 },
    { name: 'Piloting', score: 74 },
    { name: 'Scaling', score: 25 },
    { name: 'Transforming', score: 14 }
  ];

  // Mock timeline data
  const timelineMilestones = [
    { label: 'Now', date: '', position: 5, active: true },
    { label: 'Transformation Complete', date: '', position: 45, active: false },
    { label: 'Industry Launch Platform', date: '', position: 80, active: false }
  ];
  
  // Mock valuation and ROI data
  const valuationData = {
    current: { multiple: '2.6x', value: '£2,600,000' },
    potential: { multiple: '3.8x', value: '£3,900,000', growth: '50%' },
    impacts: [
      { label: 'Operational Efficiency', value: '+0.5x' },
      { label: 'Revenue Predictability', value: '+0.7x' },
      { label: 'AI Capability', value: '+0.8x' }
    ]
  };
  
  const efficiencyData = {
    hoursSaved: 780,
    costSavings: '£65,000',
    fte: 0.4,
    revenueOpportunity: '£120,000',
    departments: [
      { name: 'Creative', hours: 250, savings: '£22,500', fte: 0.1 },
      { name: 'Account Management', hours: 320, savings: '£28,800', fte: 0.1 },
      { name: 'Production', hours: 210, savings: '£13,700', fte: 0.1 }
    ]
  };
  
  const roiData = {
    investment: '£50,000',
    breakEven: 'Month 7',
    roi: '150%',
    revenueAtRisk: '47%',
    marginCompression: '-15%',
    valuationImpact: '-30%',
    scenarios: [
      { name: 'Conservative', investment: '£30,000', roi: '110%', breakEven: '9 months' },
      { name: 'Expected', investment: '£50,000', roi: '130%', breakEven: '7 months' },
      { name: 'Aggressive', investment: '£75,000', roi: '240%', breakEven: '5 months' }
    ]
  };
  
  // Mock next steps
  const nextStepsOptions = [
    {
      title: 'QuickMap Strategy Session',
      price: 'Free',
      description: '45-minute consultation to review your results and identify immediate opportunities',
      idealFor: 'Understanding your next steps and quick wins'
    },
    {
      title: 'AI Transformation Roadmap',
      price: '£3,500',
      description: 'Comprehensive roadmap development with implementation plan and ROI analysis',
      idealFor: 'Agencies ready to accelerate their AI adoption'
    },
    {
      title: 'AI Transformation Accelerator',
      price: '£15,000',
      description: 'Complete 90-day transformation program with hands-on implementation support, training, and technology setup.',
      idealFor: 'Agencies committed to rapid AI adoption with dedicated resources'
    }
  ];
  
  return (
    <div className={styles.reportContainer}>
      {/* Header with Assessment Name */}
      <header className={styles.reportHeader}>
        <div className={styles.reportBadge}>Cascade Research • Artificial Intelligence • Assessment Report</div>
        <h1 className={styles.reportTitle}>Agency AI Vulnerability Assessment</h1>
      </header>
      
      {/* Executive Summary */}
      <section className={styles.reportSection}>
        <div className={styles.executiveSummary}>
          <div className={styles.summaryHeadline}>
            <h2>Your Agency is Behind Competitors</h2>
            <p className={styles.subheadline}>You're in the {mockPercentile} percentile of agencies</p>
            
            <div className={styles.navigationButtons}>
              <button className={`${styles.navButton} ${styles.active}`}>Buying Platform</button>
              <button className={styles.navButton}>Current State</button>
              <button className={styles.navButton}>Transformation Plan</button>
              <button className={styles.navButton}>Roadmap Plan</button>
              <button className={styles.navButton}>ROI & Business Case</button>
              <button className={styles.navButton}>Next Actions</button>
            </div>
          </div>
          
          <div className={styles.readinessIndicator}>
            <div className={styles.readinessScore}>
              <svg viewBox="0 0 200 200" width="120" height="120">
                <circle cx="100" cy="100" r="90" stroke="rgba(255,255,255,0.1)" strokeWidth="12" fill="none"/>
                <circle 
                  cx="100" 
                  cy="100" 
                  r="90" 
                  stroke="#ffff66" 
                  strokeWidth="12" 
                  fill="none"
                  strokeDasharray={`${mockReadinessScore * 5.65} 565`}
                  strokeLinecap="round"
                  transform="rotate(-90 100 100)"
                />
              </svg>
              <div className={styles.scoreOverlay}>
                <span className={styles.scoreValue}>{mockReadinessScore}</span>
              </div>
            </div>
          </div>
        </div>
      </section>                        <div className={styles.narrative}>
                            <p>{executive.narrative}</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Readiness Analysis */}
            <div className={styles.reportSection}>
                <h2>Readiness Analysis</h2>
                <div className={styles.dimensionsGrid}>
                    {readiness.dimensions.map((dimension, idx) => (
                        <div key={idx} className={styles.dimensionCard}>
                            <h3 className={styles.dimensionName}>{dimension.name}</h3>
                            <div className={styles.dimensionScore}>{dimension.score}%</div>
                            <p className={styles.dimensionDescription}>{dimension.description}</p>
                        </div>
                    ))}
                </div>
                
                <div className={styles.narrative}>
                    <h3>Overall Assessment</h3>
                    <p>{readiness.narrative || "Your agency's overall readiness indicates both challenges and opportunities for AI transformation. The scores above reflect your current positioning in key dimensions that determine success in an AI-driven market."}</p>
                </div>
                
                <div className={styles.serviceReadiness}>
                    <h3>Service Vulnerability Analysis</h3>
                    <p className={styles.sectionIntro}>Service lines are assessed based on their vulnerability to AI disruption and your current readiness to adapt.</p>
                    <div className={styles.serviceGrid}>
                        {readiness.serviceReadiness.map((service, idx) => (
                            <div key={idx} className={`${styles.serviceCard} ${service.score > 70 ? styles.highRisk : service.score > 40 ? styles.mediumRisk : styles.lowRisk}`}>
                                <div className={styles.serviceName}>{service.name}</div>
                                <div className={styles.serviceScore}>{service.score}%</div>
                                <div className={styles.serviceInterpretation}>{service.interpretation}</div>
                                {service.timeToDisruption && (
                                    <div className={styles.disruptionTime}>Time to disruption: {service.timeToDisruption}</div>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
                
                <div className={styles.serviceTransformation}>
                    <h3>Service Transformation Paths</h3>
                    <div className={styles.transformationGrid}>
                        {readiness.serviceReadiness
                            .filter(service => service.score > 50) // Show transformation paths for vulnerable services
                            .map((service, idx) => {
                                const serviceKey = service.name.toLowerCase().replace(/\s+/g, '_');
                                const transformationPath = readiness.transformationPaths && readiness.transformationPaths[serviceKey];
                                
                                return transformationPath ? (
                                    <div key={idx} className={styles.transformationCard}>
                                        <h4 className={styles.serviceName}>{service.name}</h4>
                                        <p className={styles.transformationPath}>{transformationPath}</p>
                                    </div>
                                ) : null;
                            }).filter(Boolean)}
                    </div>
                </div>
            </div>

            {/* Transformation Opportunities */}
            <div className={styles.reportSection}>
                <h2>Transformation Opportunities</h2>
                
                {/* Immediate Opportunities */}
                <div className={styles.opportunitiesSection}>
                    <h3>{opportunities.immediate.title}</h3>
                    <p className={styles.opportunitiesSubtitle}>{opportunities.immediate.subtitle}</p>
                    
                    <div className={styles.recommendationsGrid}>
                        {opportunities.immediate.items.map((item, idx) => (
                            <div key={idx} className={styles.recommendationCard}>
                                <h4 className={styles.recommendationTitle}>{item.title}</h4>
                                <p className={styles.recommendationDescription}>{item.description}</p>
                                <div className={styles.recommendationDetails}>
                                    <span><strong>Effort:</strong> {item.effort}</span>
                                    <span><strong>Impact:</strong> {item.impact}</span>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                
                {/* Service-Specific Opportunities */}
                <div className={styles.opportunitiesSection}>
                    <h3>Service-Specific Opportunities</h3>
                    <p className={styles.opportunitiesSubtitle}>Targeted actions for your most vulnerable service lines</p>
                    
                    <div className={styles.recommendationsGrid}>
                        {opportunities.serviceSpecific && opportunities.serviceSpecific.map((item, idx) => (
                            <div key={idx} className={styles.recommendationCard}>
                                <div className={styles.serviceTag}>{item.service}</div>
                                <h4 className={styles.recommendationTitle}>{item.title}</h4>
                                <p className={styles.recommendationDescription}>{item.description || item.action}</p>
                                <div className={styles.recommendationDetails}>
                                    {item.effort && <span><strong>Effort:</strong> {item.effort}</span>}
                                    {item.impact && <span><strong>Impact:</strong> {item.impact}</span>}
                                    {item.time && <span><strong>Time Saved:</strong> {item.time}</span>}
                                    {item.difficulty && <span><strong>Difficulty:</strong> {item.difficulty}</span>}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                
                {/* Strategic Opportunities */}
                <div className={styles.opportunitiesSection}>
                    <h3>Strategic Opportunities</h3>
                    <p className={styles.opportunitiesSubtitle}>Longer-term initiatives with transformative impact</p>
                    
                    <div className={styles.recommendationsGrid}>
                        {opportunities.strategic && opportunities.strategic.map((item, idx) => (
                            <div key={idx} className={styles.recommendationCard}>
                                <h4 className={styles.recommendationTitle}>{item.title}</h4>
                                <p className={styles.recommendationDescription}>{item.description}</p>
                                <div className={styles.recommendationDetails}>
                                    {item.timeline && <span><strong>Timeline:</strong> {item.timeline}</span>}
                                    {item.impact && <span><strong>Impact:</strong> {item.impact}</span>}
                                    {item.complexity && <span><strong>Complexity:</strong> {item.complexity}</span>}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                
                {/* Financial Impact Opportunities */}
                {opportunities.valuationImpact && (
                    <div className={styles.opportunitiesSection}>
                        <h3>Valuation-Enhancing Opportunities</h3>
                        <p className={styles.opportunitiesSubtitle}>Focused initiatives to increase your agency's value</p>
                        
                        <div className={styles.recommendationsGrid}>
                            {opportunities.valuationImpact.map((item, idx) => (
                                <div key={idx} className={styles.recommendationCard}>
                                    <h4 className={styles.recommendationTitle}>{item.action}</h4>
                                    <p className={styles.recommendationDescription}>{item.howTo}</p>
                                    <div className={styles.valuationImpact}>{item.impact}</div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>

            {/* Roadmap */}
            <div className={styles.reportSection}>
                <h2>Your Transformation Roadmap</h2>
                <div className={styles.roadmapOverview}>
                    <h3>{roadmap.overview.title}</h3>
                    <p>{roadmap.overview.approach}</p>
                </div>
                
                <div className={styles.roadmapPhases}>
                    {roadmap.phases.map((phase, idx) => (
                        <div key={idx} className={styles.roadmapPhase}>
                            <h4 className={styles.phaseTitle}>{phase.title}</h4>
                            <div className={styles.phaseDuration}>{phase.duration}</div>
                            <ul className={styles.phaseActions}>
                                {phase.actions.map((action, i) => (
                                    <li key={i}>{action}</li>
                                ))}
                            </ul>
                        </div>
                    ))}
                </div>
            </div>

            {/* Valuation Impact */}
            {impact && (
                <div className={styles.reportSection}>
                    <h2>{impact.title}</h2>
                    <p className={styles.impactSubtitle}>{impact.subtitle}</p>
                    
                    <div className={styles.valuationGrid}>
                        <div className={`${styles.valuationCard} ${styles.current}`}>
                            <div className={styles.valuationLabel}>Current Valuation</div>
                            <div className={styles.valuationValue}>{impact.current.multiple}</div>
                            <div className={styles.valuationCategory}>{impact.current.category}</div>
                        </div>
                        <div className={`${styles.valuationCard} ${styles.potential}`}>
                            <div className={styles.valuationLabel}>Potential Valuation</div>
                            <div className={styles.valuationValue}>{impact.potential.multiple}</div>
                            <div className={styles.valuationIncrease}>{impact.potential.increase}</div>
                            <div className={styles.valuationTimeframe}>Achievable in {impact.potential.achievableIn}</div>
                        </div>
                    </div>
                    
                    <div className={styles.valuationDrivers}>
                        <h3>Valuation Drivers</h3>
                        <div className={styles.driversGrid}>
                            {impact.drivers.map((driver, idx) => (
                                <div key={idx} className={styles.driverCard}>
                                    <h4 className={styles.driverTitle}>{driver.driver}</h4>
                                    <div className={styles.driverImpact}>
                                        <span>Current: <strong>{driver.currentImpact}</strong></span>
                                        <span>Potential: <strong>{driver.potentialImpact}</strong></span>
                                    </div>
                                    <div className={styles.driverAction}>{driver.action}</div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}

            {/* Next Steps */}
            <div className={styles.reportSection}>
                <h2>Your Next Steps</h2>
                
                <div className={styles.nextStepsOptions}>
                    {nextSteps.options.map((option, idx) => (
                        <div key={idx} className={styles.nextStepCard}>
                            <h3 className={styles.nextStepTitle}>{option.title}</h3>
                            <div className={styles.nextStepPrice}>{option.price}</div>
                            <p className={styles.nextStepDescription}>{option.description}</p>
                            <p className={styles.nextStepIdealFor}><strong>Ideal for:</strong> {option.idealFor}</p>
                            <button className={styles.primaryButton}>Select Option</button>
                        </div>
                    ))}
                </div>
                
                {nextSteps.testimonial && (
                    <div className={styles.testimonial}>
                        <p className={styles.testimonialQuote}>"{nextSteps.testimonial.quote}"</p>
                        <p className={styles.testimonialAuthor}>
                            — {nextSteps.testimonial.author}, {nextSteps.testimonial.role}
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AgencyResultsView;