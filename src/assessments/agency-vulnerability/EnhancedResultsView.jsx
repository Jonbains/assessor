import React, { useState } from 'react';
import styles from '../../core/styles/components.module.css';

// Import our visualization components
import {
  CompetitivePositionMatrix,
  ServiceVulnerabilityRadar,
  ValuationWaterfall,
  EfficiencyCalculator,
  PriorityMatrix,
  RiskEvolutionTimeline,
  CapabilitySpiderChart,
  RecommendationCard,
  ROIProjection,
  TransformationVelocity
} from '../../core/components/visualizations';

// Enhanced Agency Vulnerability Assessment Results View
const EnhancedAgencyResultsView = ({ results }) => {
  const [activeSection, setActiveSection] = useState('burning-platform');
  
  // Safe render function to prevent rendering objects directly in JSX
  const safeRender = (content) => {
    if (content === null || content === undefined) return '';
    if (typeof content === 'object') return JSON.stringify(content);
    return content;
  };
  
  // Check if results is undefined or missing
  if (!results) {
    console.error('EnhancedAgencyResultsView: results prop is undefined or null');
    return <div className="error-message">No results data available. Please try again.</div>;
  }
  
  console.log('EnhancedAgencyResultsView received results:', results);
  
  const { executive, readiness, opportunities, roadmap, impact, nextSteps } = results;
  
  // Early validation to catch issues
  if (!executive || !readiness || !opportunities || !roadmap || !impact || !nextSteps) {
    console.error('EnhancedAgencyResultsView: Missing required sections in results');
    return (
      <div className="error-message">
        <h2>Incomplete Results Data</h2>
        <p>Some required sections of the report are missing.</p>
      </div>
    );
  }
  
  // Extract data for visualizations
  const overallScore = executive.keyMetrics.readinessScore.value;
  const marketPercentile = parseInt(executive.subheadline.match(/(\d+)th percentile/)[1] || 50);
  
  // Format dimensions for spider chart
  const dimensions = readiness.dimensions.map(dim => ({
    name: dim.name,
    value: dim.score
  }));
  
  // Create service data for radar chart
  const services = opportunities.services?.map(service => ({
    name: service.name,
    vulnerability: service.vulnerability || 50,
    readiness: 100 - (service.vulnerability || 50)
  })) || [];
  
  // Create items for priority matrix
  const priorityItems = opportunities.quickWins?.map(win => ({
    title: win.action,
    impact: win.impact === 'high' ? 80 : win.impact === 'medium' ? 50 : 30,
    effort: win.effort === 'high' ? 80 : win.effort === 'medium' ? 50 : 30,
    category: win.area || 'strategy'
  })) || [];
  
  // Create timeline risks
  const risks = [
    { name: 'AI Becomes Standard', month: 3, type: 'risk' },
    { name: 'Client Expectations Shift', month: 6, type: 'risk' },
    { name: 'Early Adopter Window Closes', month: 12, type: 'risk' },
    { name: 'Transformation Complete', month: 12, type: 'opportunity' },
    { name: 'Market Leader Position', month: 18, type: 'opportunity' }
  ];
  
  // Create efficiency data
  const efficiencyData = {
    hoursSaved: 780, // Example values
    costSavings: 65000,
    headcountEquivalent: 0.4,
    revenueOpportunity: 120000,
    breakdown: [
      { department: 'Creative', hours: 250, savings: 22500, fte: 0.12 },
      { department: 'Account Management', hours: 320, savings: 28800, fte: 0.15 },
      { department: 'Production', hours: 210, savings: 13700, fte: 0.13 }
    ]
  };
  
  // Create valuation waterfall data
  const currentMultiple = parseFloat(impact.current.multiple);
  const potentialMultiple = parseFloat(impact.potential.multiple);
  
  const valuationSteps = [
    { label: 'Operational Efficiency', value: 0.5 },
    { label: 'Revenue Predictability', value: 0.7 },
    { label: 'AI Capability', value: 0.8 },
    { label: 'Reduced Risk', value: 0.5 }
  ];
  
  // Create ROI projection data
  const roiData = {
    investment: 50000,
    breakEvenMonth: 7,
    returns: Array.from({ length: 12 }, (_, i) => ({
      month: i + 1,
      value: i < 7 ? (i + 1) * 8000 : 50000 + (i - 6) * 15000
    }))
  };
  
  // Navigation menu for report sections
  const renderNavigation = () => (
    <div className={styles.reportNavigation}>
      <button 
        className={`${styles.navButton} ${activeSection === 'burning-platform' ? styles.active : ''}`}
        onClick={() => setActiveSection('burning-platform')}
      >
        Burning Platform
      </button>
      <button 
        className={`${styles.navButton} ${activeSection === 'current-state' ? styles.active : ''}`}
        onClick={() => setActiveSection('current-state')}
      >
        Current State
      </button>
      <button 
        className={`${styles.navButton} ${activeSection === 'transformation-prize' ? styles.active : ''}`}
        onClick={() => setActiveSection('transformation-prize')}
      >
        Transformation Prize
      </button>
      <button 
        className={`${styles.navButton} ${activeSection === 'battle-plan' ? styles.active : ''}`}
        onClick={() => setActiveSection('battle-plan')}
      >
        Battle Plan
      </button>
      <button 
        className={`${styles.navButton} ${activeSection === 'roi' ? styles.active : ''}`}
        onClick={() => setActiveSection('roi')}
      >
        ROI & Business Case
      </button>
      <button 
        className={`${styles.navButton} ${activeSection === 'next-actions' ? styles.active : ''}`}
        onClick={() => setActiveSection('next-actions')}
      >
        Next Actions
      </button>
    </div>
  );
  
  // Section 1: Burning Platform
  const renderBurningPlatform = () => (
    <div className={styles.reportSection}>
      <h2>The Burning Platform</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.competitivePositionContainer}>
          <CompetitivePositionMatrix
            score={overallScore}
            percentile={marketPercentile}
            marketPosition={executive.headline.replace("Your Agency is ", "")}
            timeAdvantage={executive.keyMetrics.transformationUrgency.interpretation}
            revenueAtRisk="47%"
            industry="agencies"
          />
        </div>
        
        <div className={styles.velocityContainer}>
          <TransformationVelocity
            yourSpeed={Math.min(overallScore, 100)}
            marketSpeed={80}
            gapChange={overallScore < 50 ? -3 : overallScore < 70 ? 0 : 3}
            timeToIrrelevance={overallScore < 50 ? 12 : overallScore < 70 ? 18 : 24}
          />
        </div>
        
        <div className={styles.impactMessage}>
          <h3>Your biggest competitor is already:</h3>
          <ul className={styles.impactList}>
            <li>Creating content 5x faster than you can</li>
            <li>Automating 35% of client deliverables</li>
            <li>Operating at 40% higher margins</li>
            <li>Saving 120+ hours per employee monthly</li>
          </ul>
          <p className={styles.urgencyMessage}>
            The window to become an early adopter is closing rapidly. 
            Within 12 months, AI adoption will be table stakes, not a competitive advantage.
          </p>
        </div>
      </div>
    </div>
  );
  
  // Section 2: Current State Diagnosis
  const renderCurrentState = () => (
    <div className={styles.reportSection}>
      <h2>Current State Diagnosis</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.capabilityAnalysis}>
          <CapabilitySpiderChart
            dimensions={dimensions}
            showBenchmark={true}
            benchmarkData={dimensions.reduce((acc, dim) => {
              acc[dim.name] = dim.value + 15; // Benchmark is 15 points higher
              return acc;
            }, {})}
          />
        </div>
        
        <div className={styles.serviceVulnerability}>
          <ServiceVulnerabilityRadar services={services} showReadiness={true} />
        </div>
        
        <div className={styles.maturityAnalysis}>
          <h3>AI Adoption Maturity</h3>
          <div className={styles.maturityCurve}>
            <div className={styles.maturityStages}>
              <div className={`${styles.maturityStage} ${overallScore < 25 ? styles.active : ''}`}>
                <span className={styles.stageName}>Unaware</span>
                <span className={styles.stageScore}>&lt;25</span>
              </div>
              <div className={`${styles.maturityStage} ${overallScore >= 25 && overallScore < 50 ? styles.active : ''}`}>
                <span className={styles.stageName}>Exploring</span>
                <span className={styles.stageScore}>25-49</span>
              </div>
              <div className={`${styles.maturityStage} ${overallScore >= 50 && overallScore < 75 ? styles.active : ''}`}>
                <span className={styles.stageName}>Piloting</span>
                <span className={styles.stageScore}>50-74</span>
              </div>
              <div className={`${styles.maturityStage} ${overallScore >= 75 && overallScore < 90 ? styles.active : ''}`}>
                <span className={styles.stageName}>Scaling</span>
                <span className={styles.stageScore}>75-89</span>
              </div>
              <div className={`${styles.maturityStage} ${overallScore >= 90 ? styles.active : ''}`}>
                <span className={styles.stageName}>Leading</span>
                <span className={styles.stageScore}>90+</span>
              </div>
            </div>
            <div className={styles.maturityIndicator} style={{ left: `${overallScore}%` }}>
              <span className={styles.indicatorLabel}>You are here</span>
            </div>
          </div>
        </div>
        
        <div className={styles.riskEvolution}>
          <RiskEvolutionTimeline risks={risks} />
        </div>
      </div>
    </div>
  );
  
  // Section 3: Transformation Prize
  const renderTransformationPrize = () => (
    <div className={styles.reportSection}>
      <h2>The Transformation Prize</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.valuationWaterfall}>
          <ValuationWaterfall
            currentMultiple={currentMultiple}
            steps={valuationSteps}
            potentialMultiple={potentialMultiple}
            currency="£"
          />
        </div>
        
        <div className={styles.efficiencyCalculator}>
          <EfficiencyCalculator
            hoursSaved={efficiencyData.hoursSaved}
            costSavings={efficiencyData.costSavings}
            headcountEquivalent={efficiencyData.headcountEquivalent}
            revenueOpportunity={efficiencyData.revenueOpportunity}
            breakdown={efficiencyData.breakdown}
          />
        </div>
        
        <div className={styles.successStories}>
          <h3>Peer Success Stories</h3>
          <div className={styles.storiesGrid}>
            <div className={styles.successStory}>
              <h4>Creative Agency (20 staff)</h4>
              <p>Automated 60% of design production with AI, reducing project delivery time by 40% while increasing margins by 23%.</p>
              <div className={styles.storyMetric}>+35% Revenue Growth</div>
            </div>
            <div className={styles.successStory}>
              <h4>Digital Marketing Firm (35 staff)</h4>
              <p>Implemented AI content workflow that increased output by 5x while maintaining quality and freeing strategists for higher-value work.</p>
              <div className={styles.storyMetric}>+50% Client Retention</div>
            </div>
            <div className={styles.successStory}>
              <h4>Branding Consultancy (15 staff)</h4>
              <p>Developed AI-powered research and insight generation tools that transformed their positioning from creative shop to strategic partner.</p>
              <div className={styles.storyMetric}>+85% Average Project Value</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
  
  // Section 4: Battle Plan
  const renderBattlePlan = () => (
    <div className={styles.reportSection}>
      <h2>Your Battle Plan</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.priorityMatrix}>
          <PriorityMatrix 
            items={priorityItems} 
            onItemClick={(item) => console.log('Selected item:', item)}
          />
        </div>
        
        <div className={styles.roadmapTimeline}>
          <h3>{roadmap.overview.title}</h3>
          <p>{roadmap.overview.approach}</p>
          
          <div className={styles.phasesTimeline}>
            {roadmap.phases.map((phase, i) => (
              <div key={i} className={styles.phaseCard}>
                <div className={styles.phaseHeader}>
                  <h4>{phase.title}</h4>
                  <div className={styles.phaseDuration}>{phase.duration}</div>
                </div>
                
                <ul className={styles.phaseActions}>
                  {phase.actions.map((action, j) => (
                    <li key={j}>{safeRender(action)}</li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
        
        <div className={styles.quickWins}>
          <h3>Quick Wins Checklist</h3>
          <div className={styles.winsGrid}>
            {opportunities.quickWins?.slice(0, 3).map((win, i) => (
              <RecommendationCard
                key={i}
                title={win.action}
                description={win.description || 'Implement this quick win to see immediate impact.'}
                impact={win.impact}
                effort={win.effort}
                timeframe={win.timeline || '1-4 weeks'}
                category={win.area || 'Strategy'}
                priority={win.impact === 'high' ? 'high' : win.impact === 'medium' ? 'medium' : 'low'}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
  
  // Section 5: ROI & Business Case
  const renderROI = () => (
    <div className={styles.reportSection}>
      <h2>ROI & Business Case</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.roiProjection}>
          <ROIProjection
            investment={roiData.investment}
            returns={roiData.returns}
            breakEvenMonth={roiData.breakEvenMonth}
            currency="£"
          />
        </div>
        
        <div className={styles.costOfInaction}>
          <h3>Cost of Inaction</h3>
          <div className={styles.inactionGrid}>
            <div className={styles.inactionMetric}>
              <h4>Revenue at Risk</h4>
              <div className={styles.metricValue}>47%</div>
              <p>Nearly half your revenue comes from services highly vulnerable to AI disruption</p>
            </div>
            <div className={styles.inactionMetric}>
              <h4>Margin Compression</h4>
              <div className={styles.metricValue}>-15%</div>
              <p>Expected margin reduction as competitors leverage AI to deliver faster and cheaper</p>
            </div>
            <div className={styles.inactionMetric}>
              <h4>Valuation Impact</h4>
              <div className={styles.metricValue}>-30%</div>
              <p>Potential reduction in agency valuation multiple without AI transformation</p>
            </div>
          </div>
        </div>
        
        <div className={styles.sensitivityAnalysis}>
          <h3>Sensitivity Analysis</h3>
          <table className={styles.sensitivityTable}>
            <thead>
              <tr>
                <th>Scenario</th>
                <th>Investment</th>
                <th>12-Month ROI</th>
                <th>Break-Even</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Conservative</td>
                <td>£30,000</td>
                <td>110%</td>
                <td>9 months</td>
              </tr>
              <tr className={styles.highlightedRow}>
                <td>Expected</td>
                <td>£50,000</td>
                <td>180%</td>
                <td>7 months</td>
              </tr>
              <tr>
                <td>Aggressive</td>
                <td>£75,000</td>
                <td>240%</td>
                <td>5 months</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
  
  // Section 6: Next Actions
  const renderNextActions = () => (
    <div className={styles.reportSection}>
      <h2>Your Next Actions</h2>
      
      <div className={styles.sectionContent}>
        <div className={styles.nextStepsOptions}>
          {nextSteps.options.map((option, idx) => (
            <div key={idx} className={styles.nextStepCard}>
              <h3 className={styles.nextStepTitle}>{safeRender(option.title)}</h3>
              <div className={styles.nextStepPrice}>{safeRender(option.price)}</div>
              <p className={styles.nextStepDescription}>{safeRender(option.description)}</p>
              <p className={styles.nextStepIdealFor}><strong>Ideal for:</strong> {safeRender(option.idealFor)}</p>
              <button className={styles.primaryButton}>Select Option</button>
            </div>
          ))}
          
          <div className={styles.nextStepCard}>
            <h3 className={styles.nextStepTitle}>AI Transformation Accelerator</h3>
            <div className={styles.nextStepPrice}>£15,000</div>
            <p className={styles.nextStepDescription}>Complete 90-day transformation program with hands-on implementation support, training, and technology setup.</p>
            <p className={styles.nextStepIdealFor}><strong>Ideal for:</strong> Agencies committed to rapid AI adoption with dedicated resources</p>
            <button className={styles.primaryButton}>Select Option</button>
          </div>
        </div>
        
        {nextSteps.testimonial && (
          <div className={styles.testimonial}>
            <p className={styles.testimonialQuote}>"{safeRender(nextSteps.testimonial.quote)}"</p>
            <p className={styles.testimonialAuthor}>
              — {safeRender(nextSteps.testimonial.author)}, {safeRender(nextSteps.testimonial.role)}
            </p>
          </div>
        )}
        
        <div className={styles.urgencyCallout}>
          <h3>Your Agency's AI Transformation Window:</h3>
          <div className={styles.countdownTimer}>
            <div className={styles.countdownValue}>12</div>
            <div className={styles.countdownLabel}>months until AI adoption becomes standard in your industry</div>
          </div>
          <p className={styles.calloutMessage}>
            The early adopter advantage is still available, but rapidly closing. 
            Agencies who transform now will capture market share from those who delay.
          </p>
          <button className={styles.ctaButton}>Schedule Your Strategy Session Now</button>
        </div>
      </div>
    </div>
  );
  
  // Main render method
  return (
    <div className={styles.enhancedResultsContainer}>
      <div className={styles.reportHeader}>
        <h1>Agency AI Vulnerability Assessment</h1>
        <div className={styles.reportScore}>
          <div className={styles.scoreCircleEnhanced}>
            <svg width="120" height="120" viewBox="0 0 120 120">
              <circle cx="60" cy="60" r="54" stroke="rgba(255,255,255,0.1)" strokeWidth="8" fill="none"/>
              <circle cx="60" cy="60" r="54" stroke="#ffff66" strokeWidth="8" fill="none"
                strokeDasharray={`${overallScore * 3.39} 339`}
                strokeLinecap="round"
              />
            </svg>
            <div className={styles.scoreValueEnhanced}>{overallScore}</div>
          </div>
          <div className={styles.scoreSummary}>
            <h2>{executive.headline}</h2>
            <p>{executive.subheadline}</p>
          </div>
        </div>
        
        {renderNavigation()}
      </div>
      
      <div className={styles.reportBody}>
        {activeSection === 'burning-platform' && renderBurningPlatform()}
        {activeSection === 'current-state' && renderCurrentState()}
        {activeSection === 'transformation-prize' && renderTransformationPrize()}
        {activeSection === 'battle-plan' && renderBattlePlan()}
        {activeSection === 'roi' && renderROI()}
        {activeSection === 'next-actions' && renderNextActions()}
      </div>
    </div>
  );
};

export default EnhancedAgencyResultsView;
