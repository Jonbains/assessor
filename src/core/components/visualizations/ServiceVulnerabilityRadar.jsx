import React, { useState } from 'react';
import styles from './Visualizations.module.css';

// Define getPoint helper function outside of component scope
const getPoint = (value, index, services) => {
  const angleStep = (Math.PI * 2) / services.length;
  const center = { x: 150, y: 150 };
  const radius = 120;
  const angle = index * angleStep - Math.PI / 2;
  const r = (value / 100) * radius;
  return {
    x: center.x + r * Math.cos(angle),
    y: center.y + r * Math.sin(angle)
  };
};

export const ServiceVulnerabilityRadar = ({ services, showReadiness = true }) => {
  const [hoveredService, setHoveredService] = useState(null);
  
  // Calculate points for radar chart
  const center = { x: 150, y: 150 };
  const radius = 120;
  const angleStep = (Math.PI * 2) / services.length;
  
  // Component-scoped wrapper for getPoint
  const getPointInner = (value, index) => getPoint(value, index, services);
  
  // Create polygon points
  const servicePoints = services.map((service, i) => 
    getPointInner(service.vulnerability, i)
  ).map(p => `${p.x},${p.y}`).join(' ');
  
  // If showing readiness, create a second polygon
  let readinessPoints = '';
  if (showReadiness) {
    readinessPoints = services.map((service, i) => 
      getPointInner(service.readiness, i)
    ).map(p => `${p.x},${p.y}`).join(' ');
  }
  
  return (
    <div className={styles.radarContainer}>
      <h3>Service Vulnerability Analysis</h3>
      
      <svg viewBox="0 0 300 300" className={styles.radarSvg}>
        {/* Background circles */}
        <circle cx={center.x} cy={center.y} r={radius * 0.25} className={styles.radarAxis} />
        <circle cx={center.x} cy={center.y} r={radius * 0.5} className={styles.radarAxis} />
        <circle cx={center.x} cy={center.y} r={radius * 0.75} className={styles.radarAxis} />
        <circle cx={center.x} cy={center.y} r={radius} className={styles.radarAxis} />
        
        {/* Axes for each service */}
        {services.map((service, i) => {
          const angle = i * angleStep - Math.PI / 2;
          const endPoint = {
            x: center.x + radius * Math.cos(angle),
            y: center.y + radius * Math.sin(angle)
          };
          
          return (
            <g key={i}>
              <line 
                x1={center.x} 
                y1={center.y} 
                x2={endPoint.x} 
                y2={endPoint.y} 
                className={styles.radarAxis} 
              />
              <text 
                x={center.x + (radius + 15) * Math.cos(angle)}
                y={center.y + (radius + 15) * Math.sin(angle)}
                className={styles.radarLabel}
                textAnchor="middle"
                dominantBaseline="middle"
              >
                {service.name}
              </text>
            </g>
          );
        })}
        
        {/* Vulnerability polygon */}
        <polygon 
          points={servicePoints} 
          className={styles.radarPolygon}
          onMouseOver={() => setHoveredService('vulnerability')}
          onMouseOut={() => setHoveredService(null)}
        />
        
        {/* Readiness polygon */}
        {showReadiness && (
          <polygon 
            points={readinessPoints} 
            className={styles.radarBenchmark}
            onMouseOver={() => setHoveredService('readiness')}
            onMouseOut={() => setHoveredService(null)}
          />
        )}
        
        {/* Points for each service */}
        {services.map((service, i) => {
          const point = getPointInner(service.vulnerability, i);
          
          return (
            <circle
              key={i}
              cx={point.x}
              cy={point.y}
              r="3"
              fill="#66ff66"
              onMouseOver={() => setHoveredService(service.name)}
              onMouseOut={() => setHoveredService(null)}
            />
          );
        })}
      </svg>
      
      {hoveredService && (
        <div className={styles.serviceTooltip}>
          {hoveredService === 'vulnerability' ? 'Vulnerability Score' : 
           hoveredService === 'readiness' ? 'AI Readiness' : 
           services.find(s => s.name === hoveredService)?.name}
        </div>
      )}
      
      <div className={styles.radarLegend}>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{ backgroundColor: '#66ff66' }}></span>
          <span>Vulnerability</span>
        </div>
        {showReadiness && (
          <div className={styles.legendItem}>
            <span className={styles.legendColor} style={{ backgroundColor: '#6666ff' }}></span>
            <span>AI Readiness</span>
          </div>
        )}
      </div>
    </div>
  );
};

// Helper method for other components - export the standalone function
ServiceVulnerabilityRadar.getPoint = getPoint;
