{"ast":null,"code":"export class FlowController{constructor(config){this.config=config;this.stages=['sector','qualifying','services','questions','email','results'];this.currentStageIndex=0;}start(){this.currentStageIndex=0;}getCurrentStage(){return this.stages[this.currentStageIndex];}advance(){if(this.shouldSkipStage()){this.currentStageIndex++;return this.advance();}if(this.currentStageIndex<this.stages.length-1){this.currentStageIndex++;}return this.getCurrentStage();}goBack(){if(this.currentStageIndex>0){this.currentStageIndex--;// Skip backwards through skipped stages\nif(this.shouldSkipStage()){return this.goBack();}}return this.getCurrentStage();}setStage(stageName){const index=this.stages.indexOf(stageName);if(index!==-1){this.currentStageIndex=index;}}shouldSkipStage(){const currentStage=this.getCurrentStage();// Add skip logic based on assessment type and previous answers\n// For example, skip sector selection if already specified in URL\nif(currentStage==='sector'&&this.config.skipSector){return true;}return false;}getRelevantQuestions(dataManager){const selectedServices=dataManager.getContext('selectedServices')||[];const qualifyingAnswers=dataManager.getContext('qualifying')||{};// Filter questions based on selections\nconst allQuestions=this.config.questions||[];return allQuestions.filter(question=>{// Check service relevance\nif(question.services&&question.services.length>0){const hasRelevantService=question.services.some(service=>selectedServices.includes(service));if(!hasRelevantService)return false;}// Check qualifying conditions\nif(question.conditions){const meetsConditions=Object.entries(question.conditions).every(_ref=>{let[key,allowedValues]=_ref;const actualValue=qualifyingAnswers[key];return allowedValues.includes(actualValue);});if(!meetsConditions)return false;}return true;});}getProgress(){const totalStages=this.stages.length;const completedStages=this.currentStageIndex;return{current:completedStages+1,total:totalStages,percentage:Math.round(completedStages/(totalStages-1)*100),stageName:this.getCurrentStage()};}isComplete(){return this.currentStageIndex===this.stages.length-1;}reset(){this.currentStageIndex=0;}}export default FlowController;","map":{"version":3,"names":["FlowController","constructor","config","stages","currentStageIndex","start","getCurrentStage","advance","shouldSkipStage","length","goBack","setStage","stageName","index","indexOf","currentStage","skipSector","getRelevantQuestions","dataManager","selectedServices","getContext","qualifyingAnswers","allQuestions","questions","filter","question","services","hasRelevantService","some","service","includes","conditions","meetsConditions","Object","entries","every","_ref","key","allowedValues","actualValue","getProgress","totalStages","completedStages","current","total","percentage","Math","round","isComplete","reset"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/FlowController.js"],"sourcesContent":["\nexport class FlowController {\n    constructor(config) {\n        this.config = config;\n        this.stages = [\n            'sector',\n            'qualifying',\n            'services',\n            'questions',\n            'email',\n            'results'\n        ];\n        this.currentStageIndex = 0;\n    }\n\n    start() {\n        this.currentStageIndex = 0;\n    }\n\n    getCurrentStage() {\n        return this.stages[this.currentStageIndex];\n    }\n\n    advance() {\n        if (this.shouldSkipStage()) {\n            this.currentStageIndex++;\n            return this.advance();\n        }\n\n        if (this.currentStageIndex < this.stages.length - 1) {\n            this.currentStageIndex++;\n        }\n\n        return this.getCurrentStage();\n    }\n\n    goBack() {\n        if (this.currentStageIndex > 0) {\n            this.currentStageIndex--;\n            \n            // Skip backwards through skipped stages\n            if (this.shouldSkipStage()) {\n                return this.goBack();\n            }\n        }\n        return this.getCurrentStage();\n    }\n\n    setStage(stageName) {\n        const index = this.stages.indexOf(stageName);\n        if (index !== -1) {\n            this.currentStageIndex = index;\n        }\n    }\n\n    shouldSkipStage() {\n        const currentStage = this.getCurrentStage();\n        \n        // Add skip logic based on assessment type and previous answers\n        // For example, skip sector selection if already specified in URL\n        if (currentStage === 'sector' && this.config.skipSector) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    getRelevantQuestions(dataManager) {\n        const selectedServices = dataManager.getContext('selectedServices') || [];\n        const qualifyingAnswers = dataManager.getContext('qualifying') || {};\n        \n        // Filter questions based on selections\n        const allQuestions = this.config.questions || [];\n        \n        return allQuestions.filter(question => {\n            // Check service relevance\n            if (question.services && question.services.length > 0) {\n                const hasRelevantService = question.services.some(service => \n                    selectedServices.includes(service)\n                );\n                if (!hasRelevantService) return false;\n            }\n            \n            // Check qualifying conditions\n            if (question.conditions) {\n                const meetsConditions = Object.entries(question.conditions).every(\n                    ([key, allowedValues]) => {\n                        const actualValue = qualifyingAnswers[key];\n                        return allowedValues.includes(actualValue);\n                    }\n                );\n                if (!meetsConditions) return false;\n            }\n            \n            return true;\n        });\n    }\n\n    getProgress() {\n        const totalStages = this.stages.length;\n        const completedStages = this.currentStageIndex;\n        return {\n            current: completedStages + 1,\n            total: totalStages,\n            percentage: Math.round((completedStages / (totalStages - 1)) * 100),\n            stageName: this.getCurrentStage()\n        };\n    }\n\n    isComplete() {\n        return this.currentStageIndex === this.stages.length - 1;\n    }\n\n    reset() {\n        this.currentStageIndex = 0;\n    }\n}\n\nexport default FlowController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}