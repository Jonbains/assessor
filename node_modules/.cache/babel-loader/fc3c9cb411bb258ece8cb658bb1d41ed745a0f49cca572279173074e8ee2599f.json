{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceSelector = ({\n  assessmentType,\n  onSelect,\n  onBack\n}) => {\n  _s();\n  console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n  const [services, setServices] = useState([]);\n  const [allocations, setAllocations] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n  // Load services data based on assessment type\n  const loadServices = () => {\n    try {\n      setLoading(true);\n      console.log(`Loading services for ${assessmentType}`);\n\n      // Use the statically imported JSON data based on assessment type\n      let servicesData;\n      if (assessmentType === 'agency-vulnerability') {\n        console.log('Using agency services data');\n        servicesData = agencyServices;\n      } else if (assessmentType === 'inhouse-marketing') {\n        console.log('Using inhouse activities data');\n        servicesData = inhouseActivities;\n      } else {\n        throw new Error(`Unknown assessment type: ${assessmentType}`);\n      }\n\n      // Extract the correct data array\n      const serviceArray = assessmentType === 'agency-vulnerability' ? servicesData.services || [] : servicesData.activities || [];\n      console.log('Services data loaded:', serviceArray);\n      if (serviceArray.length > 0) {\n        setServices(serviceArray);\n\n        // Initialize allocations with 0 for each service\n        const initialAllocations = {};\n        serviceArray.forEach(service => {\n          initialAllocations[service.id] = 0;\n        });\n        setAllocations(initialAllocations);\n        setError(null);\n      } else {\n        console.error('Service data is empty:', servicesData);\n        setError('No services found for this assessment type.');\n      }\n    } catch (error) {\n      console.error('Failed to load services:', error);\n      setError(`Failed to load services: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    loadServices();\n  }, [assessmentType]);\n\n  // Handle slider value change - just update the slider value\n  const handleSliderChange = (serviceId, value) => {\n    // Parse the value to ensure it's a number\n    const newValue = parseInt(value, 10) || 0;\n\n    // Update the allocations \n    setAllocations(prev => ({\n      ...prev,\n      [serviceId]: newValue\n    }));\n  };\n\n  // Handle continue button click\n  const handleContinue = () => {\n    // Get all services with values > 0\n    const selectedServices = services.filter(service => allocations[service.id] > 0);\n    if (selectedServices.length === 0) {\n      alert('Please move at least one slider to indicate your service usage.');\n      return;\n    }\n\n    // Calculate total allocation to normalize values\n    const totalAllocation = Object.values(allocations).reduce((sum, value) => sum + value, 0);\n\n    // If total is zero, distribute evenly among selected\n    if (totalAllocation === 0 && selectedServices.length > 0) {\n      const evenValue = 1 / selectedServices.length;\n      const normalizedServices = selectedServices.map(service => ({\n        id: service.id,\n        name: service.name,\n        allocation: evenValue\n      }));\n      onSelect(normalizedServices);\n      return;\n    }\n\n    // Normalize the allocations to proportions that sum to 1.0\n    const normalizedServices = selectedServices.map(service => ({\n      id: service.id,\n      name: service.name,\n      allocation: allocations[service.id] / totalAllocation\n    }));\n\n    // Call the onSelect callback with the normalized selected services\n    onSelect(normalizedServices);\n  };\n\n  // Reset all allocations\n  const resetAllocations = () => {\n    const resetValues = {};\n    services.forEach(service => {\n      resetValues[service.id] = 0;\n    });\n    setAllocations(resetValues);\n  };\n\n  // Even distribution button - simply set all sliders to the same value (50)\n  const distributeEvenly = () => {\n    // If there are no services, don't do anything\n    if (services.length === 0) return;\n\n    // Set all sliders to 50 (middle value)\n    const newAllocations = {};\n    services.forEach(service => {\n      newAllocations[service.id] = 50;\n    });\n    setAllocations(newAllocations);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading services...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadServices,\n        className: styles.button,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please move the sliders to show the rough proportions of how your resources are distributed:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allocationControls,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetAllocations,\n        className: styles.buttonSmall,\n        children: \"Reset All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: distributeEvenly,\n        className: styles.buttonSmall,\n        children: \"Distribute Evenly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceList,\n      children: services.map(service => {\n        const currentAllocation = allocations[service.id] || 0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.serviceItem,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.serviceHeader,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceName,\n              children: service.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this), service.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.serviceDescription,\n            children: service.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.sliderContainer,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              value: currentAllocation,\n              onChange: e => handleSliderChange(service.id, e.target.value),\n              className: styles.slider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this)]\n        }, service.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navigationButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContinue,\n        className: styles.button,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      currentStep: 2,\n      totalSteps: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(ServiceSelector, \"dcDHOco/X0noQYbrNyI2ud7pwdo=\");\n_c = ServiceSelector;\nexport default ServiceSelector;\nvar _c;\n$RefreshReg$(_c, \"ServiceSelector\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","styles","agencyServices","inhouseActivities","jsxDEV","_jsxDEV","ServiceSelector","assessmentType","onSelect","onBack","_s","console","log","services","setServices","allocations","setAllocations","loading","setLoading","error","setError","loadServices","servicesData","Error","serviceArray","activities","length","initialAllocations","forEach","service","id","message","handleSliderChange","serviceId","value","newValue","parseInt","prev","handleContinue","selectedServices","filter","alert","totalAllocation","Object","values","reduce","sum","evenValue","normalizedServices","map","name","allocation","resetAllocations","resetValues","distributeEvenly","newAllocations","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","button","buttonSecondary","container","allocationControls","buttonSmall","serviceList","currentAllocation","serviceItem","serviceHeader","serviceName","description","serviceDescription","sliderContainer","type","min","max","onChange","e","target","slider","navigationButtons","currentStep","totalSteps","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\n\nconst ServiceSelector = ({ assessmentType, onSelect, onBack }) => {\n    console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n    const [services, setServices] = useState([]);\n    const [allocations, setAllocations] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n    // Load services data based on assessment type\n    const loadServices = () => {\n        try {\n            setLoading(true);\n            console.log(`Loading services for ${assessmentType}`);\n            \n            // Use the statically imported JSON data based on assessment type\n            let servicesData;\n            if (assessmentType === 'agency-vulnerability') {\n                console.log('Using agency services data');\n                servicesData = agencyServices;\n            } else if (assessmentType === 'inhouse-marketing') {\n                console.log('Using inhouse activities data');\n                servicesData = inhouseActivities;\n            } else {\n                throw new Error(`Unknown assessment type: ${assessmentType}`);\n            }\n            \n            // Extract the correct data array\n            const serviceArray = assessmentType === 'agency-vulnerability'\n                ? (servicesData.services || [])\n                : (servicesData.activities || []);\n                \n            console.log('Services data loaded:', serviceArray);\n            \n            if (serviceArray.length > 0) {\n                setServices(serviceArray);\n                \n                // Initialize allocations with 0 for each service\n                const initialAllocations = {};\n                serviceArray.forEach(service => {\n                    initialAllocations[service.id] = 0;\n                });\n                setAllocations(initialAllocations);\n                \n                setError(null);\n            } else {\n                console.error('Service data is empty:', servicesData);\n                setError('No services found for this assessment type.');\n            }\n        } catch (error) {\n            console.error('Failed to load services:', error);\n            setError(`Failed to load services: ${error.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        loadServices();\n    }, [assessmentType]);\n\n    // Handle slider value change - just update the slider value\n    const handleSliderChange = (serviceId, value) => {\n        // Parse the value to ensure it's a number\n        const newValue = parseInt(value, 10) || 0;\n        \n        // Update the allocations \n        setAllocations(prev => ({\n            ...prev,\n            [serviceId]: newValue\n        }));\n    };\n\n    // Handle continue button click\n    const handleContinue = () => {\n        // Get all services with values > 0\n        const selectedServices = services\n            .filter(service => allocations[service.id] > 0);\n            \n        if (selectedServices.length === 0) {\n            alert('Please move at least one slider to indicate your service usage.');\n            return;\n        }\n        \n        // Calculate total allocation to normalize values\n        const totalAllocation = Object.values(allocations).reduce((sum, value) => sum + value, 0);\n        \n        // If total is zero, distribute evenly among selected\n        if (totalAllocation === 0 && selectedServices.length > 0) {\n            const evenValue = 1 / selectedServices.length;\n            const normalizedServices = selectedServices.map(service => ({\n                id: service.id,\n                name: service.name,\n                allocation: evenValue\n            }));\n            onSelect(normalizedServices);\n            return;\n        }\n        \n        // Normalize the allocations to proportions that sum to 1.0\n        const normalizedServices = selectedServices.map(service => ({\n            id: service.id,\n            name: service.name,\n            allocation: allocations[service.id] / totalAllocation\n        }));\n        \n        // Call the onSelect callback with the normalized selected services\n        onSelect(normalizedServices);\n    };\n\n    // Reset all allocations\n    const resetAllocations = () => {\n        const resetValues = {};\n        services.forEach(service => {\n            resetValues[service.id] = 0;\n        });\n        setAllocations(resetValues);\n    };\n\n    // Even distribution button - simply set all sliders to the same value (50)\n    const distributeEvenly = () => {\n        // If there are no services, don't do anything\n        if (services.length === 0) return;\n        \n        // Set all sliders to 50 (middle value)\n        const newAllocations = {};\n        services.forEach(service => {\n            newAllocations[service.id] = 50;\n        });\n        \n        setAllocations(newAllocations);\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner}></div>\n                <p>Loading services...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3>Error</h3>\n                <p>{error}</p>\n                <button onClick={loadServices} className={styles.button}>Retry</button>\n                <button onClick={onBack} className={styles.buttonSecondary}>Go Back</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2>{assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'}</h2>\n            <p>Please move the sliders to show the rough proportions of how your resources are distributed:</p>\n            \n            <div className={styles.allocationControls}>\n                <button onClick={resetAllocations} className={styles.buttonSmall}>Reset All</button>\n                <button onClick={distributeEvenly} className={styles.buttonSmall}>Distribute Evenly</button>\n            </div>\n            \n            <div className={styles.serviceList}>\n                {services.map(service => {\n                    const currentAllocation = allocations[service.id] || 0;\n                    \n                    return (\n                        <div key={service.id} className={styles.serviceItem}>\n                            <div className={styles.serviceHeader}>\n                                <span className={styles.serviceName}>{service.name}</span>\n                            </div>\n                            \n                            {service.description && (\n                                <p className={styles.serviceDescription}>{service.description}</p>\n                            )}\n                            \n                            <div className={styles.sliderContainer}>\n                                <input\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    value={currentAllocation}\n                                    onChange={(e) => handleSliderChange(service.id, e.target.value)}\n                                    className={styles.slider}\n                                />\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            \n            <div className={styles.navigationButtons}>\n                <button onClick={onBack} className={styles.buttonSecondary}>\n                    Back\n                </button>\n                <button \n                    onClick={handleContinue} \n                    className={styles.button}\n                >\n                    Continue\n                </button>\n            </div>\n            \n            <ProgressBar currentStep={2} totalSteps={5} />\n        </div>\n    );\n};\n\nexport default ServiceSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}