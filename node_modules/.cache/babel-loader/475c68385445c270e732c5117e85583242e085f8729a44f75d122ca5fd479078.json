{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debugLog = (message, data) => {\n  console.log(`DEBUG - ${message}:`, data);\n};\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  setContext,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadQuestions();\n  }, [assessmentType]);\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      debugLog('Loading questions for assessment type', assessmentType);\n\n      // Load core questions based on assessment type\n      const module = await import(`../../assessments/${assessmentType}/questions.json`);\n      const data = module.default || module;\n\n      // Extract and flatten core questions array from the loaded data\n      let coreQuestions = [];\n      if (data.questions) {\n        // Direct questions array format\n        coreQuestions = data.questions;\n      } else if (data.coreQuestions) {\n        // Nested questions by category format\n        Object.values(data.coreQuestions).forEach(questionSet => {\n          if (Array.isArray(questionSet)) {\n            coreQuestions = [...coreQuestions, ...questionSet];\n          }\n        });\n      }\n      debugLog(`Loaded core questions`, coreQuestions.length);\n\n      // If we have selected services, load service-specific questions\n      let serviceQuestions = [];\n\n      // Get selected services from context or responses with detailed logging\n      let selectedServices;\n      debugLog('Trying to get selectedServices', '');\n      try {\n        selectedServices = getContext('selectedServices');\n        debugLog('Retrieved selectedServices from context', selectedServices);\n\n        // If not in context, try to get from responses\n        if (!selectedServices || Object.keys(selectedServices).length === 0) {\n          const servicesResponse = getResponse('selectedServices');\n          if (servicesResponse) {\n            selectedServices = servicesResponse;\n            debugLog('Retrieved selectedServices from responses', selectedServices);\n          }\n        }\n      } catch (err) {\n        console.error('Error getting selectedServices:', err);\n      }\n      if (selectedServices && Object.keys(selectedServices).length > 0) {\n        try {\n          // Load service-specific questions\n          debugLog(`Loading service questions from path`, `../../assessments/${assessmentType}/service-questions.json`);\n          const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n          const serviceData = serviceModule.default || serviceModule;\n\n          // Check if the service data has the proper structure\n          if (serviceData) {\n            debugLog('Service questions data structure', Object.keys(serviceData));\n\n            // Check if we have the expected nested structure with serviceQuestions\n            const serviceQuestionsData = serviceData.serviceQuestions || {};\n            debugLog('Service questions nested structure', Object.keys(serviceQuestionsData));\n\n            // Threshold to determine if a service allocation is high enough to include questions\n            // Lower threshold to 5% (0.05) to be more inclusive\n            const ALLOCATION_THRESHOLD = 0.05;\n\n            // Define mappings from selected service IDs to question categories\n            // This helps match services that may have different naming\n            const serviceIdMappings = {\n              'content_creation': ['content_creation'],\n              'creative_design': ['content_creation'],\n              // Map creative to content questions\n              'digital_marketing': ['content_creation'],\n              // Map marketing to content\n              'seo_sem': ['content_creation'],\n              // Map SEO to content \n              'pr_comms': ['content_creation', 'strategy_consulting'],\n              // PR maps to both\n              'web_development': ['strategy_consulting'],\n              // Web dev to strategy\n              'social_media': ['content_creation'] // Social to content\n            };\n            debugLog('Service ID mappings available', serviceIdMappings);\n\n            // Add service questions based on selected services\n            Object.keys(selectedServices).forEach(serviceId => {\n              const allocation = selectedServices[serviceId];\n              if (allocation >= ALLOCATION_THRESHOLD) {\n                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold ${ALLOCATION_THRESHOLD}`, '');\n\n                // Get the mapped question categories for this service ID\n                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n\n                // Process each mapped category\n                let foundQuestionsForService = false;\n                mappedCategories.forEach(mappedId => {\n                  // Direct matching in the serviceQuestions object\n                  if (serviceQuestionsData[mappedId]) {\n                    const serviceObj = serviceQuestionsData[mappedId];\n                    if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                      debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`, serviceObj);\n                      serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                      foundQuestionsForService = true;\n                    } else {\n                      debugLog(`Service ${mappedId} exists but has no questions array`, serviceObj);\n                    }\n                  } else {\n                    // Try matching by partial service name in keys\n                    Object.keys(serviceQuestionsData).forEach(key => {\n                      // Check if the key contains or matches the service ID\n                      if (key.toLowerCase().includes(mappedId.toLowerCase()) || mappedId.toLowerCase().includes(key.toLowerCase())) {\n                        const serviceObj = serviceQuestionsData[key];\n                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                          debugLog(`Found ${serviceObj.questions.length} questions for similar service key ${key} matching ${mappedId}`, '');\n                          serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                          foundQuestionsForService = true;\n                        }\n                      }\n                    });\n                  }\n                });\n                if (!foundQuestionsForService) {\n                  debugLog(`Could not find any questions for service ${serviceId}`, '');\n                }\n              } else {\n                debugLog(`Service ${serviceId} allocation ${allocation} below threshold ${ALLOCATION_THRESHOLD}`, '');\n              }\n            });\n\n            // Additional debugging info\n            debugLog('Services in question data', Object.keys(serviceQuestionsData));\n            debugLog('Selected services', Object.keys(selectedServices));\n          } else {\n            debugLog('Service data is empty or invalid', serviceData);\n          }\n        } catch (error) {\n          console.error('Error loading service questions:', error);\n        }\n      } else {\n        console.warn('No services selected or invalid selectedServices format:', selectedServices);\n      }\n      debugLog(`Found service-specific questions`, serviceQuestions.length);\n\n      // Remove any potential duplicate questions by ID\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // First add core questions\n      coreQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      debugLog(`Total unique questions to display`, uniqueQuestions.length);\n      debugLog('Question IDs', Array.from(questionIds));\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (questionId, value) => {\n    // Save the answer\n    saveResponse(questionId, value);\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = () => {\n    // Validate if the current question is answered\n    const currentQ = questions[currentQuestionIndex];\n    if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n      alert('Please answer this question before continuing');\n      return;\n    }\n    if (isLastQuestion) {\n      // Before completing, ensure selectedServices is stored in both context and responses\n      if (typeof getContext === 'function') {\n        const selectedServices = getContext('selectedServices');\n        if (selectedServices && typeof saveResponse === 'function') {\n          // Save as a response to ensure it's available in both places\n          saveResponse('selectedServices', selectedServices);\n          debugLog('Saved selectedServices to responses as backup', selectedServices);\n        }\n      }\n\n      // Move to the next stage using onComplete callback\n      if (onComplete) {\n        onComplete();\n      }\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      // Go back to the previous stage in the assessment flow\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress || 65,\n      stage: \"assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Organization Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question || currentQuestion.text, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${selectedValue === (option.value || option.score || index) ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value || option.score || index),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label || option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this), currentQuestion.insight && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionInsight,\n          children: currentQuestion.insight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 29\n        }, this), currentQuestion.benchmark && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionBenchmark,\n          children: currentQuestion.benchmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${getResponse(questions[index].id) ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handlePrevious,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? handleSkip : null,\n      nextLabel: isLastQuestion ? \"Complete\" : \"Continue\",\n      showNext: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","Navigation","styles","jsxDEV","_jsxDEV","debugLog","message","data","console","log","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","setContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","module","default","coreQuestions","Object","values","forEach","questionSet","Array","isArray","length","serviceQuestions","selectedServices","keys","servicesResponse","err","error","serviceModule","serviceData","serviceQuestionsData","ALLOCATION_THRESHOLD","serviceIdMappings","serviceId","allocation","mappedCategories","foundQuestionsForService","mappedId","serviceObj","key","toLowerCase","includes","warn","uniqueQuestions","questionIds","Set","q","has","id","add","push","from","currentQuestion","isLastQuestion","handleAnswer","questionId","value","setTimeout","handleNext","currentQ","required","alert","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","selectedValue","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","text","optionsGrid","options","map","option","index","optionButton","score","selected","optionLabel","label","insight","questionInsight","benchmark","questionBenchmark","questionDots","_","dot","active","answered","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nconst debugLog = (message, data) => {\n    console.log(`DEBUG - ${message}:`, data);\n};\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    getContext,\n    setContext, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            debugLog('Loading questions for assessment type', assessmentType);\n            \n            // Load core questions based on assessment type\n            const module = await import(`../../assessments/${assessmentType}/questions.json`);\n            const data = module.default || module;\n            \n            // Extract and flatten core questions array from the loaded data\n            let coreQuestions = [];\n            if (data.questions) {\n                // Direct questions array format\n                coreQuestions = data.questions;\n            } else if (data.coreQuestions) {\n                // Nested questions by category format\n                Object.values(data.coreQuestions).forEach(questionSet => {\n                    if (Array.isArray(questionSet)) {\n                        coreQuestions = [...coreQuestions, ...questionSet];\n                    }\n                });\n            }\n            debugLog(`Loaded core questions`, coreQuestions.length);\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            \n            // Get selected services from context or responses with detailed logging\n            let selectedServices;\n            debugLog('Trying to get selectedServices', '');\n            try {\n                selectedServices = getContext('selectedServices');\n                debugLog('Retrieved selectedServices from context', selectedServices);\n                \n                // If not in context, try to get from responses\n                if (!selectedServices || Object.keys(selectedServices).length === 0) {\n                    const servicesResponse = getResponse('selectedServices');\n                    if (servicesResponse) {\n                        selectedServices = servicesResponse;\n                        debugLog('Retrieved selectedServices from responses', selectedServices);\n                    }\n                }\n            } catch (err) {\n                console.error('Error getting selectedServices:', err);\n            }\n            \n            if (selectedServices && Object.keys(selectedServices).length > 0) {\n                try {\n                    // Load service-specific questions\n                    debugLog(`Loading service questions from path`, `../../assessments/${assessmentType}/service-questions.json`);\n                    \n                    const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceData = serviceModule.default || serviceModule;\n                    \n                    // Check if the service data has the proper structure\n                    if (serviceData) {\n                        debugLog('Service questions data structure', Object.keys(serviceData));\n                        \n                        // Check if we have the expected nested structure with serviceQuestions\n                        const serviceQuestionsData = serviceData.serviceQuestions || {};\n                        debugLog('Service questions nested structure', Object.keys(serviceQuestionsData));\n                        \n                        // Threshold to determine if a service allocation is high enough to include questions\n                        // Lower threshold to 5% (0.05) to be more inclusive\n                        const ALLOCATION_THRESHOLD = 0.05;\n                        \n                        // Define mappings from selected service IDs to question categories\n                        // This helps match services that may have different naming\n                        const serviceIdMappings = {\n                            'content_creation': ['content_creation'],\n                            'creative_design': ['content_creation'],  // Map creative to content questions\n                            'digital_marketing': ['content_creation'], // Map marketing to content\n                            'seo_sem': ['content_creation'],          // Map SEO to content \n                            'pr_comms': ['content_creation', 'strategy_consulting'], // PR maps to both\n                            'web_development': ['strategy_consulting'], // Web dev to strategy\n                            'social_media': ['content_creation'],     // Social to content\n                        };\n                        \n                        debugLog('Service ID mappings available', serviceIdMappings);\n                        \n                        // Add service questions based on selected services\n                        Object.keys(selectedServices).forEach(serviceId => {\n                            const allocation = selectedServices[serviceId];\n                            \n                            if (allocation >= ALLOCATION_THRESHOLD) {\n                                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold ${ALLOCATION_THRESHOLD}`, '');\n                                \n                                // Get the mapped question categories for this service ID\n                                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n                                \n                                // Process each mapped category\n                                let foundQuestionsForService = false;\n                                \n                                mappedCategories.forEach(mappedId => {\n                                    // Direct matching in the serviceQuestions object\n                                    if (serviceQuestionsData[mappedId]) {\n                                        const serviceObj = serviceQuestionsData[mappedId];\n                                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                            debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`, serviceObj);\n                                            serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                            foundQuestionsForService = true;\n                                        } else {\n                                            debugLog(`Service ${mappedId} exists but has no questions array`, serviceObj);\n                                        }\n                                    } else {\n                                        // Try matching by partial service name in keys\n                                        Object.keys(serviceQuestionsData).forEach(key => {\n                                            // Check if the key contains or matches the service ID\n                                            if (\n                                                key.toLowerCase().includes(mappedId.toLowerCase()) || \n                                                mappedId.toLowerCase().includes(key.toLowerCase())\n                                            ) {\n                                                const serviceObj = serviceQuestionsData[key];\n                                                if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                                    debugLog(`Found ${serviceObj.questions.length} questions for similar service key ${key} matching ${mappedId}`, '');\n                                                    serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                                    foundQuestionsForService = true;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                \n                                if (!foundQuestionsForService) {\n                                    debugLog(`Could not find any questions for service ${serviceId}`, '');\n                                }\n                            } else {\n                                debugLog(`Service ${serviceId} allocation ${allocation} below threshold ${ALLOCATION_THRESHOLD}`, '');\n                            }\n                        });\n                        \n                        // Additional debugging info\n                        debugLog('Services in question data', Object.keys(serviceQuestionsData));\n                        debugLog('Selected services', Object.keys(selectedServices));\n                    } else {\n                        debugLog('Service data is empty or invalid', serviceData);\n                    }\n                } catch (error) {\n                    console.error('Error loading service questions:', error);\n                }\n            } else {\n                console.warn('No services selected or invalid selectedServices format:', selectedServices);\n            }\n            \n            debugLog(`Found service-specific questions`, serviceQuestions.length);\n            \n            // Remove any potential duplicate questions by ID\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // First add core questions\n            coreQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            debugLog(`Total unique questions to display`, uniqueQuestions.length);\n            debugLog('Question IDs', Array.from(questionIds));\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (questionId, value) => {\n        // Save the answer\n        saveResponse(questionId, value);\n        \n        // Auto-advance to next question after a short delay\n        setTimeout(() => {\n            if (currentQuestionIndex < questions.length - 1) {\n                setCurrentQuestionIndex(currentQuestionIndex + 1);\n            }\n        }, 300);\n    };\n\n    const handleNext = () => {\n        // Validate if the current question is answered\n        const currentQ = questions[currentQuestionIndex];\n        if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n            alert('Please answer this question before continuing');\n            return;\n        }\n        \n        if (isLastQuestion) {\n            // Before completing, ensure selectedServices is stored in both context and responses\n            if (typeof getContext === 'function') {\n                const selectedServices = getContext('selectedServices');\n                if (selectedServices && typeof saveResponse === 'function') {\n                    // Save as a response to ensure it's available in both places\n                    saveResponse('selectedServices', selectedServices);\n                    debugLog('Saved selectedServices to responses as backup', selectedServices);\n                }\n            }\n            \n            // Move to the next stage using onComplete callback\n            if (onComplete) {\n                onComplete();\n            }\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.qualifyingContainer}>\n            <ProgressBar progress={progress || 65} stage=\"assessment\" />\n            \n            <div className={styles.questionContainer}>\n                <div className={styles.questionHeader}>\n                    <h2>Your Organization Assessment</h2>\n                    <p className={styles.questionNumber}>\n                        Question {currentQuestionIndex + 1} of {questions.length}\n                    </p>\n                </div>\n\n                {currentQuestion && (\n                    <div className={styles.questionContent}>\n                        <h3 className={styles.questionText}>\n                            {currentQuestion.question || currentQuestion.text}\n                            {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n                        </h3>\n                        \n                        <div className={styles.optionsGrid}>\n                            {currentQuestion.options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    className={`${styles.optionButton} ${\n                                        selectedValue === (option.value || option.score || index) ? styles.selected : ''\n                                    }`}\n                                    onClick={() => handleAnswer(currentQuestion.id, option.value || option.score || index)}\n                                >\n                                    <span className={styles.optionLabel}>{option.label || option.text}</span>\n                                </button>\n                            ))}\n                        </div>\n                        \n                        {currentQuestion.insight && (\n                            <p className={styles.questionInsight}>{currentQuestion.insight}</p>\n                        )}\n                        \n                        {currentQuestion.benchmark && (\n                            <p className={styles.questionBenchmark}>{currentQuestion.benchmark}</p>\n                        )}\n                    </div>\n                )}\n\n                {/* Question navigation dots */}\n                <div className={styles.questionDots}>\n                    {questions.map((_, index) => (\n                        <button\n                            key={index}\n                            className={`${styles.dot} ${\n                                index === currentQuestionIndex ? styles.active : ''\n                            } ${getResponse(questions[index].id) ? styles.answered : ''}`}\n                            onClick={() => setCurrentQuestionIndex(index)}\n                            aria-label={`Go to question ${index + 1}`}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <Navigation\n                onBack={handlePrevious}\n                onNext={handleNext}\n                onSkip={currentQuestion?.required === false ? handleSkip : null}\n                nextLabel={isLastQuestion ? \"Complete\" : \"Continue\"}\n                showNext={true}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}