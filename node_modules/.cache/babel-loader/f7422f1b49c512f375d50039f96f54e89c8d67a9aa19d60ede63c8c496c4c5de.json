{"ast":null,"code":"/**\n * ResultsAdapter for inhouse-marketing assessment\n * Transforms raw scoring engine output into a consistent format for the results view\n */\n\nclass InhouseMarketingResultsAdapter {\n  /**\n   * Adapts raw scoring engine results to the format expected by ResultsView\n   * @param {Object} rawResults - Raw output from the scoring engine\n   * @param {Function} getResponse - Function to retrieve saved responses\n   * @returns {Object} - Formatted results object\n   */\n  adaptResults(rawResults, getResponse) {\n    if (!rawResults) {\n      console.error('InhouseMarketingResultsAdapter: Received null/undefined rawResults');\n      return null;\n    }\n    console.log('InhouseMarketingResultsAdapter: Processing raw results', Object.keys(rawResults || {}));\n\n    // Extract key data points from raw results with fallbacks\n    const overallScore = rawResults.overall || 0;\n    const dimensionScores = rawResults.dimensions || {};\n    const categoryScores = rawResults.categoryScores || {};\n    const activityScores = rawResults.activityScores || {};\n    const insights = rawResults.insights || [];\n    const priorities = rawResults.priorities || [];\n    const readinessLevel = rawResults.readinessLevel || {};\n    const marketPosition = rawResults.marketPosition || {};\n    const savingsPotential = rawResults.savingsPotential || {};\n\n    // Get metadata from responses if available\n    const allResponses = {};\n    try {\n      // Get all saved question responses\n      const questionTypes = ['qualifying', 'service_selection', 'dynamic_questions'];\n      questionTypes.forEach(type => {\n        const savedData = getResponse(type);\n        if (savedData) {\n          Object.assign(allResponses, savedData);\n        }\n      });\n      console.log('InhouseMarketingResultsAdapter: Retrieved all responses', allResponses);\n    } catch (error) {\n      console.error('InhouseMarketingResultsAdapter: Error retrieving responses:', error);\n    }\n\n    // Extract company size and selected activities from responses or raw results\n    const companySize = allResponses.company_size || rawResults.companySize || 'small';\n    const selectedActivities = allResponses.selected_activities || rawResults.selectedActivities || [];\n    const sector = allResponses.sector || rawResults.sector || 'other';\n\n    // Create a comprehensive results object\n    return {\n      // Assessment metadata\n      assessmentType: 'inhouse-marketing',\n      timestamp: rawResults.timestamp || new Date().toISOString(),\n      // Individual question responses\n      responses: allResponses,\n      // Context data\n      context: {\n        companySize,\n        sector,\n        selectedActivities\n      },\n      // Results data\n      results: {\n        overall: overallScore,\n        dimensions: dimensionScores,\n        categoryScores: categoryScores,\n        activityScores: activityScores,\n        insights: insights,\n        priorities: priorities,\n        readinessLevel: readinessLevel,\n        marketPosition: marketPosition,\n        savingsPotential: savingsPotential\n      },\n      // Engine data for completeness\n      engineData: {\n        allResponses: allResponses,\n        context: {\n          companySize,\n          sector,\n          selectedActivities\n        },\n        progressData: {\n          current: 5,\n          total: 6,\n          percentage: 80,\n          stageName: 'results'\n        },\n        completionStatus: true\n      },\n      // Include raw data for debugging\n      _rawData: rawResults\n    };\n  }\n}\nexport default InhouseMarketingResultsAdapter;","map":{"version":3,"names":["InhouseMarketingResultsAdapter","adaptResults","rawResults","getResponse","console","error","log","Object","keys","overallScore","overall","dimensionScores","dimensions","categoryScores","activityScores","insights","priorities","readinessLevel","marketPosition","savingsPotential","allResponses","questionTypes","forEach","type","savedData","assign","companySize","company_size","selectedActivities","selected_activities","sector","assessmentType","timestamp","Date","toISOString","responses","context","results","engineData","progressData","current","total","percentage","stageName","completionStatus","_rawData"],"sources":["/Users/jon/Documents/GitHub/assessor/src/assessments/inhouse-marketing/ResultsAdapter.js"],"sourcesContent":["/**\n * ResultsAdapter for inhouse-marketing assessment\n * Transforms raw scoring engine output into a consistent format for the results view\n */\n\nclass InhouseMarketingResultsAdapter {\n  /**\n   * Adapts raw scoring engine results to the format expected by ResultsView\n   * @param {Object} rawResults - Raw output from the scoring engine\n   * @param {Function} getResponse - Function to retrieve saved responses\n   * @returns {Object} - Formatted results object\n   */\n  adaptResults(rawResults, getResponse) {\n    if (!rawResults) {\n      console.error('InhouseMarketingResultsAdapter: Received null/undefined rawResults');\n      return null;\n    }\n\n    console.log('InhouseMarketingResultsAdapter: Processing raw results', Object.keys(rawResults || {}));\n    \n    // Extract key data points from raw results with fallbacks\n    const overallScore = rawResults.overall || 0;\n    const dimensionScores = rawResults.dimensions || {};\n    const categoryScores = rawResults.categoryScores || {};\n    const activityScores = rawResults.activityScores || {};\n    const insights = rawResults.insights || [];\n    const priorities = rawResults.priorities || [];\n    const readinessLevel = rawResults.readinessLevel || {};\n    const marketPosition = rawResults.marketPosition || {};\n    const savingsPotential = rawResults.savingsPotential || {};\n    \n    // Get metadata from responses if available\n    const allResponses = {};\n    try {\n      // Get all saved question responses\n      const questionTypes = ['qualifying', 'service_selection', 'dynamic_questions'];\n      questionTypes.forEach(type => {\n        const savedData = getResponse(type);\n        if (savedData) {\n          Object.assign(allResponses, savedData);\n        }\n      });\n      console.log('InhouseMarketingResultsAdapter: Retrieved all responses', allResponses);\n    } catch (error) {\n      console.error('InhouseMarketingResultsAdapter: Error retrieving responses:', error);\n    }\n    \n    // Extract company size and selected activities from responses or raw results\n    const companySize = allResponses.company_size || rawResults.companySize || 'small';\n    const selectedActivities = allResponses.selected_activities || rawResults.selectedActivities || [];\n    const sector = allResponses.sector || rawResults.sector || 'other';\n    \n    // Create a comprehensive results object\n    return {\n      // Assessment metadata\n      assessmentType: 'inhouse-marketing',\n      timestamp: rawResults.timestamp || new Date().toISOString(),\n      \n      // Individual question responses\n      responses: allResponses,\n      \n      // Context data\n      context: {\n        companySize,\n        sector,\n        selectedActivities\n      },\n      \n      // Results data\n      results: {\n        overall: overallScore,\n        dimensions: dimensionScores,\n        categoryScores: categoryScores,\n        activityScores: activityScores,\n        insights: insights,\n        priorities: priorities,\n        readinessLevel: readinessLevel,\n        marketPosition: marketPosition,\n        savingsPotential: savingsPotential,\n      },\n      \n      // Engine data for completeness\n      engineData: {\n        allResponses: allResponses,\n        context: {\n          companySize,\n          sector,\n          selectedActivities\n        },\n        progressData: {\n          current: 5,\n          total: 6,\n          percentage: 80,\n          stageName: 'results'\n        },\n        completionStatus: true\n      },\n      \n      // Include raw data for debugging\n      _rawData: rawResults\n    };\n  }\n}\n\nexport default InhouseMarketingResultsAdapter;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,8BAA8B,CAAC;EACnC;AACF;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAACC,UAAU,EAAEC,WAAW,EAAE;IACpC,IAAI,CAACD,UAAU,EAAE;MACfE,OAAO,CAACC,KAAK,CAAC,oEAAoE,CAAC;MACnF,OAAO,IAAI;IACb;IAEAD,OAAO,CAACE,GAAG,CAAC,wDAAwD,EAAEC,MAAM,CAACC,IAAI,CAACN,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEpG;IACA,MAAMO,YAAY,GAAGP,UAAU,CAACQ,OAAO,IAAI,CAAC;IAC5C,MAAMC,eAAe,GAAGT,UAAU,CAACU,UAAU,IAAI,CAAC,CAAC;IACnD,MAAMC,cAAc,GAAGX,UAAU,CAACW,cAAc,IAAI,CAAC,CAAC;IACtD,MAAMC,cAAc,GAAGZ,UAAU,CAACY,cAAc,IAAI,CAAC,CAAC;IACtD,MAAMC,QAAQ,GAAGb,UAAU,CAACa,QAAQ,IAAI,EAAE;IAC1C,MAAMC,UAAU,GAAGd,UAAU,CAACc,UAAU,IAAI,EAAE;IAC9C,MAAMC,cAAc,GAAGf,UAAU,CAACe,cAAc,IAAI,CAAC,CAAC;IACtD,MAAMC,cAAc,GAAGhB,UAAU,CAACgB,cAAc,IAAI,CAAC,CAAC;IACtD,MAAMC,gBAAgB,GAAGjB,UAAU,CAACiB,gBAAgB,IAAI,CAAC,CAAC;;IAE1D;IACA,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvB,IAAI;MACF;MACA,MAAMC,aAAa,GAAG,CAAC,YAAY,EAAE,mBAAmB,EAAE,mBAAmB,CAAC;MAC9EA,aAAa,CAACC,OAAO,CAACC,IAAI,IAAI;QAC5B,MAAMC,SAAS,GAAGrB,WAAW,CAACoB,IAAI,CAAC;QACnC,IAAIC,SAAS,EAAE;UACbjB,MAAM,CAACkB,MAAM,CAACL,YAAY,EAAEI,SAAS,CAAC;QACxC;MACF,CAAC,CAAC;MACFpB,OAAO,CAACE,GAAG,CAAC,yDAAyD,EAAEc,YAAY,CAAC;IACtF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,6DAA6D,EAAEA,KAAK,CAAC;IACrF;;IAEA;IACA,MAAMqB,WAAW,GAAGN,YAAY,CAACO,YAAY,IAAIzB,UAAU,CAACwB,WAAW,IAAI,OAAO;IAClF,MAAME,kBAAkB,GAAGR,YAAY,CAACS,mBAAmB,IAAI3B,UAAU,CAAC0B,kBAAkB,IAAI,EAAE;IAClG,MAAME,MAAM,GAAGV,YAAY,CAACU,MAAM,IAAI5B,UAAU,CAAC4B,MAAM,IAAI,OAAO;;IAElE;IACA,OAAO;MACL;MACAC,cAAc,EAAE,mBAAmB;MACnCC,SAAS,EAAE9B,UAAU,CAAC8B,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAE3D;MACAC,SAAS,EAAEf,YAAY;MAEvB;MACAgB,OAAO,EAAE;QACPV,WAAW;QACXI,MAAM;QACNF;MACF,CAAC;MAED;MACAS,OAAO,EAAE;QACP3B,OAAO,EAAED,YAAY;QACrBG,UAAU,EAAED,eAAe;QAC3BE,cAAc,EAAEA,cAAc;QAC9BC,cAAc,EAAEA,cAAc;QAC9BC,QAAQ,EAAEA,QAAQ;QAClBC,UAAU,EAAEA,UAAU;QACtBC,cAAc,EAAEA,cAAc;QAC9BC,cAAc,EAAEA,cAAc;QAC9BC,gBAAgB,EAAEA;MACpB,CAAC;MAED;MACAmB,UAAU,EAAE;QACVlB,YAAY,EAAEA,YAAY;QAC1BgB,OAAO,EAAE;UACPV,WAAW;UACXI,MAAM;UACNF;QACF,CAAC;QACDW,YAAY,EAAE;UACZC,OAAO,EAAE,CAAC;UACVC,KAAK,EAAE,CAAC;UACRC,UAAU,EAAE,EAAE;UACdC,SAAS,EAAE;QACb,CAAC;QACDC,gBAAgB,EAAE;MACpB,CAAC;MAED;MACAC,QAAQ,EAAE3C;IACZ,CAAC;EACH;AACF;AAEA,eAAeF,8BAA8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}