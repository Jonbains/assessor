{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debugLog = (message, data) => {\n  console.log(`DEBUG - ${message}:`, data);\n};\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  setContext,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadQuestions();\n  }, [assessmentType]);\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      debugLog('Loading questions for assessment type', assessmentType);\n\n      // Load core questions\n      let coreQuestions = [];\n      try {\n        const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n        const coreData = coreModule.default || coreModule;\n        debugLog(`Core questions data structure:`, Object.keys(coreData));\n\n        // Check for proper structure - either direct array or nested in coreQuestions property\n        if (coreData && Array.isArray(coreData)) {\n          // Direct array structure\n          coreQuestions = coreData;\n          debugLog(`Loaded core questions (direct array):`, coreQuestions.length);\n        } else if (coreData && coreData.coreQuestions && Array.isArray(coreData.coreQuestions)) {\n          // Nested structure with coreQuestions property as array\n          coreQuestions = coreData.coreQuestions;\n          debugLog(`Loaded core questions from coreQuestions property:`, coreQuestions.length);\n        } else if (coreData && coreData.coreQuestions && typeof coreData.coreQuestions === 'object') {\n          // Handle nested structure with coreQuestions as object containing category arrays\n          // Combine all question arrays from different categories\n          coreQuestions = [];\n          for (const category in coreData.coreQuestions) {\n            if (Array.isArray(coreData.coreQuestions[category])) {\n              coreQuestions = coreQuestions.concat(coreData.coreQuestions[category]);\n              debugLog(`Added questions from category ${category}:`, coreData.coreQuestions[category].length);\n            }\n          }\n          debugLog(`Combined questions from all categories:`, coreQuestions.length);\n        } else if (coreData && typeof coreData === 'object') {\n          // Check for any array property that might contain questions\n          for (const key in coreData) {\n            if (Array.isArray(coreData[key])) {\n              coreQuestions = coreData[key];\n              debugLog(`Loaded core questions from ${key} property:`, coreQuestions.length);\n              break;\n            }\n          }\n        }\n        if (coreQuestions.length === 0) {\n          debugLog(`Could not find questions array in core data structure:`, Object.keys(coreData));\n        }\n      } catch (error) {\n        console.error(`Error loading core questions for ${assessmentType}:`, error);\n      }\n      debugLog(`Loaded core questions`, coreQuestions.length);\n\n      // If we have selected services, load service-specific questions\n      let serviceQuestions = [];\n\n      // Get selected services from context or responses with detailed logging\n      let selectedServices;\n      debugLog('Trying to get selectedServices', '');\n      try {\n        selectedServices = getContext('selectedServices');\n        debugLog('Retrieved selectedServices from context', selectedServices);\n\n        // If not in context, try to get from responses\n        if (!selectedServices || Object.keys(selectedServices).length === 0) {\n          const servicesResponse = getResponse('selectedServices');\n          if (servicesResponse) {\n            selectedServices = servicesResponse;\n            debugLog('Retrieved selectedServices from responses', selectedServices);\n          }\n        }\n      } catch (err) {\n        console.error('Error getting selectedServices:', err);\n      }\n      if (selectedServices && Object.keys(selectedServices).length > 0) {\n        try {\n          // Load service-specific questions - handle different file names based on assessment type\n          let serviceData;\n          try {\n            // First try to load from service-questions.json (agency-vulnerability)\n            debugLog(`Trying to load service questions from`, `../../assessments/${assessmentType}/service-questions.json`);\n            const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n            serviceData = serviceModule.default || serviceModule;\n            debugLog('Loaded service questions from service-questions.json', Object.keys(serviceData));\n          } catch (error) {\n            // If that fails, try activity-questions.json (inhouse-marketing)\n            debugLog(`First attempt failed, trying activity-questions.json`, error.message);\n            try {\n              debugLog(`Loading activity questions from`, `../../assessments/${assessmentType}/activity-questions.json`);\n              const activityModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n              serviceData = activityModule.default || activityModule;\n              debugLog('Loaded service questions from activity-questions.json', Object.keys(serviceData));\n            } catch (activityError) {\n              debugLog('Failed to load both service-questions.json and activity-questions.json', activityError.message);\n              throw new Error(`Could not load questions for ${assessmentType}: ${activityError.message}`);\n            }\n          }\n\n          // Check if the service data has the proper structure\n          if (serviceData) {\n            debugLog('Service questions data structure', Object.keys(serviceData));\n\n            // Check if we have the expected nested structure with serviceQuestions or activityQuestions\n            const serviceQuestionsData = serviceData.serviceQuestions || serviceData.activityQuestions || {};\n            debugLog('Service/activity questions nested structure', Object.keys(serviceQuestionsData));\n\n            // Threshold to determine if a service allocation is high enough to include questions\n            // Lower threshold to 5% (0.05) to be more inclusive\n            const ALLOCATION_THRESHOLD = 0.05;\n\n            // Define mappings from selected service IDs to question categories\n            // This helps match services that may have different naming\n            const serviceIdMappings = {\n              // Agency mappings\n              'content_creation': ['content_creation', 'content_marketing'],\n              'creative_design': ['content_creation', 'creative_design'],\n              'digital_marketing': ['content_creation', 'digital_marketing'],\n              'seo_sem': ['content_creation', 'seo_sem'],\n              'pr_comms': ['content_creation', 'strategy_consulting', 'pr_comms'],\n              'web_development': ['strategy_consulting', 'web_development'],\n              'social_media': ['content_creation', 'social_media'],\n              // Inhouse mappings - direct matches to activity names\n              'content_marketing': ['content_marketing'],\n              'email_marketing': ['email_marketing'],\n              'paid_advertising': ['paid_advertising'],\n              'analytics_data': ['analytics_data'],\n              'marketing_automation': ['marketing_automation']\n            };\n            debugLog('Service ID mappings available', serviceIdMappings);\n            debugLog('Assessment type for question loading', assessmentType);\n\n            // Add service questions based on selected services\n            Object.keys(selectedServices).forEach(serviceId => {\n              const allocation = selectedServices[serviceId];\n              if (allocation >= ALLOCATION_THRESHOLD) {\n                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold ${ALLOCATION_THRESHOLD}`, '');\n\n                // Get the mapped question categories for this service ID\n                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n\n                // Process each mapped category\n                let foundQuestionsForService = false;\n                mappedCategories.forEach(mappedId => {\n                  // Direct matching in the serviceQuestions object\n                  if (serviceQuestionsData[mappedId]) {\n                    const serviceObj = serviceQuestionsData[mappedId];\n                    // Handle both structures: service-questions has a nested 'questions' array,\n                    // while activity-questions has direct arrays\n                    if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                      // Handle service-questions.json structure\n                      debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId} (nested structure)`, serviceObj);\n                      serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                      foundQuestionsForService = true;\n                    } else if (Array.isArray(serviceObj)) {\n                      // Handle activity-questions.json structure where the questions are directly in an array\n                      debugLog(`Found ${serviceObj.length} questions for service ID ${mappedId} (direct array)`, serviceObj);\n                      serviceQuestions = [...serviceQuestions, ...serviceObj];\n                      foundQuestionsForService = true;\n                    } else {\n                      debugLog(`Service ${mappedId} exists but has no questions array or is not an array itself`, serviceObj);\n                    }\n                  } else {\n                    // Try matching by partial service name in keys\n                    Object.keys(serviceQuestionsData).forEach(key => {\n                      // Check if the key contains or matches the service ID\n                      if (key.toLowerCase().includes(mappedId.toLowerCase()) || mappedId.toLowerCase().includes(key.toLowerCase())) {\n                        const serviceObj = serviceQuestionsData[key];\n                        // Handle both structures: service-questions has a nested 'questions' array,\n                        // while activity-questions has direct arrays\n                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                          // Handle service-questions.json structure\n                          debugLog(`Found ${serviceObj.questions.length} questions for similar key ${key} matching ${mappedId} (nested structure)`, '');\n                          serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                          foundQuestionsForService = true;\n                        } else if (Array.isArray(serviceObj)) {\n                          // Handle activity-questions.json structure\n                          debugLog(`Found ${serviceObj.length} questions for similar key ${key} matching ${mappedId} (direct array)`, '');\n                          serviceQuestions = [...serviceQuestions, ...serviceObj];\n                          foundQuestionsForService = true;\n                        }\n                      }\n                    });\n                  }\n                });\n                if (!foundQuestionsForService) {\n                  debugLog(`Could not find any questions for service ${serviceId}`, '');\n                }\n              } else {\n                debugLog(`Service ${serviceId} allocation ${allocation} below threshold ${ALLOCATION_THRESHOLD}`, '');\n              }\n            });\n\n            // Additional debugging info\n            debugLog('Services in question data', Object.keys(serviceQuestionsData));\n            debugLog('Selected services', Object.keys(selectedServices));\n          } else {\n            debugLog('Service data is empty or invalid', serviceData);\n          }\n        } catch (error) {\n          console.error('Error loading service questions:', error);\n        }\n      } else {\n        console.warn('No services selected or invalid selectedServices format:', selectedServices);\n      }\n      debugLog(`Found service-specific questions`, serviceQuestions.length);\n\n      // Remove any potential duplicate questions by ID\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // First add core questions\n      coreQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      debugLog(`Total unique questions to display`, uniqueQuestions.length);\n      debugLog('Question IDs', Array.from(questionIds));\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (questionId, value) => {\n    // Save the answer\n    saveResponse(questionId, value);\n\n    // Log the answer being saved for debugging\n    debugLog(`Saving answer for question ${questionId}:`, value);\n\n    // Try to retrieve all saved answers\n    if (typeof getResponse === 'function') {\n      const allAnswers = {};\n      questions.forEach(q => {\n        const answer = getResponse(q.id);\n        if (answer !== undefined) {\n          allAnswers[q.id] = answer;\n        }\n      });\n      debugLog('Current saved answers:', allAnswers);\n    }\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = () => {\n    // Validate if the current question is answered\n    const currentQ = questions[currentQuestionIndex];\n    if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n      alert('Please answer this question before continuing');\n      return;\n    }\n    if (isLastQuestion) {\n      // Before completing, ensure selectedServices is stored in both context and responses\n      if (typeof getContext === 'function') {\n        const selectedServices = getContext('selectedServices');\n        if (selectedServices && typeof saveResponse === 'function') {\n          // Save as a response to ensure it's available in both places\n          saveResponse('selectedServices', selectedServices);\n          debugLog('Saved selectedServices to responses as backup', selectedServices);\n        }\n      }\n\n      // Move to the next stage using onComplete callback\n      if (onComplete) {\n        onComplete();\n      }\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      // Go back to the previous stage in the assessment flow\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress || 65,\n      stage: \"assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Organization Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question || currentQuestion.text, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${selectedValue === (option.value || option.score || index) ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value || option.score || index),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label || option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this), currentQuestion.insight && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionInsight,\n          children: currentQuestion.insight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }, this), currentQuestion.benchmark && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionBenchmark,\n          children: currentQuestion.benchmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${getResponse(questions[index].id) ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handlePrevious,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? handleSkip : null,\n      nextLabel: isLastQuestion ? \"Complete\" : \"Continue\",\n      showNext: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","Navigation","styles","jsxDEV","_jsxDEV","debugLog","message","data","console","log","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","setContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","coreQuestions","coreModule","coreData","default","Object","keys","Array","isArray","length","category","concat","key","error","serviceQuestions","selectedServices","servicesResponse","err","serviceData","serviceModule","activityModule","activityError","Error","serviceQuestionsData","activityQuestions","ALLOCATION_THRESHOLD","serviceIdMappings","forEach","serviceId","allocation","mappedCategories","foundQuestionsForService","mappedId","serviceObj","toLowerCase","includes","warn","uniqueQuestions","questionIds","Set","q","has","id","add","push","from","currentQuestion","isLastQuestion","handleAnswer","questionId","value","allAnswers","answer","undefined","setTimeout","handleNext","currentQ","required","alert","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","selectedValue","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","text","optionsGrid","options","map","option","index","optionButton","score","selected","optionLabel","label","insight","questionInsight","benchmark","questionBenchmark","questionDots","_","dot","active","answered","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nconst debugLog = (message, data) => {\n    console.log(`DEBUG - ${message}:`, data);\n};\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    getContext,\n    setContext, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            debugLog('Loading questions for assessment type', assessmentType);\n            \n            // Load core questions\n            let coreQuestions = [];\n            try {\n                const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n                const coreData = coreModule.default || coreModule;\n                \n                debugLog(`Core questions data structure:`, Object.keys(coreData));\n                \n                // Check for proper structure - either direct array or nested in coreQuestions property\n                if (coreData && Array.isArray(coreData)) {\n                    // Direct array structure\n                    coreQuestions = coreData;\n                    debugLog(`Loaded core questions (direct array):`, coreQuestions.length);\n                } else if (coreData && coreData.coreQuestions && Array.isArray(coreData.coreQuestions)) {\n                    // Nested structure with coreQuestions property as array\n                    coreQuestions = coreData.coreQuestions;\n                    debugLog(`Loaded core questions from coreQuestions property:`, coreQuestions.length);\n                } else if (coreData && coreData.coreQuestions && typeof coreData.coreQuestions === 'object') {\n                    // Handle nested structure with coreQuestions as object containing category arrays\n                    // Combine all question arrays from different categories\n                    coreQuestions = [];\n                    for (const category in coreData.coreQuestions) {\n                        if (Array.isArray(coreData.coreQuestions[category])) {\n                            coreQuestions = coreQuestions.concat(coreData.coreQuestions[category]);\n                            debugLog(`Added questions from category ${category}:`, coreData.coreQuestions[category].length);\n                        }\n                    }\n                    debugLog(`Combined questions from all categories:`, coreQuestions.length);\n                } else if (coreData && typeof coreData === 'object') {\n                    // Check for any array property that might contain questions\n                    for (const key in coreData) {\n                        if (Array.isArray(coreData[key])) {\n                            coreQuestions = coreData[key];\n                            debugLog(`Loaded core questions from ${key} property:`, coreQuestions.length);\n                            break;\n                        }\n                    }\n                }\n                \n                if (coreQuestions.length === 0) {\n                    debugLog(`Could not find questions array in core data structure:`, Object.keys(coreData));\n                }\n            } catch (error) {\n                console.error(`Error loading core questions for ${assessmentType}:`, error);\n            }\n            debugLog(`Loaded core questions`, coreQuestions.length);\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            \n            // Get selected services from context or responses with detailed logging\n            let selectedServices;\n            debugLog('Trying to get selectedServices', '');\n            try {\n                selectedServices = getContext('selectedServices');\n                debugLog('Retrieved selectedServices from context', selectedServices);\n                \n                // If not in context, try to get from responses\n                if (!selectedServices || Object.keys(selectedServices).length === 0) {\n                    const servicesResponse = getResponse('selectedServices');\n                    if (servicesResponse) {\n                        selectedServices = servicesResponse;\n                        debugLog('Retrieved selectedServices from responses', selectedServices);\n                    }\n                }\n            } catch (err) {\n                console.error('Error getting selectedServices:', err);\n            }\n            \n            if (selectedServices && Object.keys(selectedServices).length > 0) {\n                try {\n                    // Load service-specific questions - handle different file names based on assessment type\n                    let serviceData;\n                    \n                    try {\n                        // First try to load from service-questions.json (agency-vulnerability)\n                        debugLog(`Trying to load service questions from`, `../../assessments/${assessmentType}/service-questions.json`);\n                        const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                        serviceData = serviceModule.default || serviceModule;\n                        debugLog('Loaded service questions from service-questions.json', Object.keys(serviceData));\n                    } catch (error) {\n                        // If that fails, try activity-questions.json (inhouse-marketing)\n                        debugLog(`First attempt failed, trying activity-questions.json`, error.message);\n                        try {\n                            debugLog(`Loading activity questions from`, `../../assessments/${assessmentType}/activity-questions.json`);\n                            const activityModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n                            serviceData = activityModule.default || activityModule;\n                            debugLog('Loaded service questions from activity-questions.json', Object.keys(serviceData));\n                        } catch (activityError) {\n                            debugLog('Failed to load both service-questions.json and activity-questions.json', activityError.message);\n                            throw new Error(`Could not load questions for ${assessmentType}: ${activityError.message}`);\n                        }\n                    }\n                    \n                    // Check if the service data has the proper structure\n                    if (serviceData) {\n                        debugLog('Service questions data structure', Object.keys(serviceData));\n                        \n                        // Check if we have the expected nested structure with serviceQuestions or activityQuestions\n                        const serviceQuestionsData = serviceData.serviceQuestions || serviceData.activityQuestions || {};\n                        debugLog('Service/activity questions nested structure', Object.keys(serviceQuestionsData));\n                        \n                        // Threshold to determine if a service allocation is high enough to include questions\n                        // Lower threshold to 5% (0.05) to be more inclusive\n                        const ALLOCATION_THRESHOLD = 0.05;\n                        \n                        // Define mappings from selected service IDs to question categories\n                        // This helps match services that may have different naming\n                        const serviceIdMappings = {\n                            // Agency mappings\n                            'content_creation': ['content_creation', 'content_marketing'],\n                            'creative_design': ['content_creation', 'creative_design'],\n                            'digital_marketing': ['content_creation', 'digital_marketing'], \n                            'seo_sem': ['content_creation', 'seo_sem'],\n                            'pr_comms': ['content_creation', 'strategy_consulting', 'pr_comms'],\n                            'web_development': ['strategy_consulting', 'web_development'],\n                            'social_media': ['content_creation', 'social_media'],\n                            \n                            // Inhouse mappings - direct matches to activity names\n                            'content_marketing': ['content_marketing'],\n                            'email_marketing': ['email_marketing'],\n                            'paid_advertising': ['paid_advertising'],\n                            'analytics_data': ['analytics_data'],\n                            'marketing_automation': ['marketing_automation']\n                        };\n                        \n                        debugLog('Service ID mappings available', serviceIdMappings);\n                        debugLog('Assessment type for question loading', assessmentType);\n                        \n                        // Add service questions based on selected services\n                        Object.keys(selectedServices).forEach(serviceId => {\n                            const allocation = selectedServices[serviceId];\n                            \n                            if (allocation >= ALLOCATION_THRESHOLD) {\n                                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold ${ALLOCATION_THRESHOLD}`, '');\n                                \n                                // Get the mapped question categories for this service ID\n                                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n                                \n                                // Process each mapped category\n                                let foundQuestionsForService = false;\n                                \n                                mappedCategories.forEach(mappedId => {\n                                    // Direct matching in the serviceQuestions object\n                                    if (serviceQuestionsData[mappedId]) {\n                                        const serviceObj = serviceQuestionsData[mappedId];\n                                        // Handle both structures: service-questions has a nested 'questions' array,\n                                        // while activity-questions has direct arrays\n                                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                            // Handle service-questions.json structure\n                                            debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId} (nested structure)`, serviceObj);\n                                            serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                            foundQuestionsForService = true;\n                                        } else if (Array.isArray(serviceObj)) {\n                                            // Handle activity-questions.json structure where the questions are directly in an array\n                                            debugLog(`Found ${serviceObj.length} questions for service ID ${mappedId} (direct array)`, serviceObj);\n                                            serviceQuestions = [...serviceQuestions, ...serviceObj];\n                                            foundQuestionsForService = true;\n                                        } else {\n                                            debugLog(`Service ${mappedId} exists but has no questions array or is not an array itself`, serviceObj);\n                                        }\n                                    } else {\n                                        // Try matching by partial service name in keys\n                                        Object.keys(serviceQuestionsData).forEach(key => {\n                                            // Check if the key contains or matches the service ID\n                                            if (\n                                                key.toLowerCase().includes(mappedId.toLowerCase()) || \n                                                mappedId.toLowerCase().includes(key.toLowerCase())\n                                            ) {\n                                                const serviceObj = serviceQuestionsData[key];\n                                                // Handle both structures: service-questions has a nested 'questions' array,\n                                                // while activity-questions has direct arrays\n                                                if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                                    // Handle service-questions.json structure\n                                                    debugLog(`Found ${serviceObj.questions.length} questions for similar key ${key} matching ${mappedId} (nested structure)`, '');\n                                                    serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                                    foundQuestionsForService = true;\n                                                } else if (Array.isArray(serviceObj)) {\n                                                    // Handle activity-questions.json structure\n                                                    debugLog(`Found ${serviceObj.length} questions for similar key ${key} matching ${mappedId} (direct array)`, '');\n                                                    serviceQuestions = [...serviceQuestions, ...serviceObj];\n                                                    foundQuestionsForService = true;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                \n                                if (!foundQuestionsForService) {\n                                    debugLog(`Could not find any questions for service ${serviceId}`, '');\n                                }\n                            } else {\n                                debugLog(`Service ${serviceId} allocation ${allocation} below threshold ${ALLOCATION_THRESHOLD}`, '');\n                            }\n                        });\n                        \n                        // Additional debugging info\n                        debugLog('Services in question data', Object.keys(serviceQuestionsData));\n                        debugLog('Selected services', Object.keys(selectedServices));\n                    } else {\n                        debugLog('Service data is empty or invalid', serviceData);\n                    }\n                } catch (error) {\n                    console.error('Error loading service questions:', error);\n                }\n            } else {\n                console.warn('No services selected or invalid selectedServices format:', selectedServices);\n            }\n            \n            debugLog(`Found service-specific questions`, serviceQuestions.length);\n            \n            // Remove any potential duplicate questions by ID\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // First add core questions\n            coreQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            debugLog(`Total unique questions to display`, uniqueQuestions.length);\n            debugLog('Question IDs', Array.from(questionIds));\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (questionId, value) => {\n        // Save the answer\n        saveResponse(questionId, value);\n        \n        // Log the answer being saved for debugging\n        debugLog(`Saving answer for question ${questionId}:`, value);\n        \n        // Try to retrieve all saved answers\n        if (typeof getResponse === 'function') {\n            const allAnswers = {};\n            questions.forEach(q => {\n                const answer = getResponse(q.id);\n                if (answer !== undefined) {\n                    allAnswers[q.id] = answer;\n                }\n            });\n            debugLog('Current saved answers:', allAnswers);\n        }\n        \n        // Auto-advance to next question after a short delay\n        setTimeout(() => {\n            if (currentQuestionIndex < questions.length - 1) {\n                setCurrentQuestionIndex(currentQuestionIndex + 1);\n            }\n        }, 300);\n    };\n\n    const handleNext = () => {\n        // Validate if the current question is answered\n        const currentQ = questions[currentQuestionIndex];\n        if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n            alert('Please answer this question before continuing');\n            return;\n        }\n        \n        if (isLastQuestion) {\n            // Before completing, ensure selectedServices is stored in both context and responses\n            if (typeof getContext === 'function') {\n                const selectedServices = getContext('selectedServices');\n                if (selectedServices && typeof saveResponse === 'function') {\n                    // Save as a response to ensure it's available in both places\n                    saveResponse('selectedServices', selectedServices);\n                    debugLog('Saved selectedServices to responses as backup', selectedServices);\n                }\n            }\n            \n            // Move to the next stage using onComplete callback\n            if (onComplete) {\n                onComplete();\n            }\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.qualifyingContainer}>\n            <ProgressBar progress={progress || 65} stage=\"assessment\" />\n            \n            <div className={styles.questionContainer}>\n                <div className={styles.questionHeader}>\n                    <h2>Your Organization Assessment</h2>\n                    <p className={styles.questionNumber}>\n                        Question {currentQuestionIndex + 1} of {questions.length}\n                    </p>\n                </div>\n\n                {currentQuestion && (\n                    <div className={styles.questionContent}>\n                        <h3 className={styles.questionText}>\n                            {currentQuestion.question || currentQuestion.text}\n                            {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n                        </h3>\n                        \n                        <div className={styles.optionsGrid}>\n                            {currentQuestion.options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    className={`${styles.optionButton} ${\n                                        selectedValue === (option.value || option.score || index) ? styles.selected : ''\n                                    }`}\n                                    onClick={() => handleAnswer(currentQuestion.id, option.value || option.score || index)}\n                                >\n                                    <span className={styles.optionLabel}>{option.label || option.text}</span>\n                                </button>\n                            ))}\n                        </div>\n                        \n                        {currentQuestion.insight && (\n                            <p className={styles.questionInsight}>{currentQuestion.insight}</p>\n                        )}\n                        \n                        {currentQuestion.benchmark && (\n                            <p className={styles.questionBenchmark}>{currentQuestion.benchmark}</p>\n                        )}\n                    </div>\n                )}\n\n                {/* Question navigation dots */}\n                <div className={styles.questionDots}>\n                    {questions.map((_, index) => (\n                        <button\n                            key={index}\n                            className={`${styles.dot} ${\n                                index === currentQuestionIndex ? styles.active : ''\n                            } ${getResponse(questions[index].id) ? styles.answered : ''}`}\n                            onClick={() => setCurrentQuestionIndex(index)}\n                            aria-label={`Go to question ${index + 1}`}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <Navigation\n                onBack={handlePrevious}\n                onNext={handleNext}\n                onSkip={currentQuestion?.required === false ? handleSkip : null}\n                nextLabel={isLastQuestion ? \"Complete\" : \"Continue\"}\n                showNext={true}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}