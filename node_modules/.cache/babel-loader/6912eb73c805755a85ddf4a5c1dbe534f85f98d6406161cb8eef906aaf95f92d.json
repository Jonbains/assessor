{"ast":null,"code":"export class AssessmentEngine {\n  constructor(assessmentType) {\n    this.assessmentType = assessmentType;\n    this.config = null;\n    this.flow = null;\n    this.data = null;\n    this.scoring = null;\n  }\n  async initialize() {\n    // Load assessment module configuration\n    this.config = await this.loadAssessmentModule(this.assessmentType);\n\n    // Initialize sub-components\n    const {\n      FlowController\n    } = await import('./FlowController.js');\n    const {\n      DataManager\n    } = await import('./DataManager.js');\n    const {\n      ScoringEngine\n    } = await import('./ScoringEngine.js');\n    this.flow = new FlowController(this.config);\n    this.data = new DataManager();\n    this.scoring = new ScoringEngine(this.config.scoring);\n\n    // Start the flow\n    this.flow.start();\n  }\n  async loadAssessmentModule(type) {\n    // Dynamically load assessment configuration\n    const configPath = `/assessments/${type}/config.json`;\n    const response = await fetch(configPath);\n    return await response.json();\n  }\n  async nextStage() {\n    const currentStage = this.flow.getCurrentStage();\n    await this.saveProgress();\n    return this.flow.advance();\n  }\n  async previousStage() {\n    return this.flow.goBack();\n  }\n  async saveProgress() {\n    const progress = {\n      assessmentType: this.assessmentType,\n      currentStage: this.flow.getCurrentStage(),\n      responses: this.data.getResponses(),\n      timestamp: new Date().toISOString()\n    };\n\n    // Save to localStorage for now, Firebase later\n    localStorage.setItem('assessment_progress', JSON.stringify(progress));\n  }\n  async loadProgress() {\n    const saved = localStorage.getItem('assessment_progress');\n    if (saved) {\n      const progress = JSON.parse(saved);\n      this.data.setResponses(progress.responses);\n      this.flow.setStage(progress.currentStage);\n      return progress;\n    }\n    return null;\n  }\n  calculateResults() {\n    const responses = this.data.getResponses();\n    const context = this.data.getContext();\n    return this.scoring.calculate(responses, context);\n  }\n  getRelevantQuestions() {\n    return this.flow.getRelevantQuestions(this.data);\n  }\n  saveResponse(questionId, value) {\n    this.data.saveResponse(questionId, value);\n  }\n  getResponse(questionId) {\n    return this.data.getResponse(questionId);\n  }\n  getAllResponses() {\n    return this.data.getResponses();\n  }\n  getContext() {\n    return this.data.getContext();\n  }\n  setContext(key, value) {\n    this.data.setContext(key, value);\n  }\n  getProgress() {\n    return this.flow.getProgress();\n  }\n  isComplete() {\n    return this.flow.isComplete();\n  }\n  reset() {\n    this.data.reset();\n    this.flow.reset();\n    localStorage.removeItem('assessment_progress');\n  }\n}\nexport default AssessmentEngine;","map":{"version":3,"names":["AssessmentEngine","constructor","assessmentType","config","flow","data","scoring","initialize","loadAssessmentModule","FlowController","DataManager","ScoringEngine","start","type","configPath","response","fetch","json","nextStage","currentStage","getCurrentStage","saveProgress","advance","previousStage","goBack","progress","responses","getResponses","timestamp","Date","toISOString","localStorage","setItem","JSON","stringify","loadProgress","saved","getItem","parse","setResponses","setStage","calculateResults","context","getContext","calculate","getRelevantQuestions","saveResponse","questionId","value","getResponse","getAllResponses","setContext","key","getProgress","isComplete","reset","removeItem"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/AssessmentEngine.js"],"sourcesContent":["\nexport class AssessmentEngine {\n    constructor(assessmentType) {\n        this.assessmentType = assessmentType;\n        this.config = null;\n        this.flow = null;\n        this.data = null;\n        this.scoring = null;\n    }\n\n    async initialize() {\n        // Load assessment module configuration\n        this.config = await this.loadAssessmentModule(this.assessmentType);\n        \n        // Initialize sub-components\n        const { FlowController } = await import('./FlowController.js');\n        const { DataManager } = await import('./DataManager.js');\n        const { ScoringEngine } = await import('./ScoringEngine.js');\n        \n        this.flow = new FlowController(this.config);\n        this.data = new DataManager();\n        this.scoring = new ScoringEngine(this.config.scoring);\n        \n        // Start the flow\n        this.flow.start();\n    }\n\n    async loadAssessmentModule(type) {\n        // Dynamically load assessment configuration\n        const configPath = `/assessments/${type}/config.json`;\n        const response = await fetch(configPath);\n        return await response.json();\n    }\n\n    async nextStage() {\n        const currentStage = this.flow.getCurrentStage();\n        await this.saveProgress();\n        return this.flow.advance();\n    }\n\n    async previousStage() {\n        return this.flow.goBack();\n    }\n\n    async saveProgress() {\n        const progress = {\n            assessmentType: this.assessmentType,\n            currentStage: this.flow.getCurrentStage(),\n            responses: this.data.getResponses(),\n            timestamp: new Date().toISOString()\n        };\n        \n        // Save to localStorage for now, Firebase later\n        localStorage.setItem('assessment_progress', JSON.stringify(progress));\n    }\n\n    async loadProgress() {\n        const saved = localStorage.getItem('assessment_progress');\n        if (saved) {\n            const progress = JSON.parse(saved);\n            this.data.setResponses(progress.responses);\n            this.flow.setStage(progress.currentStage);\n            return progress;\n        }\n        return null;\n    }\n\n    calculateResults() {\n        const responses = this.data.getResponses();\n        const context = this.data.getContext();\n        return this.scoring.calculate(responses, context);\n    }\n\n    getRelevantQuestions() {\n        return this.flow.getRelevantQuestions(this.data);\n    }\n\n    saveResponse(questionId, value) {\n        this.data.saveResponse(questionId, value);\n    }\n\n    getResponse(questionId) {\n        return this.data.getResponse(questionId);\n    }\n\n    getAllResponses() {\n        return this.data.getResponses();\n    }\n\n    getContext() {\n        return this.data.getContext();\n    }\n\n    setContext(key, value) {\n        this.data.setContext(key, value);\n    }\n\n    getProgress() {\n        return this.flow.getProgress();\n    }\n\n    isComplete() {\n        return this.flow.isComplete();\n    }\n\n    reset() {\n        this.data.reset();\n        this.flow.reset();\n        localStorage.removeItem('assessment_progress');\n    }\n}\n\nexport default AssessmentEngine;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}