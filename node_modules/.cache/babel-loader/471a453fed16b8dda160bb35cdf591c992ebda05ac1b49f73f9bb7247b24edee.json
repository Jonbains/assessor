{"ast":null,"code":"import React,{useEffect}from'react';import{useParams,useNavigate,Routes,Route,Navigate}from'react-router-dom';import{useAssessment}from'../core/hooks/useAssessment';import SectorSelector from'../core/components/SectorSelector';import QualifyingQuestions from'../core/components/QualifyingQuestions';import ServiceSelector from'../core/components/ServiceSelector';import DynamicQuestions from'../core/components/DynamicQuestions';import EmailGate from'../core/components/EmailGate';import ResultsDashboard from'../core/components/ResultsDashboard';import LoadingSpinner from'../core/components/LoadingSpinner';import ErrorMessage from'../core/components/ErrorMessage';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AssessmentFlow(){const{type}=useParams();const navigate=useNavigate();const{loading,error,currentStage,progress,nextStage,previousStage,saveResponse,getResponse,setContext,calculateResults,reset}=useAssessment(type);useEffect(()=>{// Handle stage navigation\nif(currentStage){navigate(currentStage);}},[currentStage,navigate]);if(loading)return/*#__PURE__*/_jsx(LoadingSpinner,{});if(error)return/*#__PURE__*/_jsx(ErrorMessage,{message:error});return/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{index:true,element:/*#__PURE__*/_jsx(Navigate,{to:\"sector\",replace:true})}),/*#__PURE__*/_jsx(Route,{path:\"sector\",element:/*#__PURE__*/_jsx(SectorSelector,{assessmentType:type,onSelect:sector=>{setContext('sector',sector);nextStage();},onBack:previousStage})}),/*#__PURE__*/_jsx(Route,{path:\"qualifying\",element:/*#__PURE__*/_jsx(QualifyingQuestions,{assessmentType:type,saveResponse:saveResponse,getResponse:getResponse,onComplete:nextStage,onBack:previousStage})}),/*#__PURE__*/_jsx(Route,{path:\"services\",element:/*#__PURE__*/_jsx(ServiceSelector,{assessmentType:type,onSelect:services=>{setContext('selectedServices',services);nextStage();},onBack:previousStage})}),/*#__PURE__*/_jsx(Route,{path:\"questions\",element:/*#__PURE__*/_jsx(DynamicQuestions,{assessmentType:type,saveResponse:saveResponse,getResponse:getResponse,onComplete:nextStage,onBack:previousStage,progress:progress})}),/*#__PURE__*/_jsx(Route,{path:\"email\",element:/*#__PURE__*/_jsx(EmailGate,{onSubmit:formData=>{setContext('contact',formData);nextStage();}})}),/*#__PURE__*/_jsx(Route,{path:\"results\",element:/*#__PURE__*/_jsx(ResultsDashboard,{assessmentType:type,calculateResults:calculateResults,onRestart:reset})})]});}export default AssessmentFlow;","map":{"version":3,"names":["React","useEffect","useParams","useNavigate","Routes","Route","Navigate","useAssessment","SectorSelector","QualifyingQuestions","ServiceSelector","DynamicQuestions","EmailGate","ResultsDashboard","LoadingSpinner","ErrorMessage","jsx","_jsx","jsxs","_jsxs","AssessmentFlow","type","navigate","loading","error","currentStage","progress","nextStage","previousStage","saveResponse","getResponse","setContext","calculateResults","reset","message","children","index","element","to","replace","path","assessmentType","onSelect","sector","onBack","onComplete","services","onSubmit","formData","onRestart"],"sources":["/Users/jon/Documents/GitHub/assessor/src/app/AssessmentFlow.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, useNavigate, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAssessment } from '../core/hooks/useAssessment';\nimport SectorSelector from '../core/components/SectorSelector';\nimport QualifyingQuestions from '../core/components/QualifyingQuestions';\nimport ServiceSelector from '../core/components/ServiceSelector';\nimport DynamicQuestions from '../core/components/DynamicQuestions';\nimport EmailGate from '../core/components/EmailGate';\nimport ResultsDashboard from '../core/components/ResultsDashboard';\nimport LoadingSpinner from '../core/components/LoadingSpinner';\nimport ErrorMessage from '../core/components/ErrorMessage';\n\nfunction AssessmentFlow() {\n    const { type } = useParams();\n    const navigate = useNavigate();\n    const {\n        loading,\n        error,\n        currentStage,\n        progress,\n        nextStage,\n        previousStage,\n        saveResponse,\n        getResponse,\n        setContext,\n        calculateResults,\n        reset\n    } = useAssessment(type);\n\n    useEffect(() => {\n        // Handle stage navigation\n        if (currentStage) {\n            navigate(currentStage);\n        }\n    }, [currentStage, navigate]);\n\n    if (loading) return <LoadingSpinner />;\n    if (error) return <ErrorMessage message={error} />;\n\n    return (\n        <Routes>\n            {/* Default route - redirect to sector selection when just /assessment/:type is accessed */}\n            <Route index element={<Navigate to=\"sector\" replace />} />\n            <Route path=\"sector\" element={\n                <SectorSelector \n                    assessmentType={type}\n                    onSelect={(sector) => {\n                        setContext('sector', sector);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"qualifying\" element={\n                <QualifyingQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    onComplete={nextStage}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"services\" element={\n                <ServiceSelector \n                    assessmentType={type}\n                    onSelect={(services) => {\n                        setContext('selectedServices', services);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"questions\" element={\n                <DynamicQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    onComplete={nextStage}\n                    onBack={previousStage}\n                    progress={progress}\n                />\n            } />\n            \n            <Route path=\"email\" element={\n                <EmailGate \n                    onSubmit={(formData) => {\n                        setContext('contact', formData);\n                        nextStage();\n                    }}\n                />\n            } />\n            \n            <Route path=\"results\" element={\n                <ResultsDashboard \n                    assessmentType={type}\n                    calculateResults={calculateResults}\n                    onRestart={reset}\n                />\n            } />\n        </Routes>\n    );\n}\n\nexport default AssessmentFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}