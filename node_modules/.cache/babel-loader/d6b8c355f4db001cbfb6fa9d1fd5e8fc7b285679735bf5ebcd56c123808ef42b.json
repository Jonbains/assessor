{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/app/AssessmentFlow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useParams, useNavigate, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAssessment } from '../core/hooks/useAssessment';\nimport SectorSelector from '../core/components/SectorSelector';\nimport QualifyingQuestions from '../core/components/QualifyingQuestions';\nimport ServiceSelector from '../core/components/ServiceSelector';\nimport DynamicQuestions from '../core/components/DynamicQuestions';\nimport EmailGate from '../core/components/EmailGate';\nimport ResultsDashboard from '../core/components/ResultsDashboard';\nimport LoadingSpinner from '../core/components/LoadingSpinner';\nimport ErrorMessage from '../core/components/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AssessmentFlow() {\n  _s();\n  const {\n    type\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    loading,\n    error,\n    currentStage,\n    progress,\n    nextStage,\n    previousStage,\n    saveResponse,\n    getResponse,\n    setContext,\n    calculateResults,\n    reset\n  } = useAssessment(type);\n  useEffect(() => {\n    // Handle stage navigation\n    if (currentStage) {\n      navigate(currentStage);\n    }\n  }, [currentStage, navigate]);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"sector\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"sector\",\n      element: /*#__PURE__*/_jsxDEV(SectorSelector, {\n        assessmentType: type,\n        onSelect: sector => {\n          setContext('sector', sector);\n          nextStage();\n        },\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"qualifying\",\n      element: /*#__PURE__*/_jsxDEV(QualifyingQuestions, {\n        assessmentType: type,\n        saveResponse: saveResponse,\n        getResponse: getResponse,\n        onComplete: nextStage,\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"services\",\n      element: /*#__PURE__*/_jsxDEV(ServiceSelector, {\n        assessmentType: type,\n        onSelect: services => {\n          setContext('selectedServices', services);\n          nextStage();\n        },\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"questions\",\n      element: /*#__PURE__*/_jsxDEV(DynamicQuestions, {\n        assessmentType: type,\n        saveResponse: saveResponse,\n        getResponse: getResponse,\n        onComplete: nextStage,\n        onBack: previousStage,\n        progress: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"email\",\n      element: /*#__PURE__*/_jsxDEV(EmailGate, {\n        onSubmit: formData => {\n          setContext('contact', formData);\n          nextStage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"results\",\n      element: /*#__PURE__*/_jsxDEV(ResultsDashboard, {\n        assessmentType: type,\n        calculateResults: calculateResults,\n        onRestart: reset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(AssessmentFlow, \"YpB4/Z8vT3mlez4oCnWnUmD1IXM=\", false, function () {\n  return [useParams, useNavigate, useAssessment];\n});\n_c = AssessmentFlow;\nexport default AssessmentFlow;\nvar _c;\n$RefreshReg$(_c, \"AssessmentFlow\");","map":{"version":3,"names":["React","useEffect","useParams","useNavigate","Routes","Route","Navigate","useAssessment","SectorSelector","QualifyingQuestions","ServiceSelector","DynamicQuestions","EmailGate","ResultsDashboard","LoadingSpinner","ErrorMessage","jsxDEV","_jsxDEV","AssessmentFlow","_s","type","navigate","loading","error","currentStage","progress","nextStage","previousStage","saveResponse","getResponse","setContext","calculateResults","reset","fileName","_jsxFileName","lineNumber","columnNumber","message","children","index","element","to","replace","path","assessmentType","onSelect","sector","onBack","onComplete","services","onSubmit","formData","onRestart","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/app/AssessmentFlow.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, useNavigate, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAssessment } from '../core/hooks/useAssessment';\nimport SectorSelector from '../core/components/SectorSelector';\nimport QualifyingQuestions from '../core/components/QualifyingQuestions';\nimport ServiceSelector from '../core/components/ServiceSelector';\nimport DynamicQuestions from '../core/components/DynamicQuestions';\nimport EmailGate from '../core/components/EmailGate';\nimport ResultsDashboard from '../core/components/ResultsDashboard';\nimport LoadingSpinner from '../core/components/LoadingSpinner';\nimport ErrorMessage from '../core/components/ErrorMessage';\n\nfunction AssessmentFlow() {\n    const { type } = useParams();\n    const navigate = useNavigate();\n    const {\n        loading,\n        error,\n        currentStage,\n        progress,\n        nextStage,\n        previousStage,\n        saveResponse,\n        getResponse,\n        setContext,\n        calculateResults,\n        reset\n    } = useAssessment(type);\n\n    useEffect(() => {\n        // Handle stage navigation\n        if (currentStage) {\n            navigate(currentStage);\n        }\n    }, [currentStage, navigate]);\n\n    if (loading) return <LoadingSpinner />;\n    if (error) return <ErrorMessage message={error} />;\n\n    return (\n        <Routes>\n            {/* Default route - redirect to sector selection when just /assessment/:type is accessed */}\n            <Route index element={<Navigate to=\"sector\" replace />} />\n            <Route path=\"sector\" element={\n                <SectorSelector \n                    assessmentType={type}\n                    onSelect={(sector) => {\n                        setContext('sector', sector);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"qualifying\" element={\n                <QualifyingQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    onComplete={nextStage}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"services\" element={\n                <ServiceSelector \n                    assessmentType={type}\n                    onSelect={(services) => {\n                        setContext('selectedServices', services);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"questions\" element={\n                <DynamicQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    onComplete={nextStage}\n                    onBack={previousStage}\n                    progress={progress}\n                />\n            } />\n            \n            <Route path=\"email\" element={\n                <EmailGate \n                    onSubmit={(formData) => {\n                        setContext('contact', formData);\n                        nextStage();\n                    }}\n                />\n            } />\n            \n            <Route path=\"results\" element={\n                <ResultsDashboard \n                    assessmentType={type}\n                    calculateResults={calculateResults}\n                    onRestart={reset}\n                />\n            } />\n        </Routes>\n    );\n}\n\nexport default AssessmentFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}