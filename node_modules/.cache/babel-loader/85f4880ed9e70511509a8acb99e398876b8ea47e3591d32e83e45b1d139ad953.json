{"ast":null,"code":"/**\n * In-House Marketing Scoring Engine\n * \n * Calculates readiness scores for in-house marketing teams\n * considering their unique constraints and opportunities\n */\n\nexport class InhouseMarketingScoring {\n  constructor(config = {}) {\n    this.config = config;\n\n    // Dimension weights for overall score\n    this.dimensionWeights = {\n      humanReadiness: 0.4,\n      // Champions, leadership, resources\n      technicalReadiness: 0.3,\n      // Current capabilities\n      activityAutomation: 0.3 // Potential in their activities\n    };\n\n    // Category weights within dimensions\n    this.categoryWeights = {\n      champions: 0.35,\n      resources: 0.30,\n      leadership: 0.35,\n      readiness: 1.0 // Single category for technical\n    };\n\n    // Company size modifiers\n    this.sizeModifiers = {\n      solo: {\n        scoreBoost: 1.1,\n        // Solo marketers get boost for any progress\n        timeValue: 50,\n        // £/hour value\n        focusAreas: [\"efficiency\", \"quick_wins\"],\n        budgetRange: \"0-100\",\n        benchmarks: {\n          low: 25,\n          average: 40,\n          high: 65\n        }\n      },\n      small: {\n        scoreBoost: 1.0,\n        // No modifier\n        timeValue: 150,\n        // Team of 3 at £50/hour\n        focusAreas: [\"collaboration\", \"scalability\"],\n        budgetRange: \"100-500\",\n        benchmarks: {\n          low: 35,\n          average: 50,\n          high: 75\n        }\n      },\n      medium: {\n        scoreBoost: 0.9,\n        // Need higher capability for same score\n        timeValue: 400,\n        // Team of 8 at £50/hour\n        focusAreas: [\"transformation\", \"competitive_advantage\"],\n        budgetRange: \"500-2000\",\n        benchmarks: {\n          low: 45,\n          average: 60,\n          high: 85\n        }\n      }\n    };\n\n    // Activity impact scores (how much AI can help)\n    this.activityImpact = {\n      content_marketing: {\n        automationPotential: 85,\n        timesSavings: 70,\n        difficultyToImplement: 20,\n        quickWinPotential: 95\n      },\n      social_media: {\n        automationPotential: 75,\n        timesSavings: 60,\n        difficultyToImplement: 30,\n        quickWinPotential: 85\n      },\n      email_marketing: {\n        automationPotential: 70,\n        timesSavings: 50,\n        difficultyToImplement: 25,\n        quickWinPotential: 80\n      },\n      seo_sem: {\n        automationPotential: 65,\n        timesSavings: 40,\n        difficultyToImplement: 45,\n        quickWinPotential: 70\n      },\n      analytics_data: {\n        automationPotential: 90,\n        timesSavings: 85,\n        difficultyToImplement: 35,\n        quickWinPotential: 90\n      },\n      paid_advertising: {\n        automationPotential: 70,\n        timesSavings: 50,\n        difficultyToImplement: 40,\n        quickWinPotential: 75\n      },\n      creative_design: {\n        automationPotential: 60,\n        timesSavings: 40,\n        difficultyToImplement: 50,\n        quickWinPotential: 65\n      },\n      marketing_automation: {\n        automationPotential: 80,\n        timesSavings: 60,\n        difficultyToImplement: 55,\n        quickWinPotential: 70\n      }\n    };\n  }\n\n  /**\n   * Main scoring method\n   * @param {Object} answers - All question answers\n   * @param {Object} metadata - Company size, selected activities, etc.\n   * @returns {Object} Complete scoring results\n   */\n  calculateScores(answers, metadata) {\n    const {\n      companySize = 'small',\n      selectedActivities = [],\n      sector\n    } = metadata;\n\n    // Calculate category scores\n    const categoryScores = this.calculateCategoryScores(answers);\n\n    // Calculate dimension scores\n    const dimensionScores = this.calculateDimensionScores(categoryScores);\n\n    // Calculate activity-specific scores\n    const activityScores = this.calculateActivityScores(answers, selectedActivities);\n\n    // Calculate overall readiness\n    const overallScore = this.calculateOverallScore(dimensionScores, activityScores);\n\n    // Apply size modifiers\n    const adjustedScore = this.applySizeModifiers(overallScore, companySize);\n\n    // Calculate specific insights\n    const insights = this.generateInsights(categoryScores, activityScores, answers);\n\n    // Determine readiness level and recommendations\n    const readinessLevel = this.getReadinessLevel(adjustedScore, companySize);\n    const marketPosition = this.getMarketPosition(adjustedScore, companySize);\n\n    // Calculate time and cost savings potential\n    const savingsPotential = this.calculateSavingsPotential(activityScores, selectedActivities, companySize);\n\n    // Identify transformation priorities\n    const priorities = this.identifyPriorities(categoryScores, activityScores, selectedActivities, companySize);\n    return {\n      overall: Math.round(adjustedScore),\n      dimensions: {\n        humanReadiness: Math.round(dimensionScores.humanReadiness),\n        technicalReadiness: Math.round(dimensionScores.technicalReadiness),\n        activityAutomation: Math.round(dimensionScores.activityAutomation)\n      },\n      categoryScores: {\n        champions: Math.round(categoryScores.champions),\n        resources: Math.round(categoryScores.resources),\n        leadership: Math.round(categoryScores.leadership),\n        readiness: Math.round(categoryScores.readiness)\n      },\n      activityScores: activityScores,\n      readinessLevel: readinessLevel,\n      marketPosition: marketPosition,\n      savingsPotential: savingsPotential,\n      priorities: priorities,\n      insights: insights,\n      companySize: companySize,\n      selectedActivities: selectedActivities,\n      sector: sector,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Calculate category scores from raw answers\n   */\n  calculateCategoryScores(answers) {\n    const categories = {\n      champions: [],\n      resources: [],\n      leadership: [],\n      readiness: []\n    };\n\n    // Process each answer\n    Object.entries(answers).forEach(([questionId, answer]) => {\n      // Extract score value\n      const score = typeof answer === 'object' ? answer.score || answer.value || 0 : answer;\n\n      // Categorize based on question ID\n      if (questionId.includes('champion') || questionId.includes('knowledge') || questionId.includes('experimentation') || questionId.includes('tool_discovery') || questionId.includes('change_adoption')) {\n        categories.champions.push(score);\n      } else if (questionId.includes('time_availability') || questionId.includes('budget') || questionId.includes('current_pain') || questionId.includes('tech_complexity') || questionId.includes('capacity')) {\n        categories.resources.push(score);\n      } else if (questionId.includes('leadership') || questionId.includes('decision') || questionId.includes('success_metrics') || questionId.includes('transformation_ownership') || questionId.includes('risk_tolerance')) {\n        categories.leadership.push(score);\n      } else if (questionId.includes('current_ai_usage') || questionId.includes('data_quality')) {\n        categories.readiness.push(score);\n      }\n    });\n\n    // Calculate category averages\n    return {\n      champions: categories.champions.length > 0 ? categories.champions.reduce((sum, score) => sum + score, 0) / categories.champions.length * 25 : 50,\n      resources: categories.resources.length > 0 ? categories.resources.reduce((sum, score) => sum + score, 0) / categories.resources.length * 25 : 50,\n      leadership: categories.leadership.length > 0 ? categories.leadership.reduce((sum, score) => sum + score, 0) / categories.leadership.length * 25 : 50,\n      readiness: categories.readiness.length > 0 ? categories.readiness.reduce((sum, score) => sum + score, 0) / categories.readiness.length * 25 : 50\n    };\n  }\n\n  /**\n   * Calculate overall readiness score\n   */\n  calculateOverallScore(dimensionScores, activityScores) {\n    // Calculate average activity score\n    const activityValues = Object.values(activityScores);\n    const avgActivityScore = activityValues.length > 0 ? activityValues.reduce((sum, activity) => sum + activity.currentCapability, 0) / activityValues.length : 50;\n    dimensionScores.activityAutomation = avgActivityScore;\n\n    // Weighted combination\n    const overallScore = dimensionScores.humanReadiness * this.dimensionWeights.humanReadiness + dimensionScores.technicalReadiness * this.dimensionWeights.technicalReadiness + avgActivityScore * this.dimensionWeights.activityAutomation;\n    return overallScore;\n  }\n\n  /**\n   * Apply company size modifiers\n   */\n  applySizeModifiers(score, companySize) {\n    const modifier = this.sizeModifiers[companySize];\n    if (!modifier) return score;\n\n    // Apply boost/penalty based on company size\n    let adjustedScore = score * modifier.scoreBoost;\n\n    // Additional adjustments based on size-specific factors\n    if (companySize === 'solo' && score > 30) {\n      // Solo marketers get extra credit for any progress\n      adjustedScore += 5;\n    } else if (companySize === 'medium' && score < 50) {\n      // Medium teams need more capability for same readiness\n      adjustedScore -= 5;\n    }\n\n    // Keep within 0-100 bounds\n    return Math.max(0, Math.min(100, adjustedScore));\n  }\n\n  /**\n   * Get question weights for category\n   */\n  getQuestionWeights(category, answers) {\n    // Return weights based on question importance\n    // This could be expanded to use question metadata\n    const weights = {\n      champions: [1.5, 1.2, 1.3, 1.0, 1.1],\n      // Champion identification most important\n      resources: [1.3, 1.2, 1.1, 1.0, 1.2],\n      // Time availability most important\n      leadership: [1.5, 1.0, 1.2, 1.3, 1.1],\n      // Leadership attitude most important\n      readiness: [1.2, 1.1, 1.1, 1.2, 1.0] // Current AI usage most important\n    };\n    return weights[category];\n  }\n\n  /**\n   * Get readiness level based on score and company size\n   */\n  getReadinessLevel(score, companySize) {\n    // Get benchmarks for company size\n    const benchmarks = this.sizeModifiers[companySize].benchmarks;\n    let level, description, nextSteps;\n    if (score >= benchmarks.high) {\n      level = 'high';\n      description = 'Transformation Ready';\n      nextSteps = 'Your team is ready to accelerate AI adoption';\n    } else if (score >= benchmarks.average) {\n      level = 'medium';\n      description = 'Building Capability';\n      nextSteps = 'Good foundation with room for growth';\n    } else if (score >= benchmarks.low) {\n      level = 'low';\n      description = 'Early Stage';\n      nextSteps = 'Starting the journey with quick wins';\n    } else {\n      level = 'critical';\n      description = 'Urgent Action Needed';\n      nextSteps = 'Significant gap to close quickly';\n    }\n\n    // Calculate percentile based on score and company size benchmarks\n    const calculatePercentile = (score, companySize) => {\n      const benchmarks = this.sizeModifiers[companySize].benchmarks;\n      if (score < benchmarks.low) {\n        // Below low benchmark - map from 0 to low benchmark as 0-25th percentile\n        return Math.round(score / benchmarks.low * 25);\n      } else if (score < benchmarks.average) {\n        // Between low and average - map to 25-50th percentile\n        return Math.round(25 + (score - benchmarks.low) / (benchmarks.average - benchmarks.low) * 25);\n      } else if (score < benchmarks.high) {\n        // Between average and high - map to 50-75th percentile\n        return Math.round(50 + (score - benchmarks.average) / (benchmarks.high - benchmarks.average) * 25);\n      } else {\n        // Above high benchmark - map to 75-100th percentile\n        const remaining = 100 - benchmarks.high;\n        const overshoot = score - benchmarks.high;\n        return Math.min(100, Math.round(75 + overshoot / remaining * 25));\n      }\n    };\n    return {\n      score: Math.round(score),\n      level,\n      description,\n      nextSteps,\n      percentile: calculatePercentile(score, companySize)\n    };\n  }\n\n  /**\n   * Get market position\n   */\n  getMarketPosition(score, companySize) {\n    // Get benchmarks for company size\n    const benchmarks = this.sizeModifiers[companySize].benchmarks;\n    let percentile;\n    if (score >= benchmarks.high) {\n      percentile = 75 + (score - benchmarks.high) / (100 - benchmarks.high) * 25;\n    } else if (score >= benchmarks.average) {\n      percentile = 50 + (score - benchmarks.average) / (benchmarks.high - benchmarks.average) * 25;\n    } else if (score >= benchmarks.low) {\n      percentile = 25 + (score - benchmarks.low) / (benchmarks.average - benchmarks.low) * 25;\n    } else {\n      percentile = score / benchmarks.low * 25;\n    }\n    return {\n      percentile: Math.round(percentile),\n      comparison: `You're ahead of ${Math.round(percentile)}% of similar ${companySize} marketing teams`,\n      trend: percentile > 50 ? 'leading' : 'lagging',\n      implication: this.getMarketImplication(percentile)\n    };\n  }\n\n  /**\n   * Calculate savings potential\n   */\n  calculateSavingsPotential(activityScores, selectedActivities, companySize) {\n    // Time and cost values based on company size\n    const sizeData = this.sizeModifiers[companySize];\n    const timeValue = sizeData.timeValue;\n\n    // Calculate weighted average time savings\n    let totalTimeSavings = 0;\n    let totalWeight = 0;\n\n    // Calculate savings for each activity\n    Object.entries(activityScores).forEach(([activity, scores]) => {\n      // Get AI automation potential for this activity\n      const weight = this.activityImpact[activity].timesSavings;\n      const impactPct = scores.timeSavings;\n      totalTimeSavings += impactPct * weight;\n      totalWeight += weight;\n    });\n\n    // Calculate average time savings as percentage\n    const avgTimeSavingsPct = totalWeight > 0 ? totalTimeSavings / totalWeight : 30;\n\n    // Convert to hours per week based on company size\n    let hoursPerWeek;\n    if (companySize === 'solo') {\n      hoursPerWeek = Math.round(40 * (avgTimeSavingsPct / 100));\n    } else if (companySize === 'small') {\n      hoursPerWeek = Math.round(100 * (avgTimeSavingsPct / 100)); // Assumes ~3 people\n    } else {\n      hoursPerWeek = Math.round(240 * (avgTimeSavingsPct / 100)); // Assumes ~8 people\n    }\n\n    // Calculate annual cost savings\n    const annualHours = hoursPerWeek * 48; // 48 working weeks per year\n    const annualSavings = annualHours * timeValue;\n\n    // Calculate time to ROI\n    const calculateTimeToROI = (budgetRange, monthlySavings) => {\n      // Parse budget range\n      const [minBudget, maxBudget] = budgetRange.split('-').map(b => parseInt(b, 10));\n      const avgBudget = (minBudget + maxBudget) / 2;\n\n      // Calculate months to recover investment\n      return Math.ceil(avgBudget / monthlySavings);\n    };\n    return {\n      percentTime: Math.round(avgTimeSavingsPct),\n      hours: hoursPerWeek,\n      annualHours: annualHours,\n      annualSavings: annualSavings,\n      roi: calculateTimeToROI(sizeData.budgetRange, annualSavings / 12)\n    };\n  }\n\n  /**\n   * Identify transformation priorities\n   */\n  identifyPriorities(categoryScores, activityScores, selectedActivities, companySize) {\n    const priorities = [];\n\n    // Human readiness priorities\n    if (categoryScores.champions < 40) {\n      priorities.push({\n        type: 'human',\n        area: 'champions',\n        urgency: 'high',\n        action: 'Identify and empower AI champions in your team',\n        impact: 'Accelerates adoption by 3x'\n      });\n    }\n    if (categoryScores.leadership < 40) {\n      priorities.push({\n        type: 'human',\n        area: 'leadership',\n        urgency: 'high',\n        action: 'Get leadership hands-on with AI tools',\n        impact: 'Unlocks resources and removes barriers'\n      });\n    }\n\n    // Activity priorities\n    Object.entries(activityScores).forEach(([activity, score]) => {\n      if (score.priority === 'high' && score.opportunityGap > 50) {\n        priorities.push({\n          type: 'activity',\n          area: activity,\n          urgency: 'high',\n          action: `Transform ${this.formatActivityName(activity)} with AI`,\n          impact: `Save ${score.timeSavings}% of time spent`\n        });\n      }\n    });\n\n    // Technical priorities\n    if (categoryScores.readiness < 30) {\n      priorities.push({\n        type: 'technical',\n        area: 'foundation',\n        urgency: 'critical',\n        action: 'Start with basic AI tool experimentation',\n        impact: 'Build foundation for all other improvements'\n      });\n    }\n\n    // Size-specific priorities\n    const sizeData = this.sizeModifiers[companySize];\n    sizeData.focusAreas.forEach(focus => {\n      if (focus === 'efficiency' && priorities.filter(p => p.type === 'activity').length === 0) {\n        priorities.push({\n          type: 'strategic',\n          area: focus,\n          urgency: 'medium',\n          action: 'Focus on time-saving quick wins',\n          impact: 'Immediate productivity gains'\n        });\n      }\n    });\n\n    // Sort by urgency and limit to top 5\n    return priorities.sort((a, b) => {\n      const urgencyOrder = {\n        critical: 0,\n        high: 1,\n        medium: 2,\n        low: 3\n      };\n      return urgencyOrder[a.urgency] - urgencyOrder[b.urgency];\n    }).slice(0, 5);\n  }\n\n  /**\n   * Generate specific insights\n   */\n  generateInsights(categoryScores, activityScores, answers) {\n    const insights = [];\n\n    // Get top strengths and weaknesses\n    const categories = [{\n      name: 'champions',\n      score: categoryScores.champions\n    }, {\n      name: 'resources',\n      score: categoryScores.resources\n    }, {\n      name: 'leadership',\n      score: categoryScores.leadership\n    }, {\n      name: 'readiness',\n      score: categoryScores.readiness\n    }];\n    const sortedStrengths = [...categories].sort((a, b) => b.score - a.score);\n    const sortedWeaknesses = [...categories].sort((a, b) => a.score - b.score);\n\n    // Helper methods for insights\n    const getStrengthInsight = (category, score) => {\n      const insights = {\n        champions: 'Your team has strong AI champions who can accelerate adoption',\n        resources: 'You have allocated good resources for AI adoption',\n        leadership: 'Your leadership has strong commitment to AI transformation',\n        readiness: 'Your technical foundation is solid for AI implementation'\n      };\n      return insights[category] || `Your ${category} score is a strength at ${Math.round(score)}/100`;\n    };\n    const getWeaknessInsight = (category, score) => {\n      const insights = {\n        champions: 'You need to identify and empower AI champions in your team',\n        resources: 'Insufficient resources allocated for AI adoption',\n        leadership: 'Leadership commitment to AI adoption needs improvement',\n        readiness: 'Your technical foundation for AI needs significant improvement'\n      };\n      return insights[category] || `Your ${category} score needs improvement at ${Math.round(score)}/100`;\n    };\n\n    // Top strength insight\n    insights.push({\n      type: 'strength',\n      category: sortedStrengths[0].name,\n      text: getStrengthInsight(sortedStrengths[0].name, sortedStrengths[0].score)\n    });\n\n    // Top weakness insight\n    insights.push({\n      type: 'weakness',\n      category: sortedWeaknesses[0].name,\n      text: getWeaknessInsight(sortedWeaknesses[0].name, sortedWeaknesses[0].score)\n    });\n\n    // Activity-specific insights\n    if (activityScores) {\n      const activities = Object.entries(activityScores).map(([id, data]) => ({\n        id,\n        ...data\n      })).sort((a, b) => b.opportunityGap - a.opportunityGap);\n\n      // Add insight for activity with highest opportunity gap\n      if (activities.length > 0) {\n        const topActivity = activities[0];\n        insights.push({\n          type: 'opportunity',\n          category: 'activity',\n          activity: topActivity.id,\n          text: `Your ${this.formatActivityName(topActivity.id)} activities have ${topActivity.opportunityGap}% improvement potential with AI adoption`\n        });\n      }\n    }\n\n    // Readiness level insight\n    if (categoryScores.readiness < 30) {\n      insights.push({\n        type: 'critical',\n        category: 'readiness',\n        text: 'Your team has critical gaps in basic AI capabilities that should be addressed immediately'\n      });\n    }\n    return insights;\n  }\n\n  // Helper methods\n  getActivityReadinessLevel(score) {\n    if (score >= 70) return 'high';\n    if (score >= 40) return 'medium';\n    return 'low';\n  }\n  calculateActivityPriority(currentCapability, impact) {\n    const gap = impact.automationPotential - currentCapability;\n    const ease = 100 - impact.difficultyToImplement;\n    const value = impact.timesSavings;\n    const priorityScore = gap * 0.4 + ease * 0.3 + value * 0.3;\n    if (priorityScore > 70) return 'high';\n    if (priorityScore > 40) return 'medium';\n    return 'low';\n  }\n  formatActivityName(activity) {\n    const names = {\n      content_marketing: 'Content Marketing',\n      social_media: 'Social Media',\n      email_marketing: 'Email Marketing',\n      seo_sem: 'SEO & SEM',\n      analytics_data: 'Analytics & Reporting',\n      paid_advertising: 'Paid Advertising',\n      creative_design: 'Creative & Design',\n      marketing_automation: 'Marketing Automation'\n    };\n    return names[activity] || activity;\n  }\n  getMarketImplication(percentile) {\n    if (percentile >= 75) return 'Position of strength - extend your lead';\n    if (percentile >= 50) return 'Above average - opportunity to leap ahead';\n    if (percentile >= 25) return 'Below average - urgent improvement needed';\n    return 'Critical gap - immediate action required';\n  }\n  calculateTimeToROI(budgetRange, monthlySavings) {\n    const avgBudget = budgetRange === '0-100' ? 50 : budgetRange === '100-500' ? 300 : budgetRange === '500-2000' ? 1000 : 500;\n    const months = avgBudget / monthlySavings;\n    if (months < 1) return 'Immediate ROI';\n    if (months < 3) return `${Math.ceil(months)} months`;\n    if (months < 6) return '3-6 months';\n    return '6+ months';\n  }\n\n  /**\n   * Calculate dimension scores from categories\n   */\n  calculateDimensionScores(categoryScores) {\n    // Human readiness dimension\n    const humanReadiness = (categoryScores.champions * this.dimensionWeights.humanReadiness.champions + categoryScores.leadership * this.dimensionWeights.humanReadiness.leadership) / (this.dimensionWeights.humanReadiness.champions + this.dimensionWeights.humanReadiness.leadership);\n\n    // Technical readiness dimension\n    const technicalReadiness = (categoryScores.resources * this.dimensionWeights.technicalReadiness.resources + categoryScores.readiness * this.dimensionWeights.technicalReadiness.readiness) / (this.dimensionWeights.technicalReadiness.resources + this.dimensionWeights.technicalReadiness.readiness);\n\n    // Calculate overall score from dimensions\n    const overallScore = (humanReadiness * this.dimensionWeights.overall.humanReadiness + technicalReadiness * this.dimensionWeights.overall.technicalReadiness + 50 * this.dimensionWeights.overall.activityAutomation) / (this.dimensionWeights.overall.humanReadiness + this.dimensionWeights.overall.technicalReadiness + this.dimensionWeights.overall.activityAutomation);\n    return {\n      humanReadiness: Math.round(humanReadiness),\n      technicalReadiness: Math.round(technicalReadiness),\n      activityAutomation: 50,\n      // Placeholder, calculated separately\n      overallScore: Math.round(overallScore)\n    };\n  }\n\n  /**\n   * Calculate activity-specific scores\n   */\n  calculateActivityScores(answers, selectedActivities) {\n    var _answers$technical_re, _answers$tool_availab, _answers$data_quality;\n    const activityScores = {};\n\n    // Default base scores from technical capabilities\n    const baseReadiness = ((_answers$technical_re = answers.technical_readiness) === null || _answers$technical_re === void 0 ? void 0 : _answers$technical_re.score) || answers.technical_readiness || 3;\n    const toolAvailability = ((_answers$tool_availab = answers.tool_availability) === null || _answers$tool_availab === void 0 ? void 0 : _answers$tool_availab.score) || answers.tool_availability || 3;\n    const dataQuality = ((_answers$data_quality = answers.data_quality) === null || _answers$data_quality === void 0 ? void 0 : _answers$data_quality.score) || answers.data_quality || 3;\n\n    // Process each selected activity\n    selectedActivities.forEach(activity => {\n      var _answers;\n      // Get impact potential for this activity\n      const impact = this.activityImpact[activity] || {\n        automationPotential: 50,\n        timesSavings: 40,\n        difficultyToImplement: 50,\n        quickWinPotential: 50\n      };\n\n      // Calculate current capability\n      const activityReadiness = ((_answers = answers[`${activity}_capability`]) === null || _answers === void 0 ? void 0 : _answers.score) || answers[`${activity}_capability`] || baseReadiness;\n\n      // Scale score to 0-100\n      const currentScore = activityReadiness / 5 * 100;\n\n      // Calculate gap between current capability and potential\n      const opportunityGap = impact.automationPotential - currentScore;\n\n      // Calculate ROI potential based on time savings and implementation difficulty\n      const roiPotential = impact.timesSavings * (100 - impact.difficultyToImplement) / 100;\n\n      // Calculate priority level\n      const priority = this.calculateActivityPriority(currentScore, impact);\n\n      // Store all scores for this activity\n      activityScores[activity] = {\n        currentScore: Math.round(currentScore),\n        currentCapability: Math.round(currentScore),\n        // Add this for consistency\n        automationPotential: impact.automationPotential,\n        opportunityGap: Math.round(opportunityGap),\n        timeSavings: impact.timesSavings,\n        implementationEffort: impact.difficultyToImplement,\n        quickWinPotential: impact.quickWinPotential,\n        roiPotential: Math.round(roiPotential),\n        priority: priority,\n        readinessLevel: this.getActivityReadinessLevel(currentScore)\n      };\n    });\n\n    // Return the activity scores\n    return activityScores;\n  }\n\n  /**\n   * Calculate overall score from dimension scores and activity scores\n   */\n  calculateOverallScore(dimensionScores, activityScores) {\n    // The dimensionScores object already contains an overall score based on dimensions\n    let overallScore = dimensionScores.overallScore;\n\n    // If we have activity scores, factor them into the overall calculation\n    if (activityScores && Object.keys(activityScores).length > 0) {\n      // Calculate average activity score\n      const activityValues = Object.values(activityScores);\n      const avgActivityScore = activityValues.reduce((sum, activity) => {\n        return sum + activity.currentCapability; // Note: using currentCapability not currentScore\n      }, 0) / activityValues.length;\n\n      // Blend the activity score with the dimension-based score\n      // We give slightly more weight to the dimension scores as they're more comprehensive\n      overallScore = Math.round(overallScore * 0.6 + avgActivityScore * 0.4);\n    }\n    return overallScore;\n  }\n}\n\n// Export for use in assessment system\nexport default InhouseMarketingScoring;","map":{"version":3,"names":["InhouseMarketingScoring","constructor","config","dimensionWeights","humanReadiness","technicalReadiness","activityAutomation","categoryWeights","champions","resources","leadership","readiness","sizeModifiers","solo","scoreBoost","timeValue","focusAreas","budgetRange","benchmarks","low","average","high","small","medium","activityImpact","content_marketing","automationPotential","timesSavings","difficultyToImplement","quickWinPotential","social_media","email_marketing","seo_sem","analytics_data","paid_advertising","creative_design","marketing_automation","calculateScores","answers","metadata","companySize","selectedActivities","sector","categoryScores","calculateCategoryScores","dimensionScores","calculateDimensionScores","activityScores","calculateActivityScores","overallScore","calculateOverallScore","adjustedScore","applySizeModifiers","insights","generateInsights","readinessLevel","getReadinessLevel","marketPosition","getMarketPosition","savingsPotential","calculateSavingsPotential","priorities","identifyPriorities","overall","Math","round","dimensions","timestamp","Date","toISOString","categories","Object","entries","forEach","questionId","answer","score","value","includes","push","length","reduce","sum","activityValues","values","avgActivityScore","activity","currentCapability","modifier","max","min","getQuestionWeights","category","weights","level","description","nextSteps","calculatePercentile","remaining","overshoot","percentile","comparison","trend","implication","getMarketImplication","sizeData","totalTimeSavings","totalWeight","scores","weight","impactPct","timeSavings","avgTimeSavingsPct","hoursPerWeek","annualHours","annualSavings","calculateTimeToROI","monthlySavings","minBudget","maxBudget","split","map","b","parseInt","avgBudget","ceil","percentTime","hours","roi","type","area","urgency","action","impact","priority","opportunityGap","formatActivityName","focus","filter","p","sort","a","urgencyOrder","critical","slice","name","sortedStrengths","sortedWeaknesses","getStrengthInsight","getWeaknessInsight","text","activities","id","data","topActivity","getActivityReadinessLevel","calculateActivityPriority","gap","ease","priorityScore","names","months","_answers$technical_re","_answers$tool_availab","_answers$data_quality","baseReadiness","technical_readiness","toolAvailability","tool_availability","dataQuality","data_quality","_answers","activityReadiness","currentScore","roiPotential","implementationEffort","keys"],"sources":["/Users/jon/Documents/GitHub/assessor/src/assessments/inhouse-marketing/scoring.js"],"sourcesContent":["/**\n * In-House Marketing Scoring Engine\n * \n * Calculates readiness scores for in-house marketing teams\n * considering their unique constraints and opportunities\n */\n\nexport class InhouseMarketingScoring {\n    constructor(config = {}) {\n      this.config = config;\n      \n      // Dimension weights for overall score\n      this.dimensionWeights = {\n        humanReadiness: 0.4,      // Champions, leadership, resources\n        technicalReadiness: 0.3,   // Current capabilities\n        activityAutomation: 0.3    // Potential in their activities\n      };\n      \n      // Category weights within dimensions\n      this.categoryWeights = {\n        champions: 0.35,\n        resources: 0.30,\n        leadership: 0.35,\n        readiness: 1.0  // Single category for technical\n      };\n      \n      // Company size modifiers\n      this.sizeModifiers = {\n        solo: {\n          scoreBoost: 1.1,        // Solo marketers get boost for any progress\n          timeValue: 50,          // £/hour value\n          focusAreas: [\"efficiency\", \"quick_wins\"],\n          budgetRange: \"0-100\",\n          benchmarks: {\n            low: 25,\n            average: 40,\n            high: 65\n          }\n        },\n        small: {\n          scoreBoost: 1.0,        // No modifier\n          timeValue: 150,         // Team of 3 at £50/hour\n          focusAreas: [\"collaboration\", \"scalability\"],\n          budgetRange: \"100-500\",\n          benchmarks: {\n            low: 35,\n            average: 50,\n            high: 75\n          }\n        },\n        medium: {\n          scoreBoost: 0.9,        // Need higher capability for same score\n          timeValue: 400,         // Team of 8 at £50/hour\n          focusAreas: [\"transformation\", \"competitive_advantage\"],\n          budgetRange: \"500-2000\",\n          benchmarks: {\n            low: 45,\n            average: 60,\n            high: 85\n          }\n        }\n      };\n      \n      // Activity impact scores (how much AI can help)\n      this.activityImpact = {\n        content_marketing: {\n          automationPotential: 85,\n          timesSavings: 70,\n          difficultyToImplement: 20,\n          quickWinPotential: 95\n        },\n        social_media: {\n          automationPotential: 75,\n          timesSavings: 60,\n          difficultyToImplement: 30,\n          quickWinPotential: 85\n        },\n        email_marketing: {\n          automationPotential: 70,\n          timesSavings: 50,\n          difficultyToImplement: 25,\n          quickWinPotential: 80\n        },\n        seo_sem: {\n          automationPotential: 65,\n          timesSavings: 40,\n          difficultyToImplement: 45,\n          quickWinPotential: 70\n        },\n        analytics_data: {\n          automationPotential: 90,\n          timesSavings: 85,\n          difficultyToImplement: 35,\n          quickWinPotential: 90\n        },\n        paid_advertising: {\n          automationPotential: 70,\n          timesSavings: 50,\n          difficultyToImplement: 40,\n          quickWinPotential: 75\n        },\n        creative_design: {\n          automationPotential: 60,\n          timesSavings: 40,\n          difficultyToImplement: 50,\n          quickWinPotential: 65\n        },\n        marketing_automation: {\n          automationPotential: 80,\n          timesSavings: 60,\n          difficultyToImplement: 55,\n          quickWinPotential: 70\n        }\n      }\n    }\n  \n    /**\n     * Main scoring method\n     * @param {Object} answers - All question answers\n     * @param {Object} metadata - Company size, selected activities, etc.\n     * @returns {Object} Complete scoring results\n     */\n    calculateScores(answers, metadata) {\n      const { companySize = 'small', selectedActivities = [], sector } = metadata;\n      \n      // Calculate category scores\n      const categoryScores = this.calculateCategoryScores(answers);\n      \n      // Calculate dimension scores\n      const dimensionScores = this.calculateDimensionScores(categoryScores);\n      \n      // Calculate activity-specific scores\n      const activityScores = this.calculateActivityScores(answers, selectedActivities);\n      \n      // Calculate overall readiness\n      const overallScore = this.calculateOverallScore(dimensionScores, activityScores);\n      \n      // Apply size modifiers\n      const adjustedScore = this.applySizeModifiers(overallScore, companySize);\n      \n      // Calculate specific insights\n      const insights = this.generateInsights(categoryScores, activityScores, answers);\n      \n      // Determine readiness level and recommendations\n      const readinessLevel = this.getReadinessLevel(adjustedScore, companySize);\n      const marketPosition = this.getMarketPosition(adjustedScore, companySize);\n      \n      // Calculate time and cost savings potential\n      const savingsPotential = this.calculateSavingsPotential(\n        activityScores, \n        selectedActivities, \n        companySize\n      );\n      \n      // Identify transformation priorities\n      const priorities = this.identifyPriorities(\n        categoryScores, \n        activityScores, \n        selectedActivities,\n        companySize\n      );\n      \n      return {\n        overall: Math.round(adjustedScore),\n        dimensions: {\n          humanReadiness: Math.round(dimensionScores.humanReadiness),\n          technicalReadiness: Math.round(dimensionScores.technicalReadiness),\n          activityAutomation: Math.round(dimensionScores.activityAutomation)\n        },\n        categoryScores: {\n          champions: Math.round(categoryScores.champions),\n          resources: Math.round(categoryScores.resources),\n          leadership: Math.round(categoryScores.leadership),\n          readiness: Math.round(categoryScores.readiness)\n        },\n        activityScores: activityScores,\n        readinessLevel: readinessLevel,\n        marketPosition: marketPosition,\n        savingsPotential: savingsPotential,\n        priorities: priorities,\n        insights: insights,\n        companySize: companySize,\n        selectedActivities: selectedActivities,\n        sector: sector,\n        timestamp: new Date().toISOString()\n      }\n    }\n  \n    /**\n     * Calculate category scores from raw answers\n     */\n    calculateCategoryScores(answers) {\n      const categories = {\n        champions: [],\n        resources: [],\n        leadership: [],\n        readiness: []\n      };\n      \n      // Process each answer\n      Object.entries(answers).forEach(([questionId, answer]) => {\n        // Extract score value\n        const score = typeof answer === 'object' ? (answer.score || answer.value || 0) : answer;\n        \n        // Categorize based on question ID\n        if (questionId.includes('champion') || questionId.includes('knowledge') || \n            questionId.includes('experimentation') || questionId.includes('tool_discovery') || \n            questionId.includes('change_adoption')) {\n          categories.champions.push(score)\n        } else if (questionId.includes('time_availability') || questionId.includes('budget') || \n                   questionId.includes('current_pain') || questionId.includes('tech_complexity') || \n                   questionId.includes('capacity')) {\n          categories.resources.push(score)\n        } else if (questionId.includes('leadership') || questionId.includes('decision') || \n                   questionId.includes('success_metrics') || questionId.includes('transformation_ownership') || \n                   questionId.includes('risk_tolerance')) {\n          categories.leadership.push(score)\n        } else if (questionId.includes('current_ai_usage') || questionId.includes('data_quality')) {\n          categories.readiness.push(score)\n        }\n      });\n      \n      // Calculate category averages\n      return {\n        champions: categories.champions.length > 0 ? categories.champions.reduce((sum, score) => sum + score, 0) / categories.champions.length * 25 : 50,\n        resources: categories.resources.length > 0 ? categories.resources.reduce((sum, score) => sum + score, 0) / categories.resources.length * 25 : 50,\n        leadership: categories.leadership.length > 0 ? categories.leadership.reduce((sum, score) => sum + score, 0) / categories.leadership.length * 25 : 50,\n        readiness: categories.readiness.length > 0 ? categories.readiness.reduce((sum, score) => sum + score, 0) / categories.readiness.length * 25 : 50\n      };\n    }\n  \n    /**\n     * Calculate overall readiness score\n     */\n    calculateOverallScore(dimensionScores, activityScores) {\n      // Calculate average activity score\n      const activityValues = Object.values(activityScores);\n      const avgActivityScore = activityValues.length > 0\n        ? activityValues.reduce((sum, activity) => sum + activity.currentCapability, 0) / activityValues.length\n        : 50;\n      \n      dimensionScores.activityAutomation = avgActivityScore;\n      \n      // Weighted combination\n      const overallScore = \n        dimensionScores.humanReadiness * this.dimensionWeights.humanReadiness +\n        dimensionScores.technicalReadiness * this.dimensionWeights.technicalReadiness +\n        avgActivityScore * this.dimensionWeights.activityAutomation;\n      \n      return overallScore;\n    }\n  \n    /**\n     * Apply company size modifiers\n     */\n    applySizeModifiers(score, companySize) {\n      const modifier = this.sizeModifiers[companySize];\n      if (!modifier) return score;\n      \n      // Apply boost/penalty based on company size\n      let adjustedScore = score * modifier.scoreBoost;\n      \n      // Additional adjustments based on size-specific factors\n      if (companySize === 'solo' && score > 30) {\n        // Solo marketers get extra credit for any progress\n        adjustedScore += 5\n      } else if (companySize === 'medium' && score < 50) {\n        // Medium teams need more capability for same readiness\n        adjustedScore -= 5\n      }\n      \n      // Keep within 0-100 bounds\n      return Math.max(0, Math.min(100, adjustedScore));\n    }\n  \n    /**\n     * Get question weights for category\n     */\n    getQuestionWeights(category, answers) {\n      // Return weights based on question importance\n      // This could be expanded to use question metadata\n      const weights = {\n        champions: [1.5, 1.2, 1.3, 1.0, 1.1], // Champion identification most important\n        resources: [1.3, 1.2, 1.1, 1.0, 1.2],  // Time availability most important\n        leadership: [1.5, 1.0, 1.2, 1.3, 1.1], // Leadership attitude most important\n        readiness: [1.2, 1.1, 1.1, 1.2, 1.0]   // Current AI usage most important\n      };\n      \n      return weights[category];\n    }\n  \n    /**\n     * Get readiness level based on score and company size\n     */\n    getReadinessLevel(score, companySize) {\n      // Get benchmarks for company size\n      const benchmarks = this.sizeModifiers[companySize].benchmarks;\n      \n      let level, description, nextSteps;\n      \n      if (score >= benchmarks.high) {\n        level = 'high';\n        description = 'Transformation Ready';\n        nextSteps = 'Your team is ready to accelerate AI adoption';\n      } else if (score >= benchmarks.average) {\n        level = 'medium';\n        description = 'Building Capability';\n        nextSteps = 'Good foundation with room for growth';\n      } else if (score >= benchmarks.low) {\n        level = 'low';\n        description = 'Early Stage';\n        nextSteps = 'Starting the journey with quick wins';\n      } else {\n        level = 'critical';\n        description = 'Urgent Action Needed';\n        nextSteps = 'Significant gap to close quickly';\n      }\n      \n      // Calculate percentile based on score and company size benchmarks\n      const calculatePercentile = (score, companySize) => {\n        const benchmarks = this.sizeModifiers[companySize].benchmarks;\n        \n        if (score < benchmarks.low) {\n          // Below low benchmark - map from 0 to low benchmark as 0-25th percentile\n          return Math.round((score / benchmarks.low) * 25);\n        } else if (score < benchmarks.average) {\n          // Between low and average - map to 25-50th percentile\n          return Math.round(25 + ((score - benchmarks.low) / (benchmarks.average - benchmarks.low)) * 25);\n        } else if (score < benchmarks.high) {\n          // Between average and high - map to 50-75th percentile\n          return Math.round(50 + ((score - benchmarks.average) / (benchmarks.high - benchmarks.average)) * 25);\n        } else {\n          // Above high benchmark - map to 75-100th percentile\n          const remaining = 100 - benchmarks.high;\n          const overshoot = score - benchmarks.high;\n          return Math.min(100, Math.round(75 + (overshoot / remaining) * 25));\n        }\n      };\n      \n      return {\n        score: Math.round(score),\n        level,\n        description,\n        nextSteps,\n        percentile: calculatePercentile(score, companySize)\n      };\n    }\n  \n    /**\n     * Get market position\n     */\n    getMarketPosition(score, companySize) {\n      // Get benchmarks for company size\n      const benchmarks = this.sizeModifiers[companySize].benchmarks;\n      \n      let percentile;\n      if (score >= benchmarks.high) {\n        percentile = 75 + (score - benchmarks.high) / (100 - benchmarks.high) * 25\n      } else if (score >= benchmarks.average) {\n        percentile = 50 + (score - benchmarks.average) / (benchmarks.high - benchmarks.average) * 25\n      } else if (score >= benchmarks.low) {\n        percentile = 25 + (score - benchmarks.low) / (benchmarks.average - benchmarks.low) * 25\n      } else {\n        percentile = score / benchmarks.low * 25\n      }\n      \n      return {\n        percentile: Math.round(percentile),\n        comparison: `You're ahead of ${Math.round(percentile)}% of similar ${companySize} marketing teams`,\n        trend: percentile > 50 ? 'leading' : 'lagging',\n        implication: this.getMarketImplication(percentile)\n      }\n    }\n  \n    /**\n     * Calculate savings potential\n     */\n    calculateSavingsPotential(activityScores, selectedActivities, companySize) {\n      // Time and cost values based on company size\n      const sizeData = this.sizeModifiers[companySize];\n      const timeValue = sizeData.timeValue;\n      \n      // Calculate weighted average time savings\n      let totalTimeSavings = 0;\n      let totalWeight = 0;\n      \n      // Calculate savings for each activity\n      Object.entries(activityScores).forEach(([activity, scores]) => {\n        // Get AI automation potential for this activity\n        const weight = this.activityImpact[activity].timesSavings;\n        const impactPct = scores.timeSavings;\n        \n        totalTimeSavings += impactPct * weight;\n        totalWeight += weight;\n      });\n      \n      // Calculate average time savings as percentage\n      const avgTimeSavingsPct = totalWeight > 0 ? totalTimeSavings / totalWeight : 30;\n      \n      // Convert to hours per week based on company size\n      let hoursPerWeek;\n      if (companySize === 'solo') {\n        hoursPerWeek = Math.round(40 * (avgTimeSavingsPct / 100));\n      } else if (companySize === 'small') {\n        hoursPerWeek = Math.round(100 * (avgTimeSavingsPct / 100)); // Assumes ~3 people\n      } else {\n        hoursPerWeek = Math.round(240 * (avgTimeSavingsPct / 100)); // Assumes ~8 people\n      }\n      \n      // Calculate annual cost savings\n      const annualHours = hoursPerWeek * 48; // 48 working weeks per year\n      const annualSavings = annualHours * timeValue;\n      \n      // Calculate time to ROI\n      const calculateTimeToROI = (budgetRange, monthlySavings) => {\n        // Parse budget range\n        const [minBudget, maxBudget] = budgetRange.split('-').map(b => parseInt(b, 10));\n        const avgBudget = (minBudget + maxBudget) / 2;\n        \n        // Calculate months to recover investment\n        return Math.ceil(avgBudget / monthlySavings);\n      };\n      \n      return {\n        percentTime: Math.round(avgTimeSavingsPct),\n        hours: hoursPerWeek,\n        annualHours: annualHours,\n        annualSavings: annualSavings,\n        roi: calculateTimeToROI(sizeData.budgetRange, annualSavings / 12)\n      };\n    }\n  \n    /**\n     * Identify transformation priorities\n     */\n    identifyPriorities(categoryScores, activityScores, selectedActivities, companySize) {\n      const priorities = [];\n      \n      // Human readiness priorities\n      if (categoryScores.champions < 40) {\n        priorities.push({\n          type: 'human',\n          area: 'champions',\n          urgency: 'high',\n          action: 'Identify and empower AI champions in your team',\n          impact: 'Accelerates adoption by 3x'\n        })\n      }\n      \n      if (categoryScores.leadership < 40) {\n        priorities.push({\n          type: 'human',\n          area: 'leadership',\n          urgency: 'high',\n          action: 'Get leadership hands-on with AI tools',\n          impact: 'Unlocks resources and removes barriers'\n        })\n      }\n      \n      // Activity priorities\n      Object.entries(activityScores).forEach(([activity, score]) => {\n        if (score.priority === 'high' && score.opportunityGap > 50) {\n          priorities.push({\n            type: 'activity',\n            area: activity,\n            urgency: 'high',\n            action: `Transform ${this.formatActivityName(activity)} with AI`,\n            impact: `Save ${score.timeSavings}% of time spent`\n          })\n        }\n      });\n      \n      // Technical priorities\n      if (categoryScores.readiness < 30) {\n        priorities.push({\n          type: 'technical',\n          area: 'foundation',\n          urgency: 'critical',\n          action: 'Start with basic AI tool experimentation',\n          impact: 'Build foundation for all other improvements'\n        })\n      }\n      \n      // Size-specific priorities\n      const sizeData = this.sizeModifiers[companySize];\n      sizeData.focusAreas.forEach(focus => {\n        if (focus === 'efficiency' && priorities.filter(p => p.type === 'activity').length === 0) {\n          priorities.push({\n            type: 'strategic',\n            area: focus,\n            urgency: 'medium',\n            action: 'Focus on time-saving quick wins',\n            impact: 'Immediate productivity gains'\n          })\n        }\n      });\n      \n      // Sort by urgency and limit to top 5\n      return priorities\n        .sort((a, b) => {\n          const urgencyOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n          return urgencyOrder[a.urgency] - urgencyOrder[b.urgency];\n        })\n        .slice(0, 5);\n    }\n  \n    /**\n     * Generate specific insights\n     */\n    generateInsights(categoryScores, activityScores, answers) {\n      const insights = [];\n      \n      // Get top strengths and weaknesses\n      const categories = [\n        { name: 'champions', score: categoryScores.champions },\n        { name: 'resources', score: categoryScores.resources },\n        { name: 'leadership', score: categoryScores.leadership },\n        { name: 'readiness', score: categoryScores.readiness }\n      ];\n      \n      const sortedStrengths = [...categories].sort((a, b) => b.score - a.score);\n      const sortedWeaknesses = [...categories].sort((a, b) => a.score - b.score);\n      \n      // Helper methods for insights\n      const getStrengthInsight = (category, score) => {\n        const insights = {\n          champions: 'Your team has strong AI champions who can accelerate adoption',\n          resources: 'You have allocated good resources for AI adoption',\n          leadership: 'Your leadership has strong commitment to AI transformation',\n          readiness: 'Your technical foundation is solid for AI implementation'\n        };\n        return insights[category] || `Your ${category} score is a strength at ${Math.round(score)}/100`;\n      };\n      \n      const getWeaknessInsight = (category, score) => {\n        const insights = {\n          champions: 'You need to identify and empower AI champions in your team',\n          resources: 'Insufficient resources allocated for AI adoption',\n          leadership: 'Leadership commitment to AI adoption needs improvement',\n          readiness: 'Your technical foundation for AI needs significant improvement'\n        };\n        return insights[category] || `Your ${category} score needs improvement at ${Math.round(score)}/100`;\n      };\n      \n      // Top strength insight\n      insights.push({\n        type: 'strength',\n        category: sortedStrengths[0].name,\n        text: getStrengthInsight(sortedStrengths[0].name, sortedStrengths[0].score)\n      });\n      \n      // Top weakness insight\n      insights.push({\n        type: 'weakness',\n        category: sortedWeaknesses[0].name,\n        text: getWeaknessInsight(sortedWeaknesses[0].name, sortedWeaknesses[0].score)\n      });\n      \n      // Activity-specific insights\n      if (activityScores) {\n        const activities = Object.entries(activityScores)\n          .map(([id, data]) => ({ id, ...data }))\n          .sort((a, b) => b.opportunityGap - a.opportunityGap);\n          \n        // Add insight for activity with highest opportunity gap\n        if (activities.length > 0) {\n          const topActivity = activities[0];\n          insights.push({\n            type: 'opportunity',\n            category: 'activity',\n            activity: topActivity.id,\n            text: `Your ${this.formatActivityName(topActivity.id)} activities have ${topActivity.opportunityGap}% improvement potential with AI adoption`\n          });\n        }\n      }\n      \n      // Readiness level insight\n      if (categoryScores.readiness < 30) {\n        insights.push({\n          type: 'critical',\n          category: 'readiness',\n          text: 'Your team has critical gaps in basic AI capabilities that should be addressed immediately'\n        });\n      }\n      \n      return insights;\n    }\n  \n    // Helper methods\n    getActivityReadinessLevel(score) {\n      if (score >= 70) return 'high';\n      if (score >= 40) return 'medium';\n      return 'low';\n    }\n    ;\n    calculateActivityPriority(currentCapability, impact) {\n      const gap = impact.automationPotential - currentCapability;\n      const ease = 100 - impact.difficultyToImplement;\n      const value = impact.timesSavings;\n      \n      const priorityScore = (gap * 0.4) + (ease * 0.3) + (value * 0.3);\n      \n      if (priorityScore > 70) return 'high';\n      if (priorityScore > 40) return 'medium';\n      return 'low';\n    }\n    ;\n    formatActivityName(activity) {\n      const names = {\n        content_marketing: 'Content Marketing',\n        social_media: 'Social Media',\n        email_marketing: 'Email Marketing',\n        seo_sem: 'SEO & SEM',\n        analytics_data: 'Analytics & Reporting',\n        paid_advertising: 'Paid Advertising',\n        creative_design: 'Creative & Design',\n        marketing_automation: 'Marketing Automation'\n      };\n      return names[activity] || activity;\n    }\n    ;\n    getMarketImplication(percentile) {\n      if (percentile >= 75) return 'Position of strength - extend your lead';\n      if (percentile >= 50) return 'Above average - opportunity to leap ahead';\n      if (percentile >= 25) return 'Below average - urgent improvement needed';\n      return 'Critical gap - immediate action required';\n    }\n    ;\n    calculateTimeToROI(budgetRange, monthlySavings) {\n      const avgBudget = budgetRange === '0-100' ? 50 :\n                        budgetRange === '100-500' ? 300 : \n                        budgetRange === '500-2000' ? 1000 : 500;\n      \n      const months = avgBudget / monthlySavings;\n      \n      if (months < 1) return 'Immediate ROI';\n      if (months < 3) return `${Math.ceil(months)} months`;\n      if (months < 6) return '3-6 months';\n      return '6+ months';\n    }\n    \n    /**\n     * Calculate dimension scores from categories\n     */\n    calculateDimensionScores(categoryScores) {\n      // Human readiness dimension\n      const humanReadiness = (\n        categoryScores.champions * this.dimensionWeights.humanReadiness.champions +\n        categoryScores.leadership * this.dimensionWeights.humanReadiness.leadership\n      ) / (\n        this.dimensionWeights.humanReadiness.champions +\n        this.dimensionWeights.humanReadiness.leadership\n      );\n      \n      // Technical readiness dimension\n      const technicalReadiness = (\n        categoryScores.resources * this.dimensionWeights.technicalReadiness.resources +\n        categoryScores.readiness * this.dimensionWeights.technicalReadiness.readiness\n      ) / (\n        this.dimensionWeights.technicalReadiness.resources +\n        this.dimensionWeights.technicalReadiness.readiness\n      );\n      \n      // Calculate overall score from dimensions\n      const overallScore = (\n        humanReadiness * this.dimensionWeights.overall.humanReadiness +\n        technicalReadiness * this.dimensionWeights.overall.technicalReadiness +\n        50 * this.dimensionWeights.overall.activityAutomation \n      ) / (\n        this.dimensionWeights.overall.humanReadiness +\n        this.dimensionWeights.overall.technicalReadiness +\n        this.dimensionWeights.overall.activityAutomation\n      );\n      \n      return {\n        humanReadiness: Math.round(humanReadiness),\n        technicalReadiness: Math.round(technicalReadiness),\n        activityAutomation: 50, // Placeholder, calculated separately\n        overallScore: Math.round(overallScore)\n      }\n    }\n    \n    /**\n     * Calculate activity-specific scores\n     */\n    calculateActivityScores(answers, selectedActivities) {\n      const activityScores = {};\n      \n      // Default base scores from technical capabilities\n      const baseReadiness = answers.technical_readiness?.score || answers.technical_readiness || 3;\n      const toolAvailability = answers.tool_availability?.score || answers.tool_availability || 3;\n      const dataQuality = answers.data_quality?.score || answers.data_quality || 3;\n      \n      // Process each selected activity\n      selectedActivities.forEach(activity => {\n        // Get impact potential for this activity\n        const impact = this.activityImpact[activity] || {\n          automationPotential: 50,\n          timesSavings: 40,\n          difficultyToImplement: 50,\n          quickWinPotential: 50\n        };\n        \n        // Calculate current capability\n        const activityReadiness = answers[`${activity}_capability`]?.score || \n                                answers[`${activity}_capability`] || \n                                baseReadiness;\n        \n        // Scale score to 0-100\n        const currentScore = (activityReadiness / 5) * 100;\n        \n        // Calculate gap between current capability and potential\n        const opportunityGap = impact.automationPotential - currentScore;\n        \n        // Calculate ROI potential based on time savings and implementation difficulty\n        const roiPotential = impact.timesSavings * (100 - impact.difficultyToImplement) / 100;\n        \n        // Calculate priority level\n        const priority = this.calculateActivityPriority(currentScore, impact);\n        \n        // Store all scores for this activity\n        activityScores[activity] = {\n          currentScore: Math.round(currentScore),\n          currentCapability: Math.round(currentScore), // Add this for consistency\n          automationPotential: impact.automationPotential,\n          opportunityGap: Math.round(opportunityGap),\n          timeSavings: impact.timesSavings,\n          implementationEffort: impact.difficultyToImplement,\n          quickWinPotential: impact.quickWinPotential,\n          roiPotential: Math.round(roiPotential),\n          priority: priority,\n          readinessLevel: this.getActivityReadinessLevel(currentScore)\n        }\n      });\n      \n      // Return the activity scores\n      return activityScores;\n    }\n    \n    /**\n     * Calculate overall score from dimension scores and activity scores\n     */\n    calculateOverallScore(dimensionScores, activityScores) {\n      // The dimensionScores object already contains an overall score based on dimensions\n      let overallScore = dimensionScores.overallScore;\n      \n      // If we have activity scores, factor them into the overall calculation\n      if (activityScores && Object.keys(activityScores).length > 0) {\n        // Calculate average activity score\n        const activityValues = Object.values(activityScores);\n        const avgActivityScore = activityValues.reduce((sum, activity) => {\n          return sum + activity.currentCapability; // Note: using currentCapability not currentScore\n        }, 0) / activityValues.length;\n        \n        // Blend the activity score with the dimension-based score\n        // We give slightly more weight to the dimension scores as they're more comprehensive\n        overallScore = Math.round((overallScore * 0.6) + (avgActivityScore * 0.4));\n      }\n      \n      return overallScore;\n    }\n  }\n  \n  // Export for use in assessment system\n  export default InhouseMarketingScoring;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}