{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEBUG_MODE = process.env.NODE_ENV === 'development';\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  onComplete,\n  onBack,\n  progress = 50\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [allAnswers, setAllAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Helper function for debugging - only logs in development mode\n  const debugLog = (...args) => {\n    if (DEBUG_MODE) {\n      console.log(...args);\n    }\n  };\n\n  // Load questions from appropriate JSON files based on assessment type\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      console.log(`üîç [${assessmentType}] LOADING QUESTIONS - DEBUGGING ISSUE`);\n\n      // Load core questions\n      let coreQuestions = [];\n      let categoryQuestionCounts = {};\n\n      // Function to recursively extract questions from nested structure\n      const extractQuestionsFromNestedObject = (obj, path = '') => {\n        let extractedQuestions = [];\n\n        // Base case: If it's an array, we assume it's an array of questions\n        if (Array.isArray(obj)) {\n          console.log(`üî¢ Found ${obj.length} questions array at path: ${path}`);\n          // Count questions per category for debugging\n          if (path) {\n            categoryQuestionCounts[path] = obj.length;\n          }\n          return obj;\n        }\n\n        // If it's an object, traverse its properties\n        if (obj && typeof obj === 'object') {\n          for (const key in obj) {\n            const newPath = path ? `${path}.${key}` : key;\n            if (Array.isArray(obj[key])) {\n              // Found an array, add its items to our questions\n              console.log(`üî¢ Found ${obj[key].length} questions in ${newPath}`);\n              categoryQuestionCounts[newPath] = obj[key].length;\n              extractedQuestions = extractedQuestions.concat(obj[key]);\n            } else if (obj[key] && typeof obj[key] === 'object') {\n              // Found a nested object, recursively extract questions from it\n              const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n              if (nestedQuestions.length > 0) {\n                console.log(`‚ûï Adding ${nestedQuestions.length} questions from ${newPath}`);\n                extractedQuestions = extractedQuestions.concat(nestedQuestions);\n              }\n            }\n          }\n        }\n        return extractedQuestions;\n      };\n\n      // LOAD CORE QUESTIONS\n      try {\n        const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n        const coreData = coreModule.default || coreModule;\n        console.log(`üìÅ [${assessmentType}] Core questions data structure:`, Object.keys(coreData));\n\n        // Handle different possible structures\n        if (Array.isArray(coreData)) {\n          // Direct array structure\n          coreQuestions = coreData;\n          console.log(`üìä Loaded ${coreQuestions.length} core questions (direct array)`);\n        } else if (coreData.coreQuestions) {\n          // Structure with coreQuestions property\n          if (Array.isArray(coreData.coreQuestions)) {\n            // coreQuestions is a direct array\n            coreQuestions = coreData.coreQuestions;\n            console.log(`üìä Loaded ${coreQuestions.length} core questions from coreQuestions array`);\n          } else {\n            // coreQuestions is an object with nested question arrays\n            console.log(`üîç Extracting questions from nested coreQuestions object with categories:`, Object.keys(coreData.coreQuestions));\n\n            // First, let's log all the categories and their question counts\n            for (const category in coreData.coreQuestions) {\n              if (Array.isArray(coreData.coreQuestions[category])) {\n                console.log(`üìä Category ${category} has ${coreData.coreQuestions[category].length} direct questions`);\n              } else if (typeof coreData.coreQuestions[category] === 'object') {\n                console.log(`üîç Category ${category} has nested structure:`, Object.keys(coreData.coreQuestions[category]));\n              }\n            }\n            coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n            console.log(`üìä Category question counts:`, categoryQuestionCounts);\n            console.log(`üìä Total extracted core questions: ${coreQuestions.length}`);\n\n            // Verify by listing all question IDs\n            const coreQuestionIds = coreQuestions.map(q => q.id);\n            console.log(`üÜî Core question IDs:`, coreQuestionIds);\n          }\n        } else {\n          // Try to extract questions from the entire object\n          coreQuestions = extractQuestionsFromNestedObject(coreData);\n          console.log(`üìä Extracted ${coreQuestions.length} questions from entire data object`);\n        }\n        if (coreQuestions.length === 0) {\n          console.error(`‚ùå Could not find questions array in core data structure:`, Object.keys(coreData));\n        }\n      } catch (error) {\n        console.error(`‚ùå Error loading core questions for ${assessmentType}:`, error);\n      }\n      console.log(`üìä Loaded ${coreQuestions.length} core questions`);\n\n      // LOAD SERVICE QUESTIONS\n      let serviceQuestions = [];\n      const selectedServices = getContext('selectedServices');\n      console.log('üè¢ Selected services', selectedServices);\n      try {\n        // First try to load from service-questions.json\n        let serviceModule;\n        try {\n          serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n          console.log(`‚úÖ Loaded service-questions.json for ${assessmentType}`);\n        } catch (error) {\n          console.log(`‚ùå No service-questions.json found for ${assessmentType}, trying activity-questions.json`);\n          // Fallback to activity-questions.json if service-questions.json doesn't exist\n          serviceModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n          console.log(`‚úÖ Loaded activity-questions.json as fallback`);\n        }\n        const serviceData = serviceModule.default || serviceModule;\n        console.log('üìÅ Service questions data structure', Object.keys(serviceData));\n        if (selectedServices && Array.isArray(selectedServices) && selectedServices.length > 0) {\n          // Check threshold for including service-specific questions (minimum 5% allocation)\n          const allocationThreshold = 5; // 5%\n\n          // Map selected service IDs to their corresponding question categories\n          const selectedServiceIds = selectedServices.filter(svc => svc.allocation >= allocationThreshold).map(svc => svc.id);\n          console.log('üîë Selected service IDs above threshold', selectedServiceIds);\n\n          // Extract service questions based on the structure\n          if (serviceData.serviceQuestions) {\n            console.log('üîç Available service categories:', Object.keys(serviceData.serviceQuestions));\n            for (const serviceKey in serviceData.serviceQuestions) {\n              // Check if this service matches any of our selected services\n              // (either by direct ID match or by name fuzzy match)\n              const isServiceSelected = selectedServiceIds.some(id => {\n                // Direct match by ID\n                if (id === serviceKey) {\n                  console.log(`‚úÖ Found direct match for service: ${serviceKey}`);\n                  return true;\n                }\n\n                // Try to match by name (case insensitive partial match)\n                const serviceName = serviceData.serviceQuestions[serviceKey].serviceName;\n                if (serviceName) {\n                  // Check if the service ID contains part of the service name or vice versa\n                  const idMatch = id.toLowerCase().includes(serviceName.toLowerCase());\n                  const nameMatch = serviceName.toLowerCase().includes(id.toLowerCase());\n                  if (idMatch || nameMatch) {\n                    console.log(`‚úÖ Found fuzzy match: ${id} ‚âà ${serviceName} (${serviceKey})`);\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isServiceSelected) {\n                const serviceInfo = serviceData.serviceQuestions[serviceKey];\n                if (serviceInfo.questions && Array.isArray(serviceInfo.questions)) {\n                  console.log(`üìä Adding ${serviceInfo.questions.length} questions for service ${serviceKey}`);\n\n                  // Log the question IDs for debugging\n                  const questionIds = serviceInfo.questions.map(q => q.id);\n                  console.log(`üÜî Service ${serviceKey} question IDs:`, questionIds);\n                  serviceQuestions = serviceQuestions.concat(serviceInfo.questions);\n                }\n              } else {\n                console.log(`‚ùå Service ${serviceKey} not selected or below threshold`);\n              }\n            }\n          } else {\n            console.warn('‚ùå No serviceQuestions property found in service data');\n          }\n        } else {\n          console.warn('‚ùå No services selected or invalid selectedServices format:', selectedServices);\n        }\n      } catch (error) {\n        console.error('‚ùå Error loading service questions:', error);\n      }\n      console.log(`üìä Found ${serviceQuestions.length} service-specific questions`);\n\n      // REMOVE DUPLICATES AND VALIDATE QUESTIONS\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // Process core questions first\n      coreQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            console.log(`‚ö†Ô∏è Skipping invalid question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            console.log(`‚ö†Ô∏è Skipping invalid service question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      console.log(`üìä Total unique questions to display: ${uniqueQuestions.length}`);\n      console.log('üÜî Question IDs:', Array.from(questionIds));\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('‚ùå Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load initial questions and answers\n  useEffect(() => {\n    const loadInitialData = async () => {\n      // Get previously saved answers if available\n      const savedAnswers = getResponse('answers') || {};\n      debugLog('Loaded saved answers', savedAnswers);\n      setAllAnswers(savedAnswers);\n\n      // Load questions from JSON file\n      await loadQuestions();\n    };\n    loadInitialData();\n  }, [assessmentType, getResponse]);\n\n  // Handle answer changes\n  const handleAnswerChange = (questionId, answer) => {\n    const updatedAnswers = {\n      ...allAnswers,\n      [questionId]: answer\n    };\n    setAllAnswers(updatedAnswers);\n    saveResponse('answers', updatedAnswers);\n    debugLog(`Answer updated for question ${questionId}:`, answer);\n  };\n\n  // Navigation functions\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      window.scrollTo(0, 0);\n    } else {\n      // Save final answers and complete\n      saveResponse('answers', allAnswers);\n      debugLog('Total questions:', questions.length);\n\n      // Before completing, ensure selectedServices is stored in both context and responses\n      if (typeof getContext === 'function') {\n        const selectedServices = getContext('selectedServices');\n        if (selectedServices && typeof saveResponse === 'function') {\n          // Save as a response to ensure it's available in both places\n          saveResponse('selectedServices', selectedServices);\n          debugLog('Saved selectedServices to responses as backup', selectedServices);\n        }\n      }\n\n      // Set a global flag to indicate this component has completed with answers\n      if (typeof window !== 'undefined') {\n        window.dynamicQuestionsCompleted = true;\n        window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n      }\n\n      // Move to the next stage using onComplete callback\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  };\n  const handleBack = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n      window.scrollTo(0, 0);\n    } else {\n      // Go back to previous component\n      if (onBack) {\n        onBack();\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.loadingSpinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: styles.loadingText,\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: styles.errorHeading,\n        children: \"Error: No questions found for this assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.errorButton,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this);\n  }\n  const currentQuestionData = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.questionsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.assessmentTitle,\n        children: assessmentType === 'agency-vulnerability' ? 'Agency AI Vulnerability Assessment' : 'Marketing Assessment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.questionCounter,\n        children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this), currentQuestionData && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: currentQuestionData,\n      answer: allAnswers[currentQuestionData.id] || '',\n      onAnswerChange: answer => handleAnswerChange(currentQuestionData.id, answer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      currentStep: currentQuestion + 1,\n      totalSteps: questions.length,\n      onNext: handleNext,\n      onBack: handleBack,\n      nextDisabled: !allAnswers[currentQuestionData === null || currentQuestionData === void 0 ? void 0 : currentQuestionData.id],\n      progress: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"7o4OKYpJxzVQ21ub/a49dFS10wg=\", false, function () {\n  return [useNavigate];\n});\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","QuestionCard","Navigation","styles","jsxDEV","_jsxDEV","DEBUG_MODE","process","env","NODE_ENV","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","allAnswers","setAllAnswers","loading","setLoading","navigate","debugLog","args","console","log","loadQuestions","coreQuestions","categoryQuestionCounts","extractQuestionsFromNestedObject","obj","path","extractedQuestions","Array","isArray","length","key","newPath","concat","nestedQuestions","coreModule","coreData","default","Object","keys","category","coreQuestionIds","map","q","id","error","serviceQuestions","selectedServices","serviceModule","serviceData","allocationThreshold","selectedServiceIds","filter","svc","allocation","serviceKey","isServiceSelected","some","serviceName","idMatch","toLowerCase","includes","nameMatch","serviceInfo","questionIds","warn","uniqueQuestions","Set","forEach","has","options","add","push","from","loadInitialData","savedAnswers","handleAnswerChange","questionId","answer","updatedAnswers","handleNext","window","scrollTo","dynamicQuestionsCompleted","dynamicQuestionsAnswerCount","handleBack","className","loadingContainer","children","loadingSpinner","fileName","_jsxFileName","lineNumber","columnNumber","loadingText","errorContainer","errorHeading","onClick","errorButton","currentQuestionData","questionsContainer","questionHeader","assessmentTitle","questionCounter","question","onAnswerChange","currentStep","totalSteps","onNext","nextDisabled","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\nconst DEBUG_MODE = process.env.NODE_ENV === 'development';\n\nconst DynamicQuestions = ({\n    assessmentType,\n    saveResponse,\n    getResponse,\n    getContext,\n    onComplete,\n    onBack,\n    progress = 50\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [allAnswers, setAllAnswers] = useState({});\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    // Helper function for debugging - only logs in development mode\n    const debugLog = (...args) => {\n        if (DEBUG_MODE) {\n            console.log(...args);\n        }\n    };\n\n    // Load questions from appropriate JSON files based on assessment type\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            console.log(`üîç [${assessmentType}] LOADING QUESTIONS - DEBUGGING ISSUE`);\n            \n            // Load core questions\n            let coreQuestions = [];\n            let categoryQuestionCounts = {};\n            \n            // Function to recursively extract questions from nested structure\n            const extractQuestionsFromNestedObject = (obj, path = '') => {\n                let extractedQuestions = [];\n                \n                // Base case: If it's an array, we assume it's an array of questions\n                if (Array.isArray(obj)) {\n                    console.log(`üî¢ Found ${obj.length} questions array at path: ${path}`);\n                    // Count questions per category for debugging\n                    if (path) {\n                        categoryQuestionCounts[path] = obj.length;\n                    }\n                    return obj;\n                }\n                \n                // If it's an object, traverse its properties\n                if (obj && typeof obj === 'object') {\n                    for (const key in obj) {\n                        const newPath = path ? `${path}.${key}` : key;\n                        \n                        if (Array.isArray(obj[key])) {\n                            // Found an array, add its items to our questions\n                            console.log(`üî¢ Found ${obj[key].length} questions in ${newPath}`);\n                            categoryQuestionCounts[newPath] = obj[key].length;\n                            extractedQuestions = extractedQuestions.concat(obj[key]);\n                        } else if (obj[key] && typeof obj[key] === 'object') {\n                            // Found a nested object, recursively extract questions from it\n                            const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n                            if (nestedQuestions.length > 0) {\n                                console.log(`‚ûï Adding ${nestedQuestions.length} questions from ${newPath}`);\n                                extractedQuestions = extractedQuestions.concat(nestedQuestions);\n                            }\n                        }\n                    }\n                }\n                \n                return extractedQuestions;\n            };\n            \n            // LOAD CORE QUESTIONS\n            try {\n                const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n                const coreData = coreModule.default || coreModule;\n                \n                console.log(`üìÅ [${assessmentType}] Core questions data structure:`, Object.keys(coreData));\n                \n                // Handle different possible structures\n                if (Array.isArray(coreData)) {\n                    // Direct array structure\n                    coreQuestions = coreData;\n                    console.log(`üìä Loaded ${coreQuestions.length} core questions (direct array)`);\n                } else if (coreData.coreQuestions) {\n                    // Structure with coreQuestions property\n                    if (Array.isArray(coreData.coreQuestions)) {\n                        // coreQuestions is a direct array\n                        coreQuestions = coreData.coreQuestions;\n                        console.log(`üìä Loaded ${coreQuestions.length} core questions from coreQuestions array`);\n                    } else {\n                        // coreQuestions is an object with nested question arrays\n                        console.log(`üîç Extracting questions from nested coreQuestions object with categories:`, Object.keys(coreData.coreQuestions));\n                        \n                        // First, let's log all the categories and their question counts\n                        for (const category in coreData.coreQuestions) {\n                            if (Array.isArray(coreData.coreQuestions[category])) {\n                                console.log(`üìä Category ${category} has ${coreData.coreQuestions[category].length} direct questions`);\n                            } else if (typeof coreData.coreQuestions[category] === 'object') {\n                                console.log(`üîç Category ${category} has nested structure:`, Object.keys(coreData.coreQuestions[category]));\n                            }\n                        }\n                        \n                        coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n                        console.log(`üìä Category question counts:`, categoryQuestionCounts);\n                        console.log(`üìä Total extracted core questions: ${coreQuestions.length}`);\n                        \n                        // Verify by listing all question IDs\n                        const coreQuestionIds = coreQuestions.map(q => q.id);\n                        console.log(`üÜî Core question IDs:`, coreQuestionIds);\n                    }\n                } else {\n                    // Try to extract questions from the entire object\n                    coreQuestions = extractQuestionsFromNestedObject(coreData);\n                    console.log(`üìä Extracted ${coreQuestions.length} questions from entire data object`);\n                }\n                \n                if (coreQuestions.length === 0) {\n                    console.error(`‚ùå Could not find questions array in core data structure:`, Object.keys(coreData));\n                }\n            } catch (error) {\n                console.error(`‚ùå Error loading core questions for ${assessmentType}:`, error);\n            }\n            \n            console.log(`üìä Loaded ${coreQuestions.length} core questions`);\n            \n            // LOAD SERVICE QUESTIONS\n            let serviceQuestions = [];\n            const selectedServices = getContext('selectedServices');\n            console.log('üè¢ Selected services', selectedServices);\n            \n            try {\n                // First try to load from service-questions.json\n                let serviceModule;\n                try {\n                    serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    console.log(`‚úÖ Loaded service-questions.json for ${assessmentType}`);\n                } catch (error) {\n                    console.log(`‚ùå No service-questions.json found for ${assessmentType}, trying activity-questions.json`);\n                    // Fallback to activity-questions.json if service-questions.json doesn't exist\n                    serviceModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n                    console.log(`‚úÖ Loaded activity-questions.json as fallback`);\n                }\n                \n                const serviceData = serviceModule.default || serviceModule;\n                console.log('üìÅ Service questions data structure', Object.keys(serviceData));\n                \n                if (selectedServices && Array.isArray(selectedServices) && selectedServices.length > 0) {\n                    // Check threshold for including service-specific questions (minimum 5% allocation)\n                    const allocationThreshold = 5; // 5%\n                    \n                    // Map selected service IDs to their corresponding question categories\n                    const selectedServiceIds = selectedServices\n                        .filter(svc => svc.allocation >= allocationThreshold)\n                        .map(svc => svc.id);\n                    \n                    console.log('üîë Selected service IDs above threshold', selectedServiceIds);\n                    \n                    // Extract service questions based on the structure\n                    if (serviceData.serviceQuestions) {\n                        console.log('üîç Available service categories:', Object.keys(serviceData.serviceQuestions));\n                        \n                        for (const serviceKey in serviceData.serviceQuestions) {\n                            // Check if this service matches any of our selected services\n                            // (either by direct ID match or by name fuzzy match)\n                            const isServiceSelected = selectedServiceIds.some(id => {\n                                // Direct match by ID\n                                if (id === serviceKey) {\n                                    console.log(`‚úÖ Found direct match for service: ${serviceKey}`);\n                                    return true;\n                                }\n                                \n                                // Try to match by name (case insensitive partial match)\n                                const serviceName = serviceData.serviceQuestions[serviceKey].serviceName;\n                                if (serviceName) {\n                                    // Check if the service ID contains part of the service name or vice versa\n                                    const idMatch = id.toLowerCase().includes(serviceName.toLowerCase());\n                                    const nameMatch = serviceName.toLowerCase().includes(id.toLowerCase());\n                                    if (idMatch || nameMatch) {\n                                        console.log(`‚úÖ Found fuzzy match: ${id} ‚âà ${serviceName} (${serviceKey})`);\n                                        return true;\n                                    }\n                                }\n                                return false;\n                            });\n                            \n                            if (isServiceSelected) {\n                                const serviceInfo = serviceData.serviceQuestions[serviceKey];\n                                if (serviceInfo.questions && Array.isArray(serviceInfo.questions)) {\n                                    console.log(`üìä Adding ${serviceInfo.questions.length} questions for service ${serviceKey}`);\n                                    \n                                    // Log the question IDs for debugging\n                                    const questionIds = serviceInfo.questions.map(q => q.id);\n                                    console.log(`üÜî Service ${serviceKey} question IDs:`, questionIds);\n                                    \n                                    serviceQuestions = serviceQuestions.concat(serviceInfo.questions);\n                                }\n                            } else {\n                                console.log(`‚ùå Service ${serviceKey} not selected or below threshold`);\n                            }\n                        }\n                    } else {\n                        console.warn('‚ùå No serviceQuestions property found in service data');\n                    }\n                } else {\n                    console.warn('‚ùå No services selected or invalid selectedServices format:', selectedServices);\n                }\n            } catch (error) {\n                console.error('‚ùå Error loading service questions:', error);\n            }\n            \n            console.log(`üìä Found ${serviceQuestions.length} service-specific questions`);\n            \n            // REMOVE DUPLICATES AND VALIDATE QUESTIONS\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // Process core questions first\n            coreQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        console.log(`‚ö†Ô∏è Skipping invalid question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        console.log(`‚ö†Ô∏è Skipping invalid service question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            console.log(`üìä Total unique questions to display: ${uniqueQuestions.length}`);\n            console.log('üÜî Question IDs:', Array.from(questionIds));\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('‚ùå Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Load initial questions and answers\n    useEffect(() => {\n        const loadInitialData = async () => {\n            // Get previously saved answers if available\n            const savedAnswers = getResponse('answers') || {};\n            debugLog('Loaded saved answers', savedAnswers);\n            setAllAnswers(savedAnswers);\n            \n            // Load questions from JSON file\n            await loadQuestions();\n        };\n        \n        loadInitialData();\n    }, [assessmentType, getResponse]);\n\n    // Handle answer changes\n    const handleAnswerChange = (questionId, answer) => {\n        const updatedAnswers = {\n            ...allAnswers,\n            [questionId]: answer\n        };\n        \n        setAllAnswers(updatedAnswers);\n        saveResponse('answers', updatedAnswers);\n        debugLog(`Answer updated for question ${questionId}:`, answer);\n    };\n\n    // Navigation functions\n    const handleNext = () => {\n        if (currentQuestion < questions.length - 1) {\n            setCurrentQuestion(currentQuestion + 1);\n            window.scrollTo(0, 0);\n        } else {\n            // Save final answers and complete\n            saveResponse('answers', allAnswers);\n            \n            debugLog('Total questions:', questions.length);\n            \n            // Before completing, ensure selectedServices is stored in both context and responses\n            if (typeof getContext === 'function') {\n                const selectedServices = getContext('selectedServices');\n                if (selectedServices && typeof saveResponse === 'function') {\n                    // Save as a response to ensure it's available in both places\n                    saveResponse('selectedServices', selectedServices);\n                    debugLog('Saved selectedServices to responses as backup', selectedServices);\n                }\n            }\n            \n            // Set a global flag to indicate this component has completed with answers\n            if (typeof window !== 'undefined') {\n                window.dynamicQuestionsCompleted = true;\n                window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n            }\n            \n            // Move to the next stage using onComplete callback\n            if (onComplete) {\n                onComplete();\n            }\n        }\n    };\n\n    const handleBack = () => {\n        if (currentQuestion > 0) {\n            setCurrentQuestion(currentQuestion - 1);\n            window.scrollTo(0, 0);\n        } else {\n            // Go back to previous component\n            if (onBack) {\n                onBack();\n            }\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.loadingSpinner}></div>\n                <h3 className={styles.loadingText}>\n                    Loading questions...\n                </h3>\n            </div>\n        );\n    }\n\n    if (questions.length === 0) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3 className={styles.errorHeading}>\n                    Error: No questions found for this assessment\n                </h3>\n                <button \n                    onClick={onBack} \n                    className={styles.errorButton}\n                >\n                    Go Back\n                </button>\n            </div>\n        );\n    }\n\n    const currentQuestionData = questions[currentQuestion];\n    \n    return (\n        <div className={styles.questionsContainer}>\n            <div className={styles.questionHeader}>\n                <h2 className={styles.assessmentTitle}>\n                    {assessmentType === 'agency-vulnerability' \n                        ? 'Agency AI Vulnerability Assessment' \n                        : 'Marketing Assessment'}\n                </h2>\n                <p className={styles.questionCounter}>\n                    Question {currentQuestion + 1} of {questions.length}\n                </p>\n            </div>\n            \n            {currentQuestionData && (\n                <QuestionCard\n                    question={currentQuestionData}\n                    answer={allAnswers[currentQuestionData.id] || ''}\n                    onAnswerChange={(answer) => handleAnswerChange(currentQuestionData.id, answer)}\n                />\n            )}\n            \n            <Navigation \n                currentStep={currentQuestion + 1}\n                totalSteps={questions.length}\n                onNext={handleNext}\n                onBack={handleBack}\n                nextDisabled={!allAnswers[currentQuestionData?.id]}\n                progress={progress}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}