{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceSelector = ({\n  assessmentType,\n  onSelect,\n  onBack\n}) => {\n  _s();\n  console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n  const [services, setServices] = useState([]);\n  const [allocations, setAllocations] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n  // Load services data based on assessment type\n  const loadServices = () => {\n    try {\n      setLoading(true);\n      console.log(`Loading services for ${assessmentType}`);\n\n      // Use the statically imported JSON data based on assessment type\n      let servicesData;\n      if (assessmentType === 'agency-vulnerability') {\n        console.log('Using agency services data');\n        servicesData = agencyServices;\n      } else if (assessmentType === 'inhouse-marketing') {\n        console.log('Using inhouse activities data');\n        servicesData = inhouseActivities;\n      } else {\n        throw new Error(`Unknown assessment type: ${assessmentType}`);\n      }\n\n      // Extract the correct data array\n      const serviceArray = assessmentType === 'agency-vulnerability' ? servicesData.services || [] : servicesData.activities || [];\n      console.log('Services data loaded:', serviceArray);\n      if (serviceArray.length > 0) {\n        setServices(serviceArray);\n\n        // Initialize allocations with 0 for each service\n        const initialAllocations = {};\n        serviceArray.forEach(service => {\n          initialAllocations[service.id] = 0;\n        });\n        setAllocations(initialAllocations);\n        setError(null);\n      } else {\n        console.error('Service data is empty:', servicesData);\n        setError('No services found for this assessment type.');\n      }\n    } catch (error) {\n      console.error('Failed to load services:', error);\n      setError(`Failed to load services: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    loadServices();\n  }, [assessmentType]);\n\n  // Handle slider value change - just update the slider value\n  const handleSliderChange = (serviceId, value) => {\n    // Parse the value to ensure it's a number\n    const newValue = parseInt(value, 10) || 0;\n    console.log(`Slider changed for service ${serviceId}: ${newValue}`);\n\n    // Update the allocations \n    setAllocations(prev => ({\n      ...prev,\n      [serviceId]: newValue\n    }));\n\n    // Log for debugging\n    setTimeout(() => {\n      console.log('Current allocations after update:', allocations);\n    }, 0);\n  };\n\n  // Handle continue button click\n  const handleContinue = () => {\n    // Get all services with non-zero allocation\n    const selectedServices = {};\n    let totalAllocation = 0;\n    console.log('Raw allocations before normalization:', allocations);\n\n    // Count total allocation for normalization\n    Object.entries(allocations).forEach(([serviceId, value]) => {\n      if (value > 0) {\n        totalAllocation += value;\n      }\n    });\n    console.log('Total allocation value:', totalAllocation);\n\n    // Normalize allocations to get proportions\n    if (totalAllocation > 0) {\n      Object.entries(allocations).forEach(([serviceId, value]) => {\n        if (value > 0) {\n          selectedServices[serviceId] = value / totalAllocation;\n          console.log(`Service ${serviceId} normalized to ${value / totalAllocation}`);\n        }\n      });\n    }\n    console.log('Final selectedServices object being passed:', selectedServices);\n\n    // Check if any services were selected\n    if (Object.keys(selectedServices).length === 0) {\n      alert('Please select at least one service by moving the sliders');\n      return;\n    }\n\n    // Pass the normalized services directly to the parent component\n    onSelect(selectedServices);\n  };\n\n  // Reset all allocations\n  const resetAllocations = () => {\n    const resetValues = {};\n    services.forEach(service => {\n      resetValues[service.id] = 0;\n    });\n    setAllocations(resetValues);\n  };\n\n  // Even distribution button - simply set all sliders to the same value (50)\n  const distributeEvenly = () => {\n    // If there are no services, don't do anything\n    if (services.length === 0) return;\n\n    // Set all sliders to 50 (middle value)\n    const newAllocations = {};\n    services.forEach(service => {\n      newAllocations[service.id] = 50;\n    });\n    setAllocations(newAllocations);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading services...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadServices,\n        className: styles.button,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please move the sliders to show the rough proportions of how your resources are distributed:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allocationControls,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetAllocations,\n        className: styles.buttonSmall,\n        children: \"Reset All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: distributeEvenly,\n        className: styles.buttonSmall,\n        children: \"Distribute Evenly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceList,\n      children: services.map(service => {\n        const currentAllocation = allocations[service.id] || 0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.serviceItem,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.serviceHeader,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceName,\n              children: service.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), service.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.serviceDescription,\n            children: service.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.sliderContainer,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              value: currentAllocation,\n              onChange: e => handleSliderChange(service.id, e.target.value),\n              className: styles.slider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this)]\n        }, service.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navigationButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContinue,\n        className: styles.button,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      currentStep: 2,\n      totalSteps: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n_s(ServiceSelector, \"dcDHOco/X0noQYbrNyI2ud7pwdo=\");\n_c = ServiceSelector;\nexport default ServiceSelector;\nvar _c;\n$RefreshReg$(_c, \"ServiceSelector\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","styles","agencyServices","inhouseActivities","jsxDEV","_jsxDEV","ServiceSelector","assessmentType","onSelect","onBack","_s","console","log","services","setServices","allocations","setAllocations","loading","setLoading","error","setError","loadServices","servicesData","Error","serviceArray","activities","length","initialAllocations","forEach","service","id","message","handleSliderChange","serviceId","value","newValue","parseInt","prev","setTimeout","handleContinue","selectedServices","totalAllocation","Object","entries","keys","alert","resetAllocations","resetValues","distributeEvenly","newAllocations","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","button","buttonSecondary","container","allocationControls","buttonSmall","serviceList","map","currentAllocation","serviceItem","serviceHeader","serviceName","name","description","serviceDescription","sliderContainer","type","min","max","onChange","e","target","slider","navigationButtons","currentStep","totalSteps","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\n\nconst ServiceSelector = ({ assessmentType, onSelect, onBack }) => {\n    console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n    const [services, setServices] = useState([]);\n    const [allocations, setAllocations] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n    // Load services data based on assessment type\n    const loadServices = () => {\n        try {\n            setLoading(true);\n            console.log(`Loading services for ${assessmentType}`);\n            \n            // Use the statically imported JSON data based on assessment type\n            let servicesData;\n            if (assessmentType === 'agency-vulnerability') {\n                console.log('Using agency services data');\n                servicesData = agencyServices;\n            } else if (assessmentType === 'inhouse-marketing') {\n                console.log('Using inhouse activities data');\n                servicesData = inhouseActivities;\n            } else {\n                throw new Error(`Unknown assessment type: ${assessmentType}`);\n            }\n            \n            // Extract the correct data array\n            const serviceArray = assessmentType === 'agency-vulnerability'\n                ? (servicesData.services || [])\n                : (servicesData.activities || []);\n                \n            console.log('Services data loaded:', serviceArray);\n            \n            if (serviceArray.length > 0) {\n                setServices(serviceArray);\n                \n                // Initialize allocations with 0 for each service\n                const initialAllocations = {};\n                serviceArray.forEach(service => {\n                    initialAllocations[service.id] = 0;\n                });\n                setAllocations(initialAllocations);\n                \n                setError(null);\n            } else {\n                console.error('Service data is empty:', servicesData);\n                setError('No services found for this assessment type.');\n            }\n        } catch (error) {\n            console.error('Failed to load services:', error);\n            setError(`Failed to load services: ${error.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        loadServices();\n    }, [assessmentType]);\n\n    // Handle slider value change - just update the slider value\n    const handleSliderChange = (serviceId, value) => {\n        // Parse the value to ensure it's a number\n        const newValue = parseInt(value, 10) || 0;\n        console.log(`Slider changed for service ${serviceId}: ${newValue}`);\n        \n        // Update the allocations \n        setAllocations(prev => ({\n            ...prev,\n            [serviceId]: newValue\n        }));\n        \n        // Log for debugging\n        setTimeout(() => {\n            console.log('Current allocations after update:', allocations);\n        }, 0);\n    };\n\n    // Handle continue button click\n    const handleContinue = () => {\n        // Get all services with non-zero allocation\n        const selectedServices = {};\n        let totalAllocation = 0;\n        \n        console.log('Raw allocations before normalization:', allocations);\n        \n        // Count total allocation for normalization\n        Object.entries(allocations).forEach(([serviceId, value]) => {\n            if (value > 0) {\n                totalAllocation += value;\n            }\n        });\n        \n        console.log('Total allocation value:', totalAllocation);\n        \n        // Normalize allocations to get proportions\n        if (totalAllocation > 0) {\n            Object.entries(allocations).forEach(([serviceId, value]) => {\n                if (value > 0) {\n                    selectedServices[serviceId] = value / totalAllocation;\n                    console.log(`Service ${serviceId} normalized to ${value / totalAllocation}`);\n                }\n            });\n        }\n        \n        console.log('Final selectedServices object being passed:', selectedServices);\n        \n        // Check if any services were selected\n        if (Object.keys(selectedServices).length === 0) {\n            alert('Please select at least one service by moving the sliders');\n            return;\n        }\n        \n        // Pass the normalized services directly to the parent component\n        onSelect(selectedServices);\n    };\n\n    // Reset all allocations\n    const resetAllocations = () => {\n        const resetValues = {};\n        services.forEach(service => {\n            resetValues[service.id] = 0;\n        });\n        setAllocations(resetValues);\n    };\n\n    // Even distribution button - simply set all sliders to the same value (50)\n    const distributeEvenly = () => {\n        // If there are no services, don't do anything\n        if (services.length === 0) return;\n        \n        // Set all sliders to 50 (middle value)\n        const newAllocations = {};\n        services.forEach(service => {\n            newAllocations[service.id] = 50;\n        });\n        \n        setAllocations(newAllocations);\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner}></div>\n                <p>Loading services...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3>Error</h3>\n                <p>{error}</p>\n                <button onClick={loadServices} className={styles.button}>Retry</button>\n                <button onClick={onBack} className={styles.buttonSecondary}>Go Back</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2>{assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'}</h2>\n            <p>Please move the sliders to show the rough proportions of how your resources are distributed:</p>\n            \n            <div className={styles.allocationControls}>\n                <button onClick={resetAllocations} className={styles.buttonSmall}>Reset All</button>\n                <button onClick={distributeEvenly} className={styles.buttonSmall}>Distribute Evenly</button>\n            </div>\n            \n            <div className={styles.serviceList}>\n                {services.map(service => {\n                    const currentAllocation = allocations[service.id] || 0;\n                    \n                    return (\n                        <div key={service.id} className={styles.serviceItem}>\n                            <div className={styles.serviceHeader}>\n                                <span className={styles.serviceName}>{service.name}</span>\n                            </div>\n                            \n                            {service.description && (\n                                <p className={styles.serviceDescription}>{service.description}</p>\n                            )}\n                            \n                            <div className={styles.sliderContainer}>\n                                <input\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    value={currentAllocation}\n                                    onChange={(e) => handleSliderChange(service.id, e.target.value)}\n                                    className={styles.slider}\n                                />\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            \n            <div className={styles.navigationButtons}>\n                <button onClick={onBack} className={styles.buttonSecondary}>\n                    Back\n                </button>\n                <button \n                    onClick={handleContinue} \n                    className={styles.button}\n                >\n                    Continue\n                </button>\n            </div>\n            \n            <ProgressBar currentStep={2} totalSteps={5} />\n        </div>\n    );\n};\n\nexport default ServiceSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}