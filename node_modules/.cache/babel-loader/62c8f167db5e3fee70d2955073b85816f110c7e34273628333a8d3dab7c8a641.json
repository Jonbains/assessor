{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/QualifyingQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAssessment } from '../hooks/useAssessment';\nimport Navigation from './Navigation';\nimport ProgressBar from './ProgressBar';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QualifyingQuestions = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    type\n  } = useParams();\n  const {\n    assessmentData,\n    updateAssessmentData,\n    saveProgress,\n    getAssessmentConfig\n  } = useAssessment();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadQuestions();\n  }, [type]);\n  const loadQuestions = async () => {\n    try {\n      setIsLoading(true);\n      // Load qualifying questions for this assessment type\n      const config = await getAssessmentConfig(type);\n      const qualifyingData = await import(`../../assessments/${type}/qualifying.json`);\n      setQuestions(qualifyingData.questions || []);\n\n      // Load any previously saved answers\n      if (assessmentData.qualifying) {\n        setAnswers(assessmentData.qualifying);\n      }\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error loading qualifying questions:', err);\n      setError('Failed to load questions. Please try again.');\n      setIsLoading(false);\n    }\n  };\n  const handleAnswer = (questionId, value) => {\n    console.log(`Saving answer for question ${questionId}:`, value);\n    const newAnswers = {\n      ...answers,\n      [questionId]: value\n    };\n    setAnswers(newAnswers);\n\n    // Immediately save this answer to assessment data and localStorage\n    const dataToUpdate = {\n      qualifying: newAnswers\n    };\n\n    // Add derived fields for quick access\n    if (questionId === 'agency_size' || questionId === 'company_size') {\n      dataToUpdate.companySize = value;\n    } else if (questionId === 'annual_revenue') {\n      dataToUpdate.revenue = value;\n    } else if (questionId === 'budget') {\n      dataToUpdate.budget = value;\n    } else if (questionId === 'ai_experience') {\n      dataToUpdate.aiExperience = value;\n    }\n\n    // Save to assessment data which will also persist to localStorage via our hook\n    updateAssessmentData(dataToUpdate);\n    console.log('Updated assessment data with new answer');\n\n    // Direct localStorage backup as additional safety\n    try {\n      const existingData = localStorage.getItem('assessmentData');\n      const parsedData = existingData ? JSON.parse(existingData) : {\n        qualifying: {},\n        services: [],\n        responses: {}\n      };\n\n      // Update the qualifying section\n      parsedData.qualifying = newAnswers;\n\n      // Also update derived fields\n      if (questionId === 'agency_size' || questionId === 'company_size') {\n        parsedData.companySize = value;\n      } else if (questionId === 'annual_revenue') {\n        parsedData.revenue = value;\n      } else if (questionId === 'budget') {\n        parsedData.budget = value;\n      } else if (questionId === 'ai_experience') {\n        parsedData.aiExperience = value;\n      }\n      localStorage.setItem('assessmentData', JSON.stringify(parsedData));\n      console.log('Direct localStorage backup of assessment data');\n    } catch (error) {\n      console.error('Error saving direct to localStorage:', error);\n    }\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = async () => {\n    // Validate all required questions are answered\n    const requiredQuestions = questions.filter(q => q.required !== false);\n    const missingRequired = requiredQuestions.some(q => !answers[q.id]);\n    console.log('DEBUGGING ANSWERS:', answers);\n    console.log('Required Questions:', requiredQuestions.map(q => q.id));\n    console.log('Missing required:', missingRequired);\n    if (missingRequired) {\n      alert('Please answer all required questions');\n      return;\n    }\n    try {\n      // Create the data update object\n      const dataToUpdate = {\n        qualifying: answers,\n        companySize: answers.agency_size || answers.company_size,\n        revenue: answers.annual_revenue,\n        budget: answers.budget,\n        aiExperience: answers.ai_experience\n      };\n      console.log('QUALIFYING DATA BEING SAVED:', dataToUpdate);\n\n      // Step 1: Save answers to assessment data\n      await updateAssessmentData(dataToUpdate);\n      console.log('Assessment data updated, verifying by directly checking localStorage');\n\n      // Verify data was saved to localStorage\n      const savedData = localStorage.getItem('assessmentData');\n      console.log('Data in localStorage:', savedData ? JSON.parse(savedData) : 'No data found');\n\n      // Step 2: Save progress to persistence layer\n      const progressSaved = await saveProgress('qualifying');\n      console.log('Progress saved successfully:', progressSaved);\n\n      // Step 3: Navigate to next stage only if data was saved\n      const nextPath = `/assessment/${type}/services`;\n      console.log(`Navigating to ${nextPath}`);\n\n      // Force direct navigation since React Router navigation seems unreliable\n      window.location.href = nextPath;\n    } catch (error) {\n      console.error('Error in handleNext:', error);\n      alert('There was an error saving your answers. Please try again.');\n    }\n  };\n  const handleBack = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    } else {\n      navigate(`/assessment/${type}/sector`);\n    }\n  };\n  const calculateProgress = () => {\n    const answeredCount = Object.keys(answers).length;\n    const totalRequired = questions.filter(q => q.required !== false).length;\n    return answeredCount / totalRequired * 100;\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadQuestions,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const progress = calculateProgress();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress,\n      stage: \"qualifying\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Tell us about your organization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), currentQuestion.type === 'single-select' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${answers[currentQuestion.id] === option.value ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 21\n            }, this)\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this), currentQuestion.type === 'multi-select' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map(option => {\n            const currentAnswers = answers[currentQuestion.id] || [];\n            const isSelected = currentAnswers.includes(option.value);\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${styles.optionButton} ${isSelected ? styles.selected : ''}`,\n              onClick: () => {\n                const newAnswers = isSelected ? currentAnswers.filter(v => v !== option.value) : [...currentAnswers, option.value];\n                handleAnswer(currentQuestion.id, newAnswers);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.optionLabel,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 23\n              }, this)\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${answers[questions[index].id] ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handleBack,\n      onNext: isLastQuestion ? handleNext : null,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? () => {\n        if (currentQuestionIndex < questions.length - 1) {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          handleNext();\n        }\n      } : null,\n      nextLabel: isLastQuestion ? \"Continue\" : null,\n      showNext: isLastQuestion && Object.keys(answers).length > 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(QualifyingQuestions, \"IntAuZcVmMh6W74vwGuyvFJq8Hw=\", false, function () {\n  return [useNavigate, useParams, useAssessment];\n});\n_c = QualifyingQuestions;\nexport default QualifyingQuestions;\nvar _c;\n$RefreshReg$(_c, \"QualifyingQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","useAssessment","Navigation","ProgressBar","styles","jsxDEV","_jsxDEV","QualifyingQuestions","_s","navigate","type","assessmentData","updateAssessmentData","saveProgress","getAssessmentConfig","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","isLoading","setIsLoading","error","setError","loadQuestions","config","qualifyingData","qualifying","err","console","handleAnswer","questionId","value","log","newAnswers","dataToUpdate","companySize","revenue","budget","aiExperience","existingData","localStorage","getItem","parsedData","JSON","parse","services","responses","setItem","stringify","setTimeout","length","handleNext","requiredQuestions","filter","q","required","missingRequired","some","id","map","alert","agency_size","company_size","annual_revenue","ai_experience","savedData","progressSaved","nextPath","window","location","href","handleBack","calculateProgress","answeredCount","Object","keys","totalRequired","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","currentQuestion","isLastQuestion","progress","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","optionsGrid","options","option","optionButton","selected","optionLabel","label","currentAnswers","isSelected","includes","v","questionDots","_","index","dot","active","answered","onBack","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/QualifyingQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAssessment } from '../hooks/useAssessment';\nimport Navigation from './Navigation';\nimport ProgressBar from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst QualifyingQuestions = () => {\n  const navigate = useNavigate();\n  const { type } = useParams();\n  const { \n    assessmentData, \n    updateAssessmentData, \n    saveProgress,\n    getAssessmentConfig \n  } = useAssessment();\n  \n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadQuestions();\n  }, [type]);\n\n  const loadQuestions = async () => {\n    try {\n      setIsLoading(true);\n      // Load qualifying questions for this assessment type\n      const config = await getAssessmentConfig(type);\n      const qualifyingData = await import(`../../assessments/${type}/qualifying.json`);\n      \n      setQuestions(qualifyingData.questions || []);\n      \n      // Load any previously saved answers\n      if (assessmentData.qualifying) {\n        setAnswers(assessmentData.qualifying);\n      }\n      \n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error loading qualifying questions:', err);\n      setError('Failed to load questions. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnswer = (questionId, value) => {\n    console.log(`Saving answer for question ${questionId}:`, value);\n    \n    const newAnswers = { ...answers, [questionId]: value };\n    setAnswers(newAnswers);\n    \n    // Immediately save this answer to assessment data and localStorage\n    const dataToUpdate = {\n      qualifying: newAnswers\n    };\n    \n    // Add derived fields for quick access\n    if (questionId === 'agency_size' || questionId === 'company_size') {\n      dataToUpdate.companySize = value;\n    } else if (questionId === 'annual_revenue') {\n      dataToUpdate.revenue = value;\n    } else if (questionId === 'budget') {\n      dataToUpdate.budget = value;\n    } else if (questionId === 'ai_experience') {\n      dataToUpdate.aiExperience = value;\n    }\n    \n    // Save to assessment data which will also persist to localStorage via our hook\n    updateAssessmentData(dataToUpdate);\n    console.log('Updated assessment data with new answer');\n    \n    // Direct localStorage backup as additional safety\n    try {\n      const existingData = localStorage.getItem('assessmentData');\n      const parsedData = existingData ? JSON.parse(existingData) : { qualifying: {}, services: [], responses: {} };\n      \n      // Update the qualifying section\n      parsedData.qualifying = newAnswers;\n      \n      // Also update derived fields\n      if (questionId === 'agency_size' || questionId === 'company_size') {\n        parsedData.companySize = value;\n      } else if (questionId === 'annual_revenue') {\n        parsedData.revenue = value;\n      } else if (questionId === 'budget') {\n        parsedData.budget = value;\n      } else if (questionId === 'ai_experience') {\n        parsedData.aiExperience = value;\n      }\n      \n      localStorage.setItem('assessmentData', JSON.stringify(parsedData));\n      console.log('Direct localStorage backup of assessment data');\n    } catch (error) {\n      console.error('Error saving direct to localStorage:', error);\n    }\n    \n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n\n  const handleNext = async () => {\n    // Validate all required questions are answered\n    const requiredQuestions = questions.filter(q => q.required !== false);\n    const missingRequired = requiredQuestions.some(q => !answers[q.id]);\n    \n    console.log('DEBUGGING ANSWERS:', answers);\n    console.log('Required Questions:', requiredQuestions.map(q => q.id));\n    console.log('Missing required:', missingRequired);\n    \n    if (missingRequired) {\n      alert('Please answer all required questions');\n      return;\n    }\n    \n    try {\n      // Create the data update object\n      const dataToUpdate = {\n        qualifying: answers,\n        companySize: answers.agency_size || answers.company_size,\n        revenue: answers.annual_revenue,\n        budget: answers.budget,\n        aiExperience: answers.ai_experience\n      };\n      \n      console.log('QUALIFYING DATA BEING SAVED:', dataToUpdate);\n      \n      // Step 1: Save answers to assessment data\n      await updateAssessmentData(dataToUpdate);\n      console.log('Assessment data updated, verifying by directly checking localStorage');\n      \n      // Verify data was saved to localStorage\n      const savedData = localStorage.getItem('assessmentData');\n      console.log('Data in localStorage:', savedData ? JSON.parse(savedData) : 'No data found');\n      \n      // Step 2: Save progress to persistence layer\n      const progressSaved = await saveProgress('qualifying');\n      console.log('Progress saved successfully:', progressSaved);\n      \n      // Step 3: Navigate to next stage only if data was saved\n      const nextPath = `/assessment/${type}/services`;\n      console.log(`Navigating to ${nextPath}`);\n      \n      // Force direct navigation since React Router navigation seems unreliable\n      window.location.href = nextPath;\n    } catch (error) {\n      console.error('Error in handleNext:', error);\n      alert('There was an error saving your answers. Please try again.');\n    }\n  };\n\n  const handleBack = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    } else {\n      navigate(`/assessment/${type}/sector`);\n    }\n  };\n\n  const calculateProgress = () => {\n    const answeredCount = Object.keys(answers).length;\n    const totalRequired = questions.filter(q => q.required !== false).length;\n    return (answeredCount / totalRequired) * 100;\n  };\n\n  if (isLoading) {\n    return (\n      <div className={styles.loadingContainer}>\n        <div className={styles.spinner} />\n        <p>Loading questions...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={styles.errorContainer}>\n        <p>{error}</p>\n        <button onClick={loadQuestions}>Try Again</button>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const progress = calculateProgress();\n\n  return (\n    <div className={styles.qualifyingContainer}>\n      <ProgressBar progress={progress} stage=\"qualifying\" />\n      \n      <div className={styles.questionContainer}>\n        <div className={styles.questionHeader}>\n          <h2>Tell us about your organization</h2>\n          <p className={styles.questionNumber}>\n            Question {currentQuestionIndex + 1} of {questions.length}\n          </p>\n        </div>\n\n        {currentQuestion && (\n          <div className={styles.questionContent}>\n            <h3 className={styles.questionText}>\n              {currentQuestion.question}\n              {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n            </h3>\n            \n            {currentQuestion.type === 'single-select' && (\n              <div className={styles.optionsGrid}>\n                {currentQuestion.options.map((option) => (\n                  <button\n                    key={option.value}\n                    className={`${styles.optionButton} ${\n                      answers[currentQuestion.id] === option.value ? styles.selected : ''\n                    }`}\n                    onClick={() => handleAnswer(currentQuestion.id, option.value)}\n                  >\n                    <span className={styles.optionLabel}>{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            )}\n            \n            {currentQuestion.type === 'multi-select' && (\n              <div className={styles.optionsGrid}>\n                {currentQuestion.options.map((option) => {\n                  const currentAnswers = answers[currentQuestion.id] || [];\n                  const isSelected = currentAnswers.includes(option.value);\n                  \n                  return (\n                    <button\n                      key={option.value}\n                      className={`${styles.optionButton} ${isSelected ? styles.selected : ''}`}\n                      onClick={() => {\n                        const newAnswers = isSelected\n                          ? currentAnswers.filter(v => v !== option.value)\n                          : [...currentAnswers, option.value];\n                        handleAnswer(currentQuestion.id, newAnswers);\n                      }}\n                    >\n                      <span className={styles.optionLabel}>{option.label}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Question navigation dots */}\n        <div className={styles.questionDots}>\n          {questions.map((_, index) => (\n            <button\n              key={index}\n              className={`${styles.dot} ${\n                index === currentQuestionIndex ? styles.active : ''\n              } ${answers[questions[index].id] ? styles.answered : ''}`}\n              onClick={() => setCurrentQuestionIndex(index)}\n              aria-label={`Go to question ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <Navigation\n        onBack={handleBack}\n        onNext={isLastQuestion ? handleNext : null}\n        onSkip={currentQuestion?.required === false ? () => {\n          if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n          } else {\n            handleNext();\n          }\n        } : null}\n        nextLabel={isLastQuestion ? \"Continue\" : null}\n        showNext={isLastQuestion && Object.keys(answers).length > 0}\n      />\n    </div>\n  );\n};\n\nexport default QualifyingQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}