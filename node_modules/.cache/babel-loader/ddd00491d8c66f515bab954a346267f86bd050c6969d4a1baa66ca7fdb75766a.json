{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceSelector = ({\n  assessmentType,\n  onSelect,\n  onBack\n}) => {\n  _s();\n  console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n  const [services, setServices] = useState([]);\n  const [allocations, setAllocations] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n  // Load services data based on assessment type\n  const loadServices = () => {\n    try {\n      setLoading(true);\n      console.log(`Loading services for ${assessmentType}`);\n\n      // Use the statically imported JSON data based on assessment type\n      let servicesData;\n      if (assessmentType === 'agency-vulnerability') {\n        console.log('Using agency services data');\n        servicesData = agencyServices;\n      } else if (assessmentType === 'inhouse-marketing') {\n        console.log('Using inhouse activities data');\n        servicesData = inhouseActivities;\n      } else {\n        throw new Error(`Unknown assessment type: ${assessmentType}`);\n      }\n\n      // Extract the correct data array\n      const serviceArray = assessmentType === 'agency-vulnerability' ? servicesData.services || [] : servicesData.activities || [];\n      console.log('Services data loaded:', serviceArray);\n      if (serviceArray.length > 0) {\n        setServices(serviceArray);\n\n        // Initialize allocations with 0 for each service\n        const initialAllocations = {};\n        serviceArray.forEach(service => {\n          initialAllocations[service.id] = 0;\n        });\n        setAllocations(initialAllocations);\n        setError(null);\n      } else {\n        console.error('Service data is empty:', servicesData);\n        setError('No services found for this assessment type.');\n      }\n    } catch (error) {\n      console.error('Failed to load services:', error);\n      setError(`Failed to load services: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    loadServices();\n  }, [assessmentType]);\n\n  // Handle slider value change - just update the slider value\n  const handleSliderChange = (serviceId, value) => {\n    // Parse the value to ensure it's a number\n    const newValue = parseInt(value, 10) || 0;\n\n    // Update the allocations \n    setAllocations(prev => ({\n      ...prev,\n      [serviceId]: newValue\n    }));\n  };\n\n  // Handle continue button click\n  const handleContinue = () => {\n    // Get all services with values > 0\n    const selectedServices = services.filter(service => allocations[service.id] > 0);\n    if (selectedServices.length === 0) {\n      alert('Please move at least one slider to indicate your service usage.');\n      return;\n    }\n\n    // Calculate total allocation to normalize values\n    const totalAllocation = Object.values(allocations).reduce((sum, value) => sum + value, 0);\n\n    // If total is zero, distribute evenly among selected\n    if (totalAllocation === 0 && selectedServices.length > 0) {\n      const evenValue = 1 / selectedServices.length;\n      const normalizedServices = selectedServices.map(service => ({\n        id: service.id,\n        name: service.name,\n        allocation: evenValue\n      }));\n      onSelect(normalizedServices);\n      return;\n    }\n\n    // Normalize the allocations to proportions that sum to 1.0\n    const normalizedServices = selectedServices.map(service => ({\n      id: service.id,\n      name: service.name,\n      allocation: allocations[service.id] / totalAllocation\n    }));\n\n    // Call the onSelect callback with the normalized selected services\n    onSelect(normalizedServices);\n  };\n\n  // Reset all allocations\n  const resetAllocations = () => {\n    const resetValues = {};\n    services.forEach(service => {\n      resetValues[service.id] = 0;\n    });\n    setAllocations(resetValues);\n  };\n\n  // Even distribution button\n  const distributeEvenly = () => {\n    if (services.length === 0) return;\n    const equalValue = Math.floor(100 / services.length);\n    const remainder = 100 - equalValue * services.length;\n    const newAllocations = {};\n    services.forEach((service, index) => {\n      // Add the remainder to the first service\n      newAllocations[service.id] = equalValue + (index === 0 ? remainder : 0);\n    });\n    setAllocations(newAllocations);\n    setTotalAllocated(100);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading services...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadServices,\n        className: styles.button,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please allocate percentages to represent how your resources are distributed:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allocationHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.allocationTotal,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Total Allocated: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isOverAllocated ? styles.overAllocated : isFullyAllocated ? styles.fullyAllocated : '',\n          children: [percentageAllocated, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.allocationBar,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.allocationBarFill} ${isOverAllocated ? styles.overAllocated : ''}`,\n            style: {\n              width: `${Math.min(percentageAllocated, 100)}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.allocationControls,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetAllocations,\n          className: styles.buttonSmall,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: distributeEvenly,\n          className: styles.buttonSmall,\n          children: \"Distribute Evenly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceList,\n      children: services.map(service => {\n        const currentAllocation = allocations[service.id] || 0;\n        const maxAllocation = currentAllocation + getRemainingPercentage();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.serviceItem,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.serviceHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceName,\n              children: service.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceAllocation,\n              children: [currentAllocation, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this), service.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.serviceDescription,\n            children: service.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.sliderContainer,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              value: currentAllocation,\n              onChange: e => handleSliderChange(service.id, e.target.value),\n              className: styles.slider,\n              disabled: currentAllocation === 0 && maxAllocation === 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this)]\n        }, service.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navigationButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContinue,\n        className: styles.button,\n        disabled: isOverAllocated,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      currentStep: 2,\n      totalSteps: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_s(ServiceSelector, \"dcDHOco/X0noQYbrNyI2ud7pwdo=\");\n_c = ServiceSelector;\nexport default ServiceSelector;\nvar _c;\n$RefreshReg$(_c, \"ServiceSelector\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","styles","agencyServices","inhouseActivities","jsxDEV","_jsxDEV","ServiceSelector","assessmentType","onSelect","onBack","_s","console","log","services","setServices","allocations","setAllocations","loading","setLoading","error","setError","loadServices","servicesData","Error","serviceArray","activities","length","initialAllocations","forEach","service","id","message","handleSliderChange","serviceId","value","newValue","parseInt","prev","handleContinue","selectedServices","filter","alert","totalAllocation","Object","values","reduce","sum","evenValue","normalizedServices","map","name","allocation","resetAllocations","resetValues","distributeEvenly","equalValue","Math","floor","remainder","newAllocations","index","setTotalAllocated","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","button","buttonSecondary","container","allocationHeader","allocationTotal","isOverAllocated","overAllocated","isFullyAllocated","fullyAllocated","percentageAllocated","allocationBar","allocationBarFill","style","width","min","allocationControls","buttonSmall","serviceList","currentAllocation","maxAllocation","getRemainingPercentage","serviceItem","serviceHeader","serviceName","serviceAllocation","description","serviceDescription","sliderContainer","type","max","onChange","e","target","slider","disabled","navigationButtons","currentStep","totalSteps","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\n\nconst ServiceSelector = ({ assessmentType, onSelect, onBack }) => {\n    console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n    const [services, setServices] = useState([]);\n    const [allocations, setAllocations] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n    // Load services data based on assessment type\n    const loadServices = () => {\n        try {\n            setLoading(true);\n            console.log(`Loading services for ${assessmentType}`);\n            \n            // Use the statically imported JSON data based on assessment type\n            let servicesData;\n            if (assessmentType === 'agency-vulnerability') {\n                console.log('Using agency services data');\n                servicesData = agencyServices;\n            } else if (assessmentType === 'inhouse-marketing') {\n                console.log('Using inhouse activities data');\n                servicesData = inhouseActivities;\n            } else {\n                throw new Error(`Unknown assessment type: ${assessmentType}`);\n            }\n            \n            // Extract the correct data array\n            const serviceArray = assessmentType === 'agency-vulnerability'\n                ? (servicesData.services || [])\n                : (servicesData.activities || []);\n                \n            console.log('Services data loaded:', serviceArray);\n            \n            if (serviceArray.length > 0) {\n                setServices(serviceArray);\n                \n                // Initialize allocations with 0 for each service\n                const initialAllocations = {};\n                serviceArray.forEach(service => {\n                    initialAllocations[service.id] = 0;\n                });\n                setAllocations(initialAllocations);\n                \n                setError(null);\n            } else {\n                console.error('Service data is empty:', servicesData);\n                setError('No services found for this assessment type.');\n            }\n        } catch (error) {\n            console.error('Failed to load services:', error);\n            setError(`Failed to load services: ${error.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        loadServices();\n    }, [assessmentType]);\n\n    // Handle slider value change - just update the slider value\n    const handleSliderChange = (serviceId, value) => {\n        // Parse the value to ensure it's a number\n        const newValue = parseInt(value, 10) || 0;\n        \n        // Update the allocations \n        setAllocations(prev => ({\n            ...prev,\n            [serviceId]: newValue\n        }));\n    };\n\n    // Handle continue button click\n    const handleContinue = () => {\n        // Get all services with values > 0\n        const selectedServices = services\n            .filter(service => allocations[service.id] > 0);\n            \n        if (selectedServices.length === 0) {\n            alert('Please move at least one slider to indicate your service usage.');\n            return;\n        }\n        \n        // Calculate total allocation to normalize values\n        const totalAllocation = Object.values(allocations).reduce((sum, value) => sum + value, 0);\n        \n        // If total is zero, distribute evenly among selected\n        if (totalAllocation === 0 && selectedServices.length > 0) {\n            const evenValue = 1 / selectedServices.length;\n            const normalizedServices = selectedServices.map(service => ({\n                id: service.id,\n                name: service.name,\n                allocation: evenValue\n            }));\n            onSelect(normalizedServices);\n            return;\n        }\n        \n        // Normalize the allocations to proportions that sum to 1.0\n        const normalizedServices = selectedServices.map(service => ({\n            id: service.id,\n            name: service.name,\n            allocation: allocations[service.id] / totalAllocation\n        }));\n        \n        // Call the onSelect callback with the normalized selected services\n        onSelect(normalizedServices);\n    };\n\n    // Reset all allocations\n    const resetAllocations = () => {\n        const resetValues = {};\n        services.forEach(service => {\n            resetValues[service.id] = 0;\n        });\n        setAllocations(resetValues);\n    };\n\n    // Even distribution button\n    const distributeEvenly = () => {\n        if (services.length === 0) return;\n        \n        const equalValue = Math.floor(100 / services.length);\n        const remainder = 100 - (equalValue * services.length);\n        \n        const newAllocations = {};\n        services.forEach((service, index) => {\n            // Add the remainder to the first service\n            newAllocations[service.id] = equalValue + (index === 0 ? remainder : 0);\n        });\n        \n        setAllocations(newAllocations);\n        setTotalAllocated(100);\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner}></div>\n                <p>Loading services...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3>Error</h3>\n                <p>{error}</p>\n                <button onClick={loadServices} className={styles.button}>Retry</button>\n                <button onClick={onBack} className={styles.buttonSecondary}>Go Back</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2>{assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'}</h2>\n            <p>Please allocate percentages to represent how your resources are distributed:</p>\n            \n            <div className={styles.allocationHeader}>\n                <div className={styles.allocationTotal}>\n                    <span>Total Allocated: </span>\n                    <span className={isOverAllocated ? styles.overAllocated : isFullyAllocated ? styles.fullyAllocated : ''}>\n                        {percentageAllocated}%\n                    </span>\n                    <div className={styles.allocationBar}>\n                        <div \n                            className={`${styles.allocationBarFill} ${isOverAllocated ? styles.overAllocated : ''}`}\n                            style={{ width: `${Math.min(percentageAllocated, 100)}%` }}\n                        ></div>\n                    </div>\n                </div>\n                <div className={styles.allocationControls}>\n                    <button onClick={resetAllocations} className={styles.buttonSmall}>Reset</button>\n                    <button onClick={distributeEvenly} className={styles.buttonSmall}>Distribute Evenly</button>\n                </div>\n            </div>\n            \n            <div className={styles.serviceList}>\n                {services.map(service => {\n                    const currentAllocation = allocations[service.id] || 0;\n                    const maxAllocation = currentAllocation + getRemainingPercentage();\n                    \n                    return (\n                        <div key={service.id} className={styles.serviceItem}>\n                            <div className={styles.serviceHeader}>\n                                <span className={styles.serviceName}>{service.name}</span>\n                                <span className={styles.serviceAllocation}>{currentAllocation}%</span>\n                            </div>\n                            \n                            {service.description && (\n                                <p className={styles.serviceDescription}>{service.description}</p>\n                            )}\n                            \n                            <div className={styles.sliderContainer}>\n                                <input\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    value={currentAllocation}\n                                    onChange={(e) => handleSliderChange(service.id, e.target.value)}\n                                    className={styles.slider}\n                                    disabled={currentAllocation === 0 && maxAllocation === 0}\n                                />\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            \n            <div className={styles.navigationButtons}>\n                <button onClick={onBack} className={styles.buttonSecondary}>\n                    Back\n                </button>\n                <button \n                    onClick={handleContinue} \n                    className={styles.button}\n                    disabled={isOverAllocated}\n                >\n                    Continue\n                </button>\n            </div>\n            \n            <ProgressBar currentStep={2} totalSteps={5} />\n        </div>\n    );\n};\n\nexport default ServiceSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}