{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { QuestionCard } from './QuestionCard';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  var _assessmentData2;\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        var _assessmentData, _assessmentData$servi;\n        setLoading(true);\n        // Load questions based on assessment type\n        const module = await import(`../../assessments/${type}/questions.json`);\n        const data = module.default || module;\n\n        // Flatten the coreQuestions object into an array\n        const coreQuestions = Object.values(data.coreQuestions || {}).flat();\n\n        // If we have selected services, load service-specific questions\n        let serviceQuestions = [];\n        if (((_assessmentData = assessmentData) === null || _assessmentData === void 0 ? void 0 : (_assessmentData$servi = _assessmentData.services) === null || _assessmentData$servi === void 0 ? void 0 : _assessmentData$servi.length) > 0) {\n          try {\n            const serviceModule = await import(`../../assessments/${type}/service-questions.json`);\n            const serviceData = serviceModule.default || serviceModule;\n\n            // Filter questions based on selected services\n            assessmentData.services.forEach(serviceId => {\n              if (serviceData[serviceId]) {\n                serviceQuestions = [...serviceQuestions, ...serviceData[serviceId]];\n              }\n            });\n          } catch (err) {\n            console.error('Error loading service questions:', err);\n          }\n        }\n\n        // Combine all question types\n        const allQuestions = [...coreQuestions, ...serviceQuestions];\n        setQuestions(allQuestions);\n      } catch (error) {\n        console.error('Failed to load questions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadQuestions();\n  }, [type, (_assessmentData2 = assessmentData) === null || _assessmentData2 === void 0 ? void 0 : _assessmentData2.services]);\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (value, option) => {\n    if (currentQuestion) {\n      saveResponse(currentQuestion.id, value);\n    }\n  };\n  const handleNext = async () => {\n    if (isLastQuestion) {\n      // Save progress before moving to email gate\n      await saveProgress('questions');\n      navigate(`/assessment/${type}/email`);\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      navigate(`/assessment/${type}/services`);\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.screen,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.logo,\n        children: [\"obsolete\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: assessmentProgress || 65,\n        label: \"Step 5 of 7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: currentQuestion,\n      questionNumber: currentQuestionIndex + 1,\n      totalQuestions: questions.length,\n      selectedValue: selectedValue,\n      onSelect: handleAnswer,\n      insight: currentQuestion.insight,\n      benchmark: currentQuestion.benchmark\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navigation,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.navButton,\n        onClick: handlePrevious,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.navButton} ${styles.skip}`,\n        onClick: handleSkip,\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.navButton} ${styles.primary}`,\n        disabled: !selectedValue,\n        onClick: handleNext,\n        children: isLastQuestion ? 'Complete' : 'Continue'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","QuestionCard","ProgressBar","styles","jsxDEV","_jsxDEV","DynamicQuestions","assessmentType","saveResponse","getResponse","onComplete","onBack","progress","_s","_assessmentData2","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","_assessmentData","_assessmentData$servi","module","type","data","default","coreQuestions","Object","values","flat","serviceQuestions","assessmentData","services","length","serviceModule","serviceData","forEach","serviceId","err","console","error","allQuestions","currentQuestion","isLastQuestion","handleAnswer","value","option","id","handleNext","saveProgress","navigate","prev","handlePrevious","handleSkip","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedValue","className","screen","header","logo","assessmentProgress","label","question","questionNumber","totalQuestions","onSelect","insight","benchmark","navigation","navButton","onClick","skip","primary","disabled","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { QuestionCard } from './QuestionCard';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const loadQuestions = async () => {\n            try {\n                setLoading(true);\n                // Load questions based on assessment type\n                const module = await import(`../../assessments/${type}/questions.json`);\n                const data = module.default || module;\n                \n                // Flatten the coreQuestions object into an array\n                const coreQuestions = Object.values(data.coreQuestions || {}).flat();\n                \n                // If we have selected services, load service-specific questions\n                let serviceQuestions = [];\n                if (assessmentData?.services?.length > 0) {\n                    try {\n                        const serviceModule = await import(`../../assessments/${type}/service-questions.json`);\n                        const serviceData = serviceModule.default || serviceModule;\n                        \n                        // Filter questions based on selected services\n                        assessmentData.services.forEach(serviceId => {\n                            if (serviceData[serviceId]) {\n                                serviceQuestions = [...serviceQuestions, ...serviceData[serviceId]];\n                            }\n                        });\n                    } catch (err) {\n                        console.error('Error loading service questions:', err);\n                    }\n                }\n                \n                // Combine all question types\n                const allQuestions = [\n                    ...coreQuestions,\n                    ...serviceQuestions\n                ];\n                \n                setQuestions(allQuestions);\n            } catch (error) {\n                console.error('Failed to load questions:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadQuestions();\n    }, [type, assessmentData?.services]);\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (value, option) => {\n        if (currentQuestion) {\n            saveResponse(currentQuestion.id, value);\n        }\n    };\n\n    const handleNext = async () => {\n        if (isLastQuestion) {\n            // Save progress before moving to email gate\n            await saveProgress('questions');\n            navigate(`/assessment/${type}/email`);\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            navigate(`/assessment/${type}/services`);\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return <div>Loading questions...</div>;\n    }\n\n    if (!currentQuestion) {\n        return <div>No questions available</div>;\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.screen}>\n            <div className={styles.header}>\n                <div className={styles.logo}>obsolete<span>.</span></div>\n                <ProgressBar progress={assessmentProgress || 65} label=\"Step 5 of 7\" />\n            </div>\n            \n            <QuestionCard\n                question={currentQuestion}\n                questionNumber={currentQuestionIndex + 1}\n                totalQuestions={questions.length}\n                selectedValue={selectedValue}\n                onSelect={handleAnswer}\n                insight={currentQuestion.insight}\n                benchmark={currentQuestion.benchmark}\n            />\n            \n            <div className={styles.navigation}>\n                <button className={styles.navButton} onClick={handlePrevious}>\n                    ← Back\n                </button>\n                <button className={`${styles.navButton} ${styles.skip}`} onClick={handleSkip}>\n                    Skip\n                </button>\n                <button \n                    className={`${styles.navButton} ${styles.primary}`}\n                    disabled={!selectedValue}\n                    onClick={handleNext}\n                >\n                    {isLastQuestion ? 'Complete' : 'Continue'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}