{"ast":null,"code":"export class FlowController {\n  constructor(config) {\n    this.config = config;\n    this.stages = ['sector', 'qualifying', 'services', 'questions', 'email', 'results'];\n    this.currentStageIndex = 0;\n  }\n  start() {\n    this.currentStageIndex = 0;\n  }\n  getCurrentStage() {\n    return this.stages[this.currentStageIndex];\n  }\n  advance() {\n    if (this.shouldSkipStage()) {\n      this.currentStageIndex++;\n      return this.advance();\n    }\n    if (this.currentStageIndex < this.stages.length - 1) {\n      this.currentStageIndex++;\n    }\n    return this.getCurrentStage();\n  }\n  goBack() {\n    if (this.currentStageIndex > 0) {\n      this.currentStageIndex--;\n\n      // Skip backwards through skipped stages\n      if (this.shouldSkipStage()) {\n        return this.goBack();\n      }\n    }\n    return this.getCurrentStage();\n  }\n  setStage(stageName) {\n    const index = this.stages.indexOf(stageName);\n    if (index !== -1) {\n      this.currentStageIndex = index;\n    }\n  }\n  shouldSkipStage() {\n    const currentStage = this.getCurrentStage();\n\n    // Add skip logic based on assessment type and previous answers\n    // For example, skip sector selection if already specified in URL\n    if (currentStage === 'sector' && this.config.skipSector) {\n      return true;\n    }\n    return false;\n  }\n  getRelevantQuestions(dataManager) {\n    const selectedServices = dataManager.getContext('selectedServices') || [];\n    const qualifyingAnswers = dataManager.getContext('qualifying') || {};\n\n    // Filter questions based on selections\n    const allQuestions = this.config.questions || [];\n    return allQuestions.filter(question => {\n      // Check service relevance\n      if (question.services && question.services.length > 0) {\n        const hasRelevantService = question.services.some(service => selectedServices.includes(service));\n        if (!hasRelevantService) return false;\n      }\n\n      // Check qualifying conditions\n      if (question.conditions) {\n        const meetsConditions = Object.entries(question.conditions).every(([key, allowedValues]) => {\n          const actualValue = qualifyingAnswers[key];\n          return allowedValues.includes(actualValue);\n        });\n        if (!meetsConditions) return false;\n      }\n      return true;\n    });\n  }\n  getProgress() {\n    const totalStages = this.stages.length;\n    const completedStages = this.currentStageIndex;\n    return {\n      current: completedStages + 1,\n      total: totalStages,\n      percentage: Math.round(completedStages / (totalStages - 1) * 100),\n      stageName: this.getCurrentStage()\n    };\n  }\n  isComplete() {\n    return this.currentStageIndex === this.stages.length - 1;\n  }\n  reset() {\n    this.currentStageIndex = 0;\n  }\n}\nexport default FlowController;","map":{"version":3,"names":["FlowController","constructor","config","stages","currentStageIndex","start","getCurrentStage","advance","shouldSkipStage","length","goBack","setStage","stageName","index","indexOf","currentStage","skipSector","getRelevantQuestions","dataManager","selectedServices","getContext","qualifyingAnswers","allQuestions","questions","filter","question","services","hasRelevantService","some","service","includes","conditions","meetsConditions","Object","entries","every","key","allowedValues","actualValue","getProgress","totalStages","completedStages","current","total","percentage","Math","round","isComplete","reset"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/FlowController.js"],"sourcesContent":["\nexport class FlowController {\n    constructor(config) {\n        this.config = config;\n        this.stages = [\n            'sector',\n            'qualifying',\n            'services',\n            'questions',\n            'email',\n            'results'\n        ];\n        this.currentStageIndex = 0;\n    }\n\n    start() {\n        this.currentStageIndex = 0;\n    }\n\n    getCurrentStage() {\n        return this.stages[this.currentStageIndex];\n    }\n\n    advance() {\n        if (this.shouldSkipStage()) {\n            this.currentStageIndex++;\n            return this.advance();\n        }\n\n        if (this.currentStageIndex < this.stages.length - 1) {\n            this.currentStageIndex++;\n        }\n\n        return this.getCurrentStage();\n    }\n\n    goBack() {\n        if (this.currentStageIndex > 0) {\n            this.currentStageIndex--;\n            \n            // Skip backwards through skipped stages\n            if (this.shouldSkipStage()) {\n                return this.goBack();\n            }\n        }\n        return this.getCurrentStage();\n    }\n\n    setStage(stageName) {\n        const index = this.stages.indexOf(stageName);\n        if (index !== -1) {\n            this.currentStageIndex = index;\n        }\n    }\n\n    shouldSkipStage() {\n        const currentStage = this.getCurrentStage();\n        \n        // Add skip logic based on assessment type and previous answers\n        // For example, skip sector selection if already specified in URL\n        if (currentStage === 'sector' && this.config.skipSector) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    getRelevantQuestions(dataManager) {\n        const selectedServices = dataManager.getContext('selectedServices') || [];\n        const qualifyingAnswers = dataManager.getContext('qualifying') || {};\n        \n        // Filter questions based on selections\n        const allQuestions = this.config.questions || [];\n        \n        return allQuestions.filter(question => {\n            // Check service relevance\n            if (question.services && question.services.length > 0) {\n                const hasRelevantService = question.services.some(service => \n                    selectedServices.includes(service)\n                );\n                if (!hasRelevantService) return false;\n            }\n            \n            // Check qualifying conditions\n            if (question.conditions) {\n                const meetsConditions = Object.entries(question.conditions).every(\n                    ([key, allowedValues]) => {\n                        const actualValue = qualifyingAnswers[key];\n                        return allowedValues.includes(actualValue);\n                    }\n                );\n                if (!meetsConditions) return false;\n            }\n            \n            return true;\n        });\n    }\n\n    getProgress() {\n        const totalStages = this.stages.length;\n        const completedStages = this.currentStageIndex;\n        return {\n            current: completedStages + 1,\n            total: totalStages,\n            percentage: Math.round((completedStages / (totalStages - 1)) * 100),\n            stageName: this.getCurrentStage()\n        };\n    }\n\n    isComplete() {\n        return this.currentStageIndex === this.stages.length - 1;\n    }\n\n    reset() {\n        this.currentStageIndex = 0;\n    }\n}\n\nexport default FlowController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}