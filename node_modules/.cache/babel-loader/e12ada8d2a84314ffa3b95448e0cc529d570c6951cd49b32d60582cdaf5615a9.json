{"ast":null,"code":"export class ScoringEngine {\n  constructor(customScoring, assessmentType = 'agency-vulnerability') {\n    this.customScoring = customScoring;\n    this.assessmentType = assessmentType;\n    this.weights = (customScoring === null || customScoring === void 0 ? void 0 : customScoring.weights) || this.defaultWeights;\n    this.specificScoringEngine = null;\n\n    // Initialize the specific scoring engine\n    this.initializeSpecificEngine();\n  }\n\n  /**\n   * Dynamically load and instantiate the assessment-specific scoring engine\n   */\n  async initializeSpecificEngine() {\n    try {\n      // Dynamically import the appropriate scoring engine based on assessment type\n      const scoringModule = await import(`../../assessments/${this.assessmentType}/scoring.js`);\n      const ScoringClass = scoringModule.default;\n      if (ScoringClass) {\n        this.specificScoringEngine = new ScoringClass(this.customScoring);\n        console.log(`Loaded specific scoring engine for ${this.assessmentType}`);\n      } else {\n        console.warn(`Scoring module found for ${this.assessmentType} but no default export`);\n      }\n    } catch (error) {\n      console.error(`Failed to load scoring engine for ${this.assessmentType}:`, error);\n      // Continue with base implementation if specific engine can't be loaded\n    }\n  }\n  async calculate(responses, context) {\n    var _this$customScoring;\n    // Ensure specific scoring engine is initialized\n    if (!this.specificScoringEngine) {\n      await this.initializeSpecificEngine();\n    }\n\n    // If we have a specific scoring engine, use it\n    if (this.specificScoringEngine && this.specificScoringEngine.calculateScores) {\n      try {\n        // Use the assessment-specific calculation method\n        const specificScores = this.specificScoringEngine.calculateScores(responses, context);\n\n        // Format the result to match our expected structure\n        return {\n          overall: specificScores.overallScore || specificScores.overall || 0,\n          dimensions: specificScores.dimensions || specificScores,\n          insights: this.generateInsights(specificScores, context)\n        };\n      } catch (error) {\n        console.error('Error using specific scoring engine:', error);\n        // Fall back to base implementation\n      }\n    }\n\n    // Base scoring logic used by all assessments (fallback)\n    console.log('Using base scoring implementation');\n    let scores = this.calculateDimensionScores(responses);\n\n    // Apply custom scoring if provided\n    if ((_this$customScoring = this.customScoring) !== null && _this$customScoring !== void 0 && _this$customScoring.calculate) {\n      scores = this.customScoring.calculate(scores, responses, context);\n    }\n\n    // Apply context-based adjustments\n    scores = this.applyContextAdjustments(scores, context);\n    return {\n      overall: this.calculateOverallScore(scores),\n      dimensions: scores,\n      insights: this.generateInsights(scores, context)\n    };\n  }\n  calculateDimensionScores(responses) {\n    // Implementation for base dimension calculation\n    return {};\n  }\n  calculateOverallScore(dimensionScores) {\n    // Implementation for overall score calculation\n    return 0;\n  }\n  applyContextAdjustments(scores, context) {\n    // Apply size, industry, or other contextual adjustments\n    return scores;\n  }\n  generateInsights(scores, context) {\n    // Generate insights based on scores\n    return [];\n  }\n\n  /**\n   * Generate a complete assessment report with detailed insights and recommendations\n   * Delegates to assessment-specific report generation if available\n   */\n  async generateReport(scores, context) {\n    // Ensure specific scoring engine is initialized\n    if (!this.specificScoringEngine) {\n      await this.initializeSpecificEngine();\n    }\n\n    // If specific scoring engine has report generation capabilities, use them\n    if (this.specificScoringEngine) {\n      // Check for various report generation methods that might exist in specific engines\n      if (typeof this.specificScoringEngine.generateReport === 'function') {\n        return this.specificScoringEngine.generateReport(scores, context);\n      }\n\n      // Check for other report methods that might exist\n      if (typeof this.specificScoringEngine.identifyTransformationPriorities === 'function') {\n        var _this$specificScoring, _this$specificScoring2;\n        // For agency scoring\n        const priorities = this.specificScoringEngine.identifyTransformationPriorities(scores.dimensions, context.selectedServices ? this.specificScoringEngine.calculateServiceScores(scores, context.selectedServices) : {}, ((_this$specificScoring = (_this$specificScoring2 = this.specificScoringEngine).calculateDetailedRiskFactors) === null || _this$specificScoring === void 0 ? void 0 : _this$specificScoring.call(_this$specificScoring2, scores, context)) || {}, context.agencySize || context.companySize);\n\n        // Build a report structure with the priorities\n        return this.generateBaseReport(scores, context, priorities);\n      } else if (typeof this.specificScoringEngine.identifyPriorities === 'function') {\n        // For inhouse marketing scoring\n        const priorities = this.specificScoringEngine.identifyPriorities(scores.categoryScores || {}, scores.activityScores || {}, context.selectedActivities || [], context.companySize || context.teamSize);\n\n        // Build a report structure with the priorities\n        return this.generateBaseReport(scores, context, priorities);\n      }\n    }\n\n    // Fallback to basic report generation\n    return this.generateBaseReport(scores, context);\n  }\n\n  /**\n   * Generate a basic report structure as fallback\n   */\n  generateBaseReport(scores, context, priorities = []) {\n    const title = this.assessmentType === 'inhouse-marketing' ? 'Marketing AI Maturity Assessment' : 'Agency AI Vulnerability Assessment';\n    return {\n      title: title,\n      summary: this.generateSummary(scores),\n      executive: {\n        headline: 'Your Assessment Results',\n        subheadline: 'Detailed analysis and recommendations below',\n        overallScore: scores.overall || 0\n      },\n      readiness: {\n        title: `${this.assessmentType === 'inhouse-marketing' ? 'Marketing' : 'Agency'} AI Readiness Assessment`,\n        subtitle: 'How your organization compares across key dimensions',\n        dimensions: this.generateDimensionCards(scores)\n      },\n      recommendations: priorities || [],\n      nextSteps: {\n        booking: {\n          headline: 'Ready to move forward?',\n          subheadline: 'Schedule a consultation to get personalized insights'\n        }\n      }\n    };\n  }\n\n  /**\n   * Generate a summary based on the overall score\n   */\n  generateSummary(scores) {\n    const overallScore = scores.overall || scores.overallScore || 0;\n    if (overallScore < 30) {\n      return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} is in the early stages of AI readiness. There are significant opportunities to improve.`;\n    } else if (overallScore < 60) {\n      return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} has established some AI foundations but needs further development in key areas.`;\n    } else if (overallScore < 80) {\n      return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} demonstrates good AI maturity with specific opportunities for optimization.`;\n    } else {\n      return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} shows high AI maturity across multiple dimensions. Focus on refinement and innovation.`;\n    }\n  }\n\n  /**\n   * Generate dimension cards for the readiness section\n   */\n  generateDimensionCards(scores) {\n    const dimensionCards = [];\n    const dimensionData = scores.dimensions || {};\n\n    // Generate card for each dimension\n    Object.entries(dimensionData).forEach(([dimension, data]) => {\n      const score = typeof data === 'object' ? data.score || 0 : data || 0;\n      dimensionCards.push({\n        name: this.formatDimension(dimension),\n        score: score,\n        description: `Your ${this.formatDimension(dimension).toLowerCase()} score indicates ${score < 40 ? 'areas for improvement' : score < 70 ? 'moderate capability' : 'strong capability'}.`\n      });\n    });\n\n    // Sort by score (descending)\n    dimensionCards.sort((a, b) => b.score - a.score);\n    return dimensionCards;\n  }\n\n  /**\n   * Format dimension names for display\n   */\n  formatDimension(dimension) {\n    // Format dimension names for display\n    const dimensionLabels = {\n      'technology': 'Technology',\n      'process': 'Process',\n      'people': 'People',\n      'strategy': 'Strategy',\n      'content': 'Content',\n      'analytics': 'Analytics',\n      'humanReadiness': 'Human Readiness',\n      'technicalReadiness': 'Technical Readiness',\n      'activityAutomation': 'Activity Automation',\n      'transformation': 'Transformation',\n      'resources': 'Resources',\n      'leadership': 'Leadership',\n      'change': 'Change Readiness'\n    };\n    return dimensionLabels[dimension] || dimension.charAt(0).toUpperCase() + dimension.slice(1).replace(/([A-Z])/g, ' $1');\n  }\n}\nexport default ScoringEngine;","map":{"version":3,"names":["ScoringEngine","constructor","customScoring","assessmentType","weights","defaultWeights","specificScoringEngine","initializeSpecificEngine","scoringModule","ScoringClass","default","console","log","warn","error","calculate","responses","context","_this$customScoring","calculateScores","specificScores","overall","overallScore","dimensions","insights","generateInsights","scores","calculateDimensionScores","applyContextAdjustments","calculateOverallScore","dimensionScores","generateReport","identifyTransformationPriorities","_this$specificScoring","_this$specificScoring2","priorities","selectedServices","calculateServiceScores","calculateDetailedRiskFactors","call","agencySize","companySize","generateBaseReport","identifyPriorities","categoryScores","activityScores","selectedActivities","teamSize","title","summary","generateSummary","executive","headline","subheadline","readiness","subtitle","generateDimensionCards","recommendations","nextSteps","booking","dimensionCards","dimensionData","Object","entries","forEach","dimension","data","score","push","name","formatDimension","description","toLowerCase","sort","a","b","dimensionLabels","charAt","toUpperCase","slice","replace"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ScoringEngine.js"],"sourcesContent":["export class ScoringEngine {\n    constructor(customScoring, assessmentType = 'agency-vulnerability') {\n        this.customScoring = customScoring;\n        this.assessmentType = assessmentType;\n        this.weights = customScoring?.weights || this.defaultWeights;\n        this.specificScoringEngine = null;\n        \n        // Initialize the specific scoring engine\n        this.initializeSpecificEngine();\n    }\n    \n    /**\n     * Dynamically load and instantiate the assessment-specific scoring engine\n     */\n    async initializeSpecificEngine() {\n        try {\n            // Dynamically import the appropriate scoring engine based on assessment type\n            const scoringModule = await import(`../../assessments/${this.assessmentType}/scoring.js`);\n            const ScoringClass = scoringModule.default;\n            \n            if (ScoringClass) {\n                this.specificScoringEngine = new ScoringClass(this.customScoring);\n                console.log(`Loaded specific scoring engine for ${this.assessmentType}`);\n            } else {\n                console.warn(`Scoring module found for ${this.assessmentType} but no default export`);\n            }\n        } catch (error) {\n            console.error(`Failed to load scoring engine for ${this.assessmentType}:`, error);\n            // Continue with base implementation if specific engine can't be loaded\n        }\n    }\n\n    async calculate(responses, context) {\n        // Ensure specific scoring engine is initialized\n        if (!this.specificScoringEngine) {\n            await this.initializeSpecificEngine();\n        }\n        \n        // If we have a specific scoring engine, use it\n        if (this.specificScoringEngine && this.specificScoringEngine.calculateScores) {\n            try {\n                // Use the assessment-specific calculation method\n                const specificScores = this.specificScoringEngine.calculateScores(responses, context);\n                \n                // Format the result to match our expected structure\n                return {\n                    overall: specificScores.overallScore || specificScores.overall || 0,\n                    dimensions: specificScores.dimensions || specificScores,\n                    insights: this.generateInsights(specificScores, context)\n                };\n            } catch (error) {\n                console.error('Error using specific scoring engine:', error);\n                // Fall back to base implementation\n            }\n        }\n        \n        // Base scoring logic used by all assessments (fallback)\n        console.log('Using base scoring implementation');\n        let scores = this.calculateDimensionScores(responses);\n\n        // Apply custom scoring if provided\n        if (this.customScoring?.calculate) {\n            scores = this.customScoring.calculate(scores, responses, context);\n        }\n\n        // Apply context-based adjustments\n        scores = this.applyContextAdjustments(scores, context);\n\n        return {\n            overall: this.calculateOverallScore(scores),\n            dimensions: scores,\n            insights: this.generateInsights(scores, context)\n        };\n    }\n\n    calculateDimensionScores(responses) {\n        // Implementation for base dimension calculation\n        return {};\n    }\n\n    calculateOverallScore(dimensionScores) {\n        // Implementation for overall score calculation\n        return 0;\n    }\n\n    applyContextAdjustments(scores, context) {\n        // Apply size, industry, or other contextual adjustments\n        return scores;\n    }\n\n    generateInsights(scores, context) {\n        // Generate insights based on scores\n        return [];\n    }\n    \n    /**\n     * Generate a complete assessment report with detailed insights and recommendations\n     * Delegates to assessment-specific report generation if available\n     */\n    async generateReport(scores, context) {\n        // Ensure specific scoring engine is initialized\n        if (!this.specificScoringEngine) {\n            await this.initializeSpecificEngine();\n        }\n        \n        // If specific scoring engine has report generation capabilities, use them\n        if (this.specificScoringEngine) {\n            // Check for various report generation methods that might exist in specific engines\n            if (typeof this.specificScoringEngine.generateReport === 'function') {\n                return this.specificScoringEngine.generateReport(scores, context);\n            }\n            \n            // Check for other report methods that might exist\n            if (typeof this.specificScoringEngine.identifyTransformationPriorities === 'function') {\n                // For agency scoring\n                const priorities = this.specificScoringEngine.identifyTransformationPriorities(\n                    scores.dimensions, \n                    context.selectedServices ? this.specificScoringEngine.calculateServiceScores(scores, context.selectedServices) : {},\n                    this.specificScoringEngine.calculateDetailedRiskFactors?.(scores, context) || {},\n                    context.agencySize || context.companySize\n                );\n                \n                // Build a report structure with the priorities\n                return this.generateBaseReport(scores, context, priorities);\n            } else if (typeof this.specificScoringEngine.identifyPriorities === 'function') {\n                // For inhouse marketing scoring\n                const priorities = this.specificScoringEngine.identifyPriorities(\n                    scores.categoryScores || {},\n                    scores.activityScores || {},\n                    context.selectedActivities || [],\n                    context.companySize || context.teamSize\n                );\n                \n                // Build a report structure with the priorities\n                return this.generateBaseReport(scores, context, priorities);\n            }\n        }\n        \n        // Fallback to basic report generation\n        return this.generateBaseReport(scores, context);\n    }\n    \n    /**\n     * Generate a basic report structure as fallback\n     */\n    generateBaseReport(scores, context, priorities = []) {\n        const title = this.assessmentType === 'inhouse-marketing' ? \n            'Marketing AI Maturity Assessment' : \n            'Agency AI Vulnerability Assessment';\n            \n        return {\n            title: title,\n            summary: this.generateSummary(scores),\n            executive: {\n                headline: 'Your Assessment Results',\n                subheadline: 'Detailed analysis and recommendations below',\n                overallScore: scores.overall || 0\n            },\n            readiness: {\n                title: `${this.assessmentType === 'inhouse-marketing' ? 'Marketing' : 'Agency'} AI Readiness Assessment`,\n                subtitle: 'How your organization compares across key dimensions',\n                dimensions: this.generateDimensionCards(scores)\n            },\n            recommendations: priorities || [],\n            nextSteps: {\n                booking: {\n                    headline: 'Ready to move forward?',\n                    subheadline: 'Schedule a consultation to get personalized insights'\n                }\n            }\n        };\n    }\n    \n    /**\n     * Generate a summary based on the overall score\n     */\n    generateSummary(scores) {\n        const overallScore = scores.overall || scores.overallScore || 0;\n        \n        if (overallScore < 30) {\n            return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} is in the early stages of AI readiness. There are significant opportunities to improve.`;\n        } else if (overallScore < 60) {\n            return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} has established some AI foundations but needs further development in key areas.`;\n        } else if (overallScore < 80) {\n            return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} demonstrates good AI maturity with specific opportunities for optimization.`;\n        } else {\n            return `Your ${this.assessmentType === 'inhouse-marketing' ? 'marketing team' : 'agency'} shows high AI maturity across multiple dimensions. Focus on refinement and innovation.`;\n        }\n    }\n    \n    /**\n     * Generate dimension cards for the readiness section\n     */\n    generateDimensionCards(scores) {\n        const dimensionCards = [];\n        const dimensionData = scores.dimensions || {};\n        \n        // Generate card for each dimension\n        Object.entries(dimensionData).forEach(([dimension, data]) => {\n            const score = typeof data === 'object' ? (data.score || 0) : (data || 0);\n            \n            dimensionCards.push({\n                name: this.formatDimension(dimension),\n                score: score,\n                description: `Your ${this.formatDimension(dimension).toLowerCase()} score indicates ${score < 40 ? 'areas for improvement' : score < 70 ? 'moderate capability' : 'strong capability'}.`\n            });\n        });\n        \n        // Sort by score (descending)\n        dimensionCards.sort((a, b) => b.score - a.score);\n        \n        return dimensionCards;\n    }\n    \n    /**\n     * Format dimension names for display\n     */\n    formatDimension(dimension) {\n        // Format dimension names for display\n        const dimensionLabels = {\n            'technology': 'Technology',\n            'process': 'Process',\n            'people': 'People',\n            'strategy': 'Strategy',\n            'content': 'Content',\n            'analytics': 'Analytics',\n            'humanReadiness': 'Human Readiness',\n            'technicalReadiness': 'Technical Readiness',\n            'activityAutomation': 'Activity Automation',\n            'transformation': 'Transformation',\n            'resources': 'Resources',\n            'leadership': 'Leadership',\n            'change': 'Change Readiness'\n        };\n        \n        return dimensionLabels[dimension] || \n               (dimension.charAt(0).toUpperCase() + dimension.slice(1).replace(/([A-Z])/g, ' $1'));\n    }\n}\n\nexport default ScoringEngine;\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,CAAC;EACvBC,WAAWA,CAACC,aAAa,EAAEC,cAAc,GAAG,sBAAsB,EAAE;IAChE,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,OAAO,GAAG,CAAAF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEE,OAAO,KAAI,IAAI,CAACC,cAAc;IAC5D,IAAI,CAACC,qBAAqB,GAAG,IAAI;;IAEjC;IACA,IAAI,CAACC,wBAAwB,CAAC,CAAC;EACnC;;EAEA;AACJ;AACA;EACI,MAAMA,wBAAwBA,CAAA,EAAG;IAC7B,IAAI;MACA;MACA,MAAMC,aAAa,GAAG,MAAM,MAAM,CAAC,qBAAqB,IAAI,CAACL,cAAc,aAAa,CAAC;MACzF,MAAMM,YAAY,GAAGD,aAAa,CAACE,OAAO;MAE1C,IAAID,YAAY,EAAE;QACd,IAAI,CAACH,qBAAqB,GAAG,IAAIG,YAAY,CAAC,IAAI,CAACP,aAAa,CAAC;QACjES,OAAO,CAACC,GAAG,CAAC,sCAAsC,IAAI,CAACT,cAAc,EAAE,CAAC;MAC5E,CAAC,MAAM;QACHQ,OAAO,CAACE,IAAI,CAAC,4BAA4B,IAAI,CAACV,cAAc,wBAAwB,CAAC;MACzF;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,qCAAqC,IAAI,CAACX,cAAc,GAAG,EAAEW,KAAK,CAAC;MACjF;IACJ;EACJ;EAEA,MAAMC,SAASA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAAA,IAAAC,mBAAA;IAChC;IACA,IAAI,CAAC,IAAI,CAACZ,qBAAqB,EAAE;MAC7B,MAAM,IAAI,CAACC,wBAAwB,CAAC,CAAC;IACzC;;IAEA;IACA,IAAI,IAAI,CAACD,qBAAqB,IAAI,IAAI,CAACA,qBAAqB,CAACa,eAAe,EAAE;MAC1E,IAAI;QACA;QACA,MAAMC,cAAc,GAAG,IAAI,CAACd,qBAAqB,CAACa,eAAe,CAACH,SAAS,EAAEC,OAAO,CAAC;;QAErF;QACA,OAAO;UACHI,OAAO,EAAED,cAAc,CAACE,YAAY,IAAIF,cAAc,CAACC,OAAO,IAAI,CAAC;UACnEE,UAAU,EAAEH,cAAc,CAACG,UAAU,IAAIH,cAAc;UACvDI,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACL,cAAc,EAAEH,OAAO;QAC3D,CAAC;MACL,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D;MACJ;IACJ;;IAEA;IACAH,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,IAAIc,MAAM,GAAG,IAAI,CAACC,wBAAwB,CAACX,SAAS,CAAC;;IAErD;IACA,KAAAE,mBAAA,GAAI,IAAI,CAAChB,aAAa,cAAAgB,mBAAA,eAAlBA,mBAAA,CAAoBH,SAAS,EAAE;MAC/BW,MAAM,GAAG,IAAI,CAACxB,aAAa,CAACa,SAAS,CAACW,MAAM,EAAEV,SAAS,EAAEC,OAAO,CAAC;IACrE;;IAEA;IACAS,MAAM,GAAG,IAAI,CAACE,uBAAuB,CAACF,MAAM,EAAET,OAAO,CAAC;IAEtD,OAAO;MACHI,OAAO,EAAE,IAAI,CAACQ,qBAAqB,CAACH,MAAM,CAAC;MAC3CH,UAAU,EAAEG,MAAM;MAClBF,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACC,MAAM,EAAET,OAAO;IACnD,CAAC;EACL;EAEAU,wBAAwBA,CAACX,SAAS,EAAE;IAChC;IACA,OAAO,CAAC,CAAC;EACb;EAEAa,qBAAqBA,CAACC,eAAe,EAAE;IACnC;IACA,OAAO,CAAC;EACZ;EAEAF,uBAAuBA,CAACF,MAAM,EAAET,OAAO,EAAE;IACrC;IACA,OAAOS,MAAM;EACjB;EAEAD,gBAAgBA,CAACC,MAAM,EAAET,OAAO,EAAE;IAC9B;IACA,OAAO,EAAE;EACb;;EAEA;AACJ;AACA;AACA;EACI,MAAMc,cAAcA,CAACL,MAAM,EAAET,OAAO,EAAE;IAClC;IACA,IAAI,CAAC,IAAI,CAACX,qBAAqB,EAAE;MAC7B,MAAM,IAAI,CAACC,wBAAwB,CAAC,CAAC;IACzC;;IAEA;IACA,IAAI,IAAI,CAACD,qBAAqB,EAAE;MAC5B;MACA,IAAI,OAAO,IAAI,CAACA,qBAAqB,CAACyB,cAAc,KAAK,UAAU,EAAE;QACjE,OAAO,IAAI,CAACzB,qBAAqB,CAACyB,cAAc,CAACL,MAAM,EAAET,OAAO,CAAC;MACrE;;MAEA;MACA,IAAI,OAAO,IAAI,CAACX,qBAAqB,CAAC0B,gCAAgC,KAAK,UAAU,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA;QACnF;QACA,MAAMC,UAAU,GAAG,IAAI,CAAC7B,qBAAqB,CAAC0B,gCAAgC,CAC1EN,MAAM,CAACH,UAAU,EACjBN,OAAO,CAACmB,gBAAgB,GAAG,IAAI,CAAC9B,qBAAqB,CAAC+B,sBAAsB,CAACX,MAAM,EAAET,OAAO,CAACmB,gBAAgB,CAAC,GAAG,CAAC,CAAC,EACnH,EAAAH,qBAAA,IAAAC,sBAAA,OAAI,CAAC5B,qBAAqB,EAACgC,4BAA4B,cAAAL,qBAAA,uBAAvDA,qBAAA,CAAAM,IAAA,CAAAL,sBAAA,EAA0DR,MAAM,EAAET,OAAO,CAAC,KAAI,CAAC,CAAC,EAChFA,OAAO,CAACuB,UAAU,IAAIvB,OAAO,CAACwB,WAClC,CAAC;;QAED;QACA,OAAO,IAAI,CAACC,kBAAkB,CAAChB,MAAM,EAAET,OAAO,EAAEkB,UAAU,CAAC;MAC/D,CAAC,MAAM,IAAI,OAAO,IAAI,CAAC7B,qBAAqB,CAACqC,kBAAkB,KAAK,UAAU,EAAE;QAC5E;QACA,MAAMR,UAAU,GAAG,IAAI,CAAC7B,qBAAqB,CAACqC,kBAAkB,CAC5DjB,MAAM,CAACkB,cAAc,IAAI,CAAC,CAAC,EAC3BlB,MAAM,CAACmB,cAAc,IAAI,CAAC,CAAC,EAC3B5B,OAAO,CAAC6B,kBAAkB,IAAI,EAAE,EAChC7B,OAAO,CAACwB,WAAW,IAAIxB,OAAO,CAAC8B,QACnC,CAAC;;QAED;QACA,OAAO,IAAI,CAACL,kBAAkB,CAAChB,MAAM,EAAET,OAAO,EAAEkB,UAAU,CAAC;MAC/D;IACJ;;IAEA;IACA,OAAO,IAAI,CAACO,kBAAkB,CAAChB,MAAM,EAAET,OAAO,CAAC;EACnD;;EAEA;AACJ;AACA;EACIyB,kBAAkBA,CAAChB,MAAM,EAAET,OAAO,EAAEkB,UAAU,GAAG,EAAE,EAAE;IACjD,MAAMa,KAAK,GAAG,IAAI,CAAC7C,cAAc,KAAK,mBAAmB,GACrD,kCAAkC,GAClC,oCAAoC;IAExC,OAAO;MACH6C,KAAK,EAAEA,KAAK;MACZC,OAAO,EAAE,IAAI,CAACC,eAAe,CAACxB,MAAM,CAAC;MACrCyB,SAAS,EAAE;QACPC,QAAQ,EAAE,yBAAyB;QACnCC,WAAW,EAAE,6CAA6C;QAC1D/B,YAAY,EAAEI,MAAM,CAACL,OAAO,IAAI;MACpC,CAAC;MACDiC,SAAS,EAAE;QACPN,KAAK,EAAE,GAAG,IAAI,CAAC7C,cAAc,KAAK,mBAAmB,GAAG,WAAW,GAAG,QAAQ,0BAA0B;QACxGoD,QAAQ,EAAE,sDAAsD;QAChEhC,UAAU,EAAE,IAAI,CAACiC,sBAAsB,CAAC9B,MAAM;MAClD,CAAC;MACD+B,eAAe,EAAEtB,UAAU,IAAI,EAAE;MACjCuB,SAAS,EAAE;QACPC,OAAO,EAAE;UACLP,QAAQ,EAAE,wBAAwB;UAClCC,WAAW,EAAE;QACjB;MACJ;IACJ,CAAC;EACL;;EAEA;AACJ;AACA;EACIH,eAAeA,CAACxB,MAAM,EAAE;IACpB,MAAMJ,YAAY,GAAGI,MAAM,CAACL,OAAO,IAAIK,MAAM,CAACJ,YAAY,IAAI,CAAC;IAE/D,IAAIA,YAAY,GAAG,EAAE,EAAE;MACnB,OAAO,QAAQ,IAAI,CAACnB,cAAc,KAAK,mBAAmB,GAAG,gBAAgB,GAAG,QAAQ,0FAA0F;IACtL,CAAC,MAAM,IAAImB,YAAY,GAAG,EAAE,EAAE;MAC1B,OAAO,QAAQ,IAAI,CAACnB,cAAc,KAAK,mBAAmB,GAAG,gBAAgB,GAAG,QAAQ,kFAAkF;IAC9K,CAAC,MAAM,IAAImB,YAAY,GAAG,EAAE,EAAE;MAC1B,OAAO,QAAQ,IAAI,CAACnB,cAAc,KAAK,mBAAmB,GAAG,gBAAgB,GAAG,QAAQ,8EAA8E;IAC1K,CAAC,MAAM;MACH,OAAO,QAAQ,IAAI,CAACA,cAAc,KAAK,mBAAmB,GAAG,gBAAgB,GAAG,QAAQ,yFAAyF;IACrL;EACJ;;EAEA;AACJ;AACA;EACIqD,sBAAsBA,CAAC9B,MAAM,EAAE;IAC3B,MAAMkC,cAAc,GAAG,EAAE;IACzB,MAAMC,aAAa,GAAGnC,MAAM,CAACH,UAAU,IAAI,CAAC,CAAC;;IAE7C;IACAuC,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,SAAS,EAAEC,IAAI,CAAC,KAAK;MACzD,MAAMC,KAAK,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAIA,IAAI,CAACC,KAAK,IAAI,CAAC,GAAKD,IAAI,IAAI,CAAE;MAExEN,cAAc,CAACQ,IAAI,CAAC;QAChBC,IAAI,EAAE,IAAI,CAACC,eAAe,CAACL,SAAS,CAAC;QACrCE,KAAK,EAAEA,KAAK;QACZI,WAAW,EAAE,QAAQ,IAAI,CAACD,eAAe,CAACL,SAAS,CAAC,CAACO,WAAW,CAAC,CAAC,oBAAoBL,KAAK,GAAG,EAAE,GAAG,uBAAuB,GAAGA,KAAK,GAAG,EAAE,GAAG,qBAAqB,GAAG,mBAAmB;MACzL,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACAP,cAAc,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,KAAK,GAAGO,CAAC,CAACP,KAAK,CAAC;IAEhD,OAAOP,cAAc;EACzB;;EAEA;AACJ;AACA;EACIU,eAAeA,CAACL,SAAS,EAAE;IACvB;IACA,MAAMW,eAAe,GAAG;MACpB,YAAY,EAAE,YAAY;MAC1B,SAAS,EAAE,SAAS;MACpB,QAAQ,EAAE,QAAQ;MAClB,UAAU,EAAE,UAAU;MACtB,SAAS,EAAE,SAAS;MACpB,WAAW,EAAE,WAAW;MACxB,gBAAgB,EAAE,iBAAiB;MACnC,oBAAoB,EAAE,qBAAqB;MAC3C,oBAAoB,EAAE,qBAAqB;MAC3C,gBAAgB,EAAE,gBAAgB;MAClC,WAAW,EAAE,WAAW;MACxB,YAAY,EAAE,YAAY;MAC1B,QAAQ,EAAE;IACd,CAAC;IAED,OAAOA,eAAe,CAACX,SAAS,CAAC,IACzBA,SAAS,CAACY,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGb,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAE;EAC9F;AACJ;AAEA,eAAehF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}