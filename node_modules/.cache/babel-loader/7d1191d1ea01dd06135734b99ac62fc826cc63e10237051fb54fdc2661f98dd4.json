{"ast":null,"code":"import _objectSpread from\"/Users/jon/Documents/GitHub/assessor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";export class DataManager{constructor(){this.responses={};this.context={};this.metadata={startTime:new Date().toISOString(),lastUpdated:new Date().toISOString()};}saveResponse(questionId,value){this.responses[questionId]=value;this.metadata.lastUpdated=new Date().toISOString();}getResponse(questionId){return this.responses[questionId];}getResponses(){return _objectSpread({},this.responses);}setResponses(responses){this.responses=_objectSpread({},responses);}setContext(key,value){this.context[key]=value;}getContext(key){if(key){return this.context[key];}return _objectSpread({},this.context);}addToContext(updates){this.context=_objectSpread(_objectSpread({},this.context),updates);}getMetadata(){return _objectSpread({},this.metadata);}calculateCompletionTime(){const start=new Date(this.metadata.startTime);const end=new Date();const diffMs=end-start;const diffMins=Math.round(diffMs/60000);return diffMins;}reset(){this.responses={};this.context={};this.metadata={startTime:new Date().toISOString(),lastUpdated:new Date().toISOString()};}export(){return{responses:this.getResponses(),context:this.getContext(),metadata:this.getMetadata()};}import(data){if(data.responses)this.responses=data.responses;if(data.context)this.context=data.context;if(data.metadata)this.metadata=data.metadata;}}export default DataManager;","map":{"version":3,"names":["DataManager","constructor","responses","context","metadata","startTime","Date","toISOString","lastUpdated","saveResponse","questionId","value","getResponse","getResponses","_objectSpread","setResponses","setContext","key","getContext","addToContext","updates","getMetadata","calculateCompletionTime","start","end","diffMs","diffMins","Math","round","reset","export","import","data"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/DataManager.js"],"sourcesContent":["\nexport class DataManager {\n    constructor() {\n        this.responses = {};\n        this.context = {};\n        this.metadata = {\n            startTime: new Date().toISOString(),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n\n    saveResponse(questionId, value) {\n        this.responses[questionId] = value;\n        this.metadata.lastUpdated = new Date().toISOString();\n    }\n\n    getResponse(questionId) {\n        return this.responses[questionId];\n    }\n\n    getResponses() {\n        return { ...this.responses };\n    }\n\n    setResponses(responses) {\n        this.responses = { ...responses };\n    }\n\n    setContext(key, value) {\n        this.context[key] = value;\n    }\n\n    getContext(key) {\n        if (key) {\n            return this.context[key];\n        }\n        return { ...this.context };\n    }\n\n    addToContext(updates) {\n        this.context = { ...this.context, ...updates };\n    }\n\n    getMetadata() {\n        return { ...this.metadata };\n    }\n\n    calculateCompletionTime() {\n        const start = new Date(this.metadata.startTime);\n        const end = new Date();\n        const diffMs = end - start;\n        const diffMins = Math.round(diffMs / 60000);\n        return diffMins;\n    }\n\n    reset() {\n        this.responses = {};\n        this.context = {};\n        this.metadata = {\n            startTime: new Date().toISOString(),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n\n    export() {\n        return {\n            responses: this.getResponses(),\n            context: this.getContext(),\n            metadata: this.getMetadata()\n        };\n    }\n\n    import(data) {\n        if (data.responses) this.responses = data.responses;\n        if (data.context) this.context = data.context;\n        if (data.metadata) this.metadata = data.metadata;\n    }\n}\n\nexport default DataManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}