{"ast":null,"code":"export class ScoringEngine {\n  // Helper methods for category and dimension handling\n  normalizeCategory(category) {\n    // Map various category names to standard categories\n    const categoryMap = {\n      'tech': 'technology',\n      'technology': 'technology',\n      'tools': 'technology',\n      'process': 'process',\n      'processes': 'process',\n      'workflow': 'process',\n      'people': 'people',\n      'team': 'people',\n      'skills': 'people',\n      'talent': 'people',\n      'strategy': 'strategy',\n      'plan': 'strategy',\n      'planning': 'strategy',\n      'content': 'content',\n      'analytics': 'analytics'\n    };\n    return categoryMap[category.toLowerCase()] || 'technology';\n  }\n  formatDimension(dimension) {\n    // Format dimension names for display\n    const dimensionLabels = {\n      'technology': 'Technology',\n      'process': 'Process',\n      'people': 'People',\n      'strategy': 'Strategy',\n      'content': 'Content',\n      'analytics': 'Analytics'\n    };\n    return dimensionLabels[dimension.toLowerCase()] || dimension.charAt(0).toUpperCase() + dimension.slice(1);\n  }\n  generateReport(scores, context) {\n    // Generate a complete report based on scores and context\n    return {\n      title: 'Marketing Maturity Assessment',\n      summary: this.generateSummary(scores) || 'Thank you for completing the assessment.',\n      recommendations: this.generateRecommendations(scores, context),\n      nextSteps: {\n        booking: {\n          headline: 'Ready to Elevate Your Marketing?',\n          subheadline: 'Schedule a consultation to get personalized insights',\n          buttonText: 'Book Your Strategy Session'\n        },\n        urgency: {\n          message: 'Limited spots available this month'\n        },\n        testimonial: {\n          quote: 'The assessment identified exactly where we needed to focus. Six months later, our marketing ROI has doubled.',\n          author: 'Marketing Director',\n          role: 'SaaS Company',\n          result: '107% increase in qualified leads'\n        }\n      },\n      roadmap: this.generateRoadmap(scores)\n    };\n  }\n  generateDefaultReport() {\n    // Generate a default report when scoring fails\n    return {\n      title: 'Marketing Maturity Assessment',\n      summary: 'Based on your responses, we have prepared an initial assessment of your marketing maturity.',\n      recommendations: [],\n      nextSteps: {\n        booking: {\n          headline: 'Get a Complete Assessment',\n          subheadline: 'Schedule a consultation to get personalized insights',\n          buttonText: 'Book Your Strategy Session'\n        }\n      },\n      roadmap: {\n        phases: [{\n          name: 'Foundation',\n          duration: '1-3 months',\n          focus: 'Establish core marketing processes',\n          milestones: ['Marketing strategy', 'Basic analytics', 'Content planning']\n        }, {\n          name: 'Growth',\n          duration: '3-6 months',\n          focus: 'Scale effective channels',\n          milestones: ['Channel optimization', 'Automation', 'Lead scoring']\n        }]\n      }\n    };\n  }\n  generateSummary(scores) {\n    // Generate summary text based on overall score\n    if (!scores || typeof scores.overall !== 'number') {\n      return 'Thank you for completing the assessment.';\n    }\n    if (scores.overall < 30) {\n      return 'Your marketing organization is in the early stages of development. There are significant opportunities to build a more effective marketing function.';\n    } else if (scores.overall < 60) {\n      return 'Your marketing organization has established some foundations but needs further development in key areas to become fully effective.';\n    } else if (scores.overall < 80) {\n      return 'Your marketing organization demonstrates good maturity with specific opportunities for optimization to reach excellence.';\n    } else {\n      return 'Your marketing organization shows high maturity across multiple dimensions. Focus on refinement and innovation to maintain your competitive edge.';\n    }\n  }\n  generateRecommendations(scores, context) {\n    const recommendations = [];\n\n    // Only proceed if we have valid scores\n    if (!scores || !scores.dimensions) return recommendations;\n\n    // Generate recommendations for each dimension with low scores\n    Object.entries(scores.dimensions).forEach(([dimension, data]) => {\n      if (data.score < 50) {\n        switch (dimension) {\n          case 'technology':\n            recommendations.push({\n              dimension: 'technology',\n              title: 'Technology Stack Optimization',\n              description: 'Your marketing technology score indicates room for improvement.',\n              specificAction: 'Conduct a technology audit and identify critical gaps in your marketing stack.'\n            });\n            break;\n          case 'process':\n            recommendations.push({\n              dimension: 'process',\n              title: 'Process Standardization',\n              description: 'Standardizing your marketing processes will improve efficiency and consistency.',\n              specificAction: 'Document your core marketing workflows and identify bottlenecks.'\n            });\n            break;\n          case 'people':\n            recommendations.push({\n              dimension: 'people',\n              title: 'Talent Development',\n              description: 'Investing in your marketing team capabilities will drive better results.',\n              specificAction: 'Assess skill gaps and create a training plan for your marketing team.'\n            });\n            break;\n          case 'strategy':\n            recommendations.push({\n              dimension: 'strategy',\n              title: 'Strategic Planning',\n              description: 'A more robust marketing strategy will align efforts and improve outcomes.',\n              specificAction: 'Develop a comprehensive marketing strategy document with clear KPIs.'\n            });\n            break;\n          default:\n            recommendations.push({\n              dimension: dimension,\n              title: `${this.formatDimension(dimension)} Enhancement`,\n              description: `Your ${this.formatDimension(dimension)} capabilities need strengthening.`,\n              specificAction: `Evaluate your current ${dimension} approach and develop an improvement plan.`\n            });\n        }\n      }\n    });\n\n    // Add general recommendations if needed\n    if (recommendations.length === 0) {\n      recommendations.push({\n        dimension: 'general',\n        title: 'Continuous Improvement',\n        description: 'While your marketing maturity is strong, continuous improvement will maintain your advantage.',\n        specificAction: 'Establish quarterly marketing reviews to identify optimization opportunities.'\n      });\n    }\n    return recommendations;\n  }\n  generateRoadmap(scores) {\n    // Generate a roadmap based on scores\n    const phases = [{\n      name: 'Foundation',\n      duration: '1-3 months',\n      focus: 'Establish core marketing capabilities',\n      milestones: ['Develop marketing strategy', 'Implement basic analytics', 'Standardize content production', 'Set up CRM processes']\n    }, {\n      name: 'Growth',\n      duration: '3-6 months',\n      focus: 'Scale effective channels and processes',\n      milestones: ['Optimize high-performing channels', 'Implement marketing automation', 'Develop lead scoring model', 'Create customer journey maps']\n    }, {\n      name: 'Optimization',\n      duration: '6-12 months',\n      focus: 'Refine performance and integration',\n      milestones: ['Advanced attribution modeling', 'Cross-channel integration', 'Personalization at scale', 'ROI optimization']\n    }];\n    return {\n      phases\n    };\n  }\n  constructor(customScoring) {\n    this.customScoring = customScoring;\n    this.defaultWeights = {\n      technology: 0.3,\n      process: 0.3,\n      people: 0.2,\n      strategy: 0.2\n    };\n    this.weights = (customScoring === null || customScoring === void 0 ? void 0 : customScoring.weights) || this.defaultWeights;\n  }\n  calculate(responses, context) {\n    console.log('Starting score calculation with responses:', Object.keys(responses).length);\n    console.log('Context for calculation:', context);\n    try {\n      var _this$customScoring;\n      // Base scoring logic used by all assessments\n      let scores = this.calculateDimensionScores(responses);\n\n      // Apply custom scoring if provided\n      if ((_this$customScoring = this.customScoring) !== null && _this$customScoring !== void 0 && _this$customScoring.calculate) {\n        try {\n          const customScores = this.customScoring.calculate(scores, responses, context);\n          if (customScores) scores = customScores;\n        } catch (error) {\n          console.error('Error in custom scoring calculation:', error);\n        }\n      }\n\n      // Apply context-based adjustments\n      scores = this.applyContextAdjustments(scores, context);\n\n      // Calculate overall score\n      const overall = this.calculateOverallScore(scores);\n\n      // Generate insights\n      const result = {\n        scores: {\n          overall: overall,\n          categories: scores\n        },\n        insights: this.generateInsights({\n          overall,\n          dimensions: scores\n        }, context),\n        report: this.generateReport({\n          overall,\n          dimensions: scores\n        }, context)\n      };\n      console.log('Final calculation result:', result);\n      return result;\n    } catch (error) {\n      console.error('Error in score calculation:', error);\n\n      // Return a fallback result to prevent UI errors\n      return {\n        scores: {\n          overall: 50,\n          categories: {\n            technology: {\n              score: 50\n            },\n            process: {\n              score: 50\n            },\n            people: {\n              score: 50\n            },\n            strategy: {\n              score: 50\n            }\n          }\n        },\n        insights: [{\n          type: 'warning',\n          title: 'Score Calculation Issue',\n          description: 'There was an issue calculating your detailed scores.'\n        }],\n        report: this.generateDefaultReport()\n      };\n    }\n  }\n  calculateDimensionScores(responses) {\n    // Default implementation for base dimension calculation\n    console.log('Calculating dimension scores with responses:', responses);\n\n    // Extract question responses and organize them by category\n    const categories = {};\n\n    // Initialize default categories with zero scores\n    const defaultCategories = ['technology', 'process', 'people', 'strategy'];\n    defaultCategories.forEach(cat => {\n      categories[cat] = {\n        score: 0,\n        count: 0,\n        responses: []\n      };\n    });\n\n    // Process each response\n    Object.entries(responses).forEach(([questionId, answer]) => {\n      // Skip non-numeric responses or special properties\n      if (typeof answer !== 'number' || questionId === 'selectedServices') return;\n\n      // Determine category from question ID - default to 'technology' if unknown\n      // Format might be: tech_01, people_02, etc.\n      const category = questionId.split('_')[0] || 'technology';\n      const normalizedCategory = this.normalizeCategory(category);\n\n      // If category not initialized, create it\n      if (!categories[normalizedCategory]) {\n        categories[normalizedCategory] = {\n          score: 0,\n          count: 0,\n          responses: []\n        };\n      }\n\n      // Add the score (assuming questions are scored 0-5)\n      categories[normalizedCategory].score += answer;\n      categories[normalizedCategory].count++;\n      categories[normalizedCategory].responses.push({\n        id: questionId,\n        value: answer\n      });\n    });\n\n    // Calculate average scores for each category\n    const dimensionScores = {};\n    Object.entries(categories).forEach(([category, data]) => {\n      dimensionScores[category] = {\n        score: data.count > 0 ? Math.round(data.score / (data.count * 5) * 100) : 0,\n        responses: data.responses\n      };\n    });\n    console.log('Calculated dimension scores:', dimensionScores);\n    return dimensionScores;\n  }\n  calculateOverallScore(dimensionScores) {\n    // Default implementation for overall score calculation\n    console.log('Calculating overall score with dimension scores:', dimensionScores);\n    let weightedSum = 0;\n    let totalWeight = 0;\n\n    // Calculate weighted sum of dimension scores\n    Object.entries(dimensionScores).forEach(([dimension, data]) => {\n      const weight = this.weights[dimension] || 0.25; // Default equal weight if not specified\n      weightedSum += (data.score || 0) * weight;\n      totalWeight += weight;\n    });\n\n    // Calculate overall score (rounded to nearest integer)\n    const overallScore = totalWeight > 0 ? Math.round(weightedSum / totalWeight) : 50;\n    console.log('Calculated overall score:', overallScore);\n    return overallScore;\n  }\n  applyContextAdjustments(scores, context) {\n    // Apply size, industry, or other contextual adjustments\n    console.log('Applying context adjustments with context:', context);\n\n    // If no context, return scores unchanged\n    if (!context) return scores;\n\n    // Example: Adjust for company size\n    if (context.companySize) {\n      // Small companies might get a boost in technology score\n      if (context.companySize === 'small' && scores.technology) {\n        scores.technology.score = Math.min(100, scores.technology.score + 5);\n      }\n    }\n\n    // Example: Adjust for selected services\n    if (context.selectedServices) {\n      const serviceCount = Object.keys(context.selectedServices).length;\n      // More focused companies (fewer services) might score higher in strategy\n      if (serviceCount <= 2 && scores.strategy) {\n        scores.strategy.score = Math.min(100, scores.strategy.score + 5);\n      }\n    }\n    return scores;\n  }\n  generateInsights(scores, context) {\n    // Generate insights based on scores\n    const insights = [];\n\n    // Only proceed if we have valid scores\n    if (!scores) return insights;\n\n    // Generate overall insights\n    if (typeof scores.overall === 'number') {\n      if (scores.overall < 30) {\n        insights.push({\n          type: 'critical',\n          title: 'Significant Improvement Needed',\n          description: 'Your marketing maturity score indicates substantial room for improvement across multiple dimensions.'\n        });\n      } else if (scores.overall < 60) {\n        insights.push({\n          type: 'warning',\n          title: 'Building Foundations',\n          description: 'You have some marketing fundamentals in place, but there are key areas that need strengthening.'\n        });\n      } else if (scores.overall < 80) {\n        insights.push({\n          type: 'positive',\n          title: 'Solid Performance',\n          description: 'Your marketing operations show good maturity with specific opportunities for optimization.'\n        });\n      } else {\n        insights.push({\n          type: 'excellent',\n          title: 'Marketing Excellence',\n          description: 'Your marketing organization demonstrates high levels of maturity and effectiveness.'\n        });\n      }\n    }\n\n    // Generate dimension-specific insights\n    Object.entries(scores.dimensions || {}).forEach(([dimension, data]) => {\n      if (typeof data.score === 'number' && data.score < 50) {\n        insights.push({\n          type: 'opportunity',\n          dimension: dimension,\n          title: `${this.formatDimension(dimension)} Opportunity`,\n          description: `Your ${this.formatDimension(dimension)} score suggests this is a high-priority area for improvement.`\n        });\n      }\n    });\n    return insights;\n  }\n}\nexport default ScoringEngine;","map":{"version":3,"names":["ScoringEngine","normalizeCategory","category","categoryMap","toLowerCase","formatDimension","dimension","dimensionLabels","charAt","toUpperCase","slice","generateReport","scores","context","title","summary","generateSummary","recommendations","generateRecommendations","nextSteps","booking","headline","subheadline","buttonText","urgency","message","testimonial","quote","author","role","result","roadmap","generateRoadmap","generateDefaultReport","phases","name","duration","focus","milestones","overall","dimensions","Object","entries","forEach","data","score","push","description","specificAction","length","constructor","customScoring","defaultWeights","technology","process","people","strategy","weights","calculate","responses","console","log","keys","_this$customScoring","calculateDimensionScores","customScores","error","applyContextAdjustments","calculateOverallScore","categories","insights","generateInsights","report","type","defaultCategories","cat","count","questionId","answer","split","normalizedCategory","id","value","dimensionScores","Math","round","weightedSum","totalWeight","weight","overallScore","companySize","min","selectedServices","serviceCount"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ScoringEngine.js"],"sourcesContent":["export class ScoringEngine {\n    // Helper methods for category and dimension handling\n    normalizeCategory(category) {\n        // Map various category names to standard categories\n        const categoryMap = {\n            'tech': 'technology',\n            'technology': 'technology',\n            'tools': 'technology',\n            'process': 'process',\n            'processes': 'process',\n            'workflow': 'process',\n            'people': 'people',\n            'team': 'people',\n            'skills': 'people',\n            'talent': 'people',\n            'strategy': 'strategy',\n            'plan': 'strategy',\n            'planning': 'strategy',\n            'content': 'content',\n            'analytics': 'analytics'\n        };\n        \n        return categoryMap[category.toLowerCase()] || 'technology';\n    }\n    \n    formatDimension(dimension) {\n        // Format dimension names for display\n        const dimensionLabels = {\n            'technology': 'Technology',\n            'process': 'Process',\n            'people': 'People',\n            'strategy': 'Strategy',\n            'content': 'Content',\n            'analytics': 'Analytics'\n        };\n        \n        return dimensionLabels[dimension.toLowerCase()] || dimension.charAt(0).toUpperCase() + dimension.slice(1);\n    }\n    \n    generateReport(scores, context) {\n        // Generate a complete report based on scores and context\n        return {\n            title: 'Marketing Maturity Assessment',\n            summary: this.generateSummary(scores) || 'Thank you for completing the assessment.',\n            recommendations: this.generateRecommendations(scores, context),\n            nextSteps: {\n                booking: {\n                    headline: 'Ready to Elevate Your Marketing?',\n                    subheadline: 'Schedule a consultation to get personalized insights',\n                    buttonText: 'Book Your Strategy Session'\n                },\n                urgency: {\n                    message: 'Limited spots available this month'\n                },\n                testimonial: {\n                    quote: 'The assessment identified exactly where we needed to focus. Six months later, our marketing ROI has doubled.',\n                    author: 'Marketing Director',\n                    role: 'SaaS Company',\n                    result: '107% increase in qualified leads'\n                }\n            },\n            roadmap: this.generateRoadmap(scores)\n        };\n    }\n    \n    generateDefaultReport() {\n        // Generate a default report when scoring fails\n        return {\n            title: 'Marketing Maturity Assessment',\n            summary: 'Based on your responses, we have prepared an initial assessment of your marketing maturity.',\n            recommendations: [],\n            nextSteps: {\n                booking: {\n                    headline: 'Get a Complete Assessment',\n                    subheadline: 'Schedule a consultation to get personalized insights',\n                    buttonText: 'Book Your Strategy Session'\n                }\n            },\n            roadmap: {\n                phases: [\n                    {\n                        name: 'Foundation',\n                        duration: '1-3 months',\n                        focus: 'Establish core marketing processes',\n                        milestones: ['Marketing strategy', 'Basic analytics', 'Content planning']\n                    },\n                    {\n                        name: 'Growth',\n                        duration: '3-6 months',\n                        focus: 'Scale effective channels',\n                        milestones: ['Channel optimization', 'Automation', 'Lead scoring']\n                    }\n                ]\n            }\n        };\n    }\n    \n    generateSummary(scores) {\n        // Generate summary text based on overall score\n        if (!scores || typeof scores.overall !== 'number') {\n            return 'Thank you for completing the assessment.';\n        }\n        \n        if (scores.overall < 30) {\n            return 'Your marketing organization is in the early stages of development. There are significant opportunities to build a more effective marketing function.';\n        } else if (scores.overall < 60) {\n            return 'Your marketing organization has established some foundations but needs further development in key areas to become fully effective.';\n        } else if (scores.overall < 80) {\n            return 'Your marketing organization demonstrates good maturity with specific opportunities for optimization to reach excellence.';\n        } else {\n            return 'Your marketing organization shows high maturity across multiple dimensions. Focus on refinement and innovation to maintain your competitive edge.';\n        }\n    }\n    \n    generateRecommendations(scores, context) {\n        const recommendations = [];\n        \n        // Only proceed if we have valid scores\n        if (!scores || !scores.dimensions) return recommendations;\n        \n        // Generate recommendations for each dimension with low scores\n        Object.entries(scores.dimensions).forEach(([dimension, data]) => {\n            if (data.score < 50) {\n                switch (dimension) {\n                    case 'technology':\n                        recommendations.push({\n                            dimension: 'technology',\n                            title: 'Technology Stack Optimization',\n                            description: 'Your marketing technology score indicates room for improvement.',\n                            specificAction: 'Conduct a technology audit and identify critical gaps in your marketing stack.'\n                        });\n                        break;\n                    case 'process':\n                        recommendations.push({\n                            dimension: 'process',\n                            title: 'Process Standardization',\n                            description: 'Standardizing your marketing processes will improve efficiency and consistency.',\n                            specificAction: 'Document your core marketing workflows and identify bottlenecks.'\n                        });\n                        break;\n                    case 'people':\n                        recommendations.push({\n                            dimension: 'people',\n                            title: 'Talent Development',\n                            description: 'Investing in your marketing team capabilities will drive better results.',\n                            specificAction: 'Assess skill gaps and create a training plan for your marketing team.'\n                        });\n                        break;\n                    case 'strategy':\n                        recommendations.push({\n                            dimension: 'strategy',\n                            title: 'Strategic Planning',\n                            description: 'A more robust marketing strategy will align efforts and improve outcomes.',\n                            specificAction: 'Develop a comprehensive marketing strategy document with clear KPIs.'\n                        });\n                        break;\n                    default:\n                        recommendations.push({\n                            dimension: dimension,\n                            title: `${this.formatDimension(dimension)} Enhancement`,\n                            description: `Your ${this.formatDimension(dimension)} capabilities need strengthening.`,\n                            specificAction: `Evaluate your current ${dimension} approach and develop an improvement plan.`\n                        });\n                }\n            }\n        });\n        \n        // Add general recommendations if needed\n        if (recommendations.length === 0) {\n            recommendations.push({\n                dimension: 'general',\n                title: 'Continuous Improvement',\n                description: 'While your marketing maturity is strong, continuous improvement will maintain your advantage.',\n                specificAction: 'Establish quarterly marketing reviews to identify optimization opportunities.'\n            });\n        }\n        \n        return recommendations;\n    }\n    \n    generateRoadmap(scores) {\n        // Generate a roadmap based on scores\n        const phases = [\n            {\n                name: 'Foundation',\n                duration: '1-3 months',\n                focus: 'Establish core marketing capabilities',\n                milestones: [\n                    'Develop marketing strategy',\n                    'Implement basic analytics',\n                    'Standardize content production',\n                    'Set up CRM processes'\n                ]\n            },\n            {\n                name: 'Growth',\n                duration: '3-6 months',\n                focus: 'Scale effective channels and processes',\n                milestones: [\n                    'Optimize high-performing channels',\n                    'Implement marketing automation',\n                    'Develop lead scoring model',\n                    'Create customer journey maps'\n                ]\n            },\n            {\n                name: 'Optimization',\n                duration: '6-12 months',\n                focus: 'Refine performance and integration',\n                milestones: [\n                    'Advanced attribution modeling',\n                    'Cross-channel integration',\n                    'Personalization at scale',\n                    'ROI optimization'\n                ]\n            }\n        ];\n        \n        return { phases };\n    }\n    constructor(customScoring) {\n        this.customScoring = customScoring;\n        this.defaultWeights = {\n            technology: 0.3,\n            process: 0.3,\n            people: 0.2,\n            strategy: 0.2\n        };\n        this.weights = customScoring?.weights || this.defaultWeights;\n    }\n\n    calculate(responses, context) {\n        console.log('Starting score calculation with responses:', Object.keys(responses).length);\n        console.log('Context for calculation:', context);\n        \n        try {\n            // Base scoring logic used by all assessments\n            let scores = this.calculateDimensionScores(responses);\n    \n            // Apply custom scoring if provided\n            if (this.customScoring?.calculate) {\n                try {\n                    const customScores = this.customScoring.calculate(scores, responses, context);\n                    if (customScores) scores = customScores;\n                } catch (error) {\n                    console.error('Error in custom scoring calculation:', error);\n                }\n            }\n    \n            // Apply context-based adjustments\n            scores = this.applyContextAdjustments(scores, context);\n    \n            // Calculate overall score\n            const overall = this.calculateOverallScore(scores);\n            \n            // Generate insights\n            const result = {\n                scores: {\n                    overall: overall,\n                    categories: scores\n                },\n                insights: this.generateInsights({ overall, dimensions: scores }, context),\n                report: this.generateReport({ overall, dimensions: scores }, context)\n            };\n            \n            console.log('Final calculation result:', result);\n            return result;\n        } catch (error) {\n            console.error('Error in score calculation:', error);\n            \n            // Return a fallback result to prevent UI errors\n            return {\n                scores: {\n                    overall: 50,\n                    categories: {\n                        technology: { score: 50 },\n                        process: { score: 50 },\n                        people: { score: 50 },\n                        strategy: { score: 50 }\n                    }\n                },\n                insights: [{\n                    type: 'warning',\n                    title: 'Score Calculation Issue',\n                    description: 'There was an issue calculating your detailed scores.'\n                }],\n                report: this.generateDefaultReport()\n            };\n        }\n    }\n\n    calculateDimensionScores(responses) {\n        // Default implementation for base dimension calculation\n        console.log('Calculating dimension scores with responses:', responses);\n        \n        // Extract question responses and organize them by category\n        const categories = {};\n        \n        // Initialize default categories with zero scores\n        const defaultCategories = ['technology', 'process', 'people', 'strategy'];\n        defaultCategories.forEach(cat => {\n            categories[cat] = { score: 0, count: 0, responses: [] };\n        });\n        \n        // Process each response\n        Object.entries(responses).forEach(([questionId, answer]) => {\n            // Skip non-numeric responses or special properties\n            if (typeof answer !== 'number' || questionId === 'selectedServices') return;\n            \n            // Determine category from question ID - default to 'technology' if unknown\n            // Format might be: tech_01, people_02, etc.\n            const category = questionId.split('_')[0] || 'technology';\n            const normalizedCategory = this.normalizeCategory(category);\n            \n            // If category not initialized, create it\n            if (!categories[normalizedCategory]) {\n                categories[normalizedCategory] = { score: 0, count: 0, responses: [] };\n            }\n            \n            // Add the score (assuming questions are scored 0-5)\n            categories[normalizedCategory].score += answer;\n            categories[normalizedCategory].count++;\n            categories[normalizedCategory].responses.push({ id: questionId, value: answer });\n        });\n        \n        // Calculate average scores for each category\n        const dimensionScores = {};\n        Object.entries(categories).forEach(([category, data]) => {\n            dimensionScores[category] = {\n                score: data.count > 0 ? Math.round((data.score / (data.count * 5)) * 100) : 0,\n                responses: data.responses\n            };\n        });\n        \n        console.log('Calculated dimension scores:', dimensionScores);\n        return dimensionScores;\n    }\n\n    calculateOverallScore(dimensionScores) {\n        // Default implementation for overall score calculation\n        console.log('Calculating overall score with dimension scores:', dimensionScores);\n        \n        let weightedSum = 0;\n        let totalWeight = 0;\n        \n        // Calculate weighted sum of dimension scores\n        Object.entries(dimensionScores).forEach(([dimension, data]) => {\n            const weight = this.weights[dimension] || 0.25; // Default equal weight if not specified\n            weightedSum += (data.score || 0) * weight;\n            totalWeight += weight;\n        });\n        \n        // Calculate overall score (rounded to nearest integer)\n        const overallScore = totalWeight > 0 ? Math.round(weightedSum / totalWeight) : 50;\n        \n        console.log('Calculated overall score:', overallScore);\n        return overallScore;\n    }\n\n    applyContextAdjustments(scores, context) {\n        // Apply size, industry, or other contextual adjustments\n        console.log('Applying context adjustments with context:', context);\n        \n        // If no context, return scores unchanged\n        if (!context) return scores;\n        \n        // Example: Adjust for company size\n        if (context.companySize) {\n            // Small companies might get a boost in technology score\n            if (context.companySize === 'small' && scores.technology) {\n                scores.technology.score = Math.min(100, scores.technology.score + 5);\n            }\n        }\n        \n        // Example: Adjust for selected services\n        if (context.selectedServices) {\n            const serviceCount = Object.keys(context.selectedServices).length;\n            // More focused companies (fewer services) might score higher in strategy\n            if (serviceCount <= 2 && scores.strategy) {\n                scores.strategy.score = Math.min(100, scores.strategy.score + 5);\n            }\n        }\n        \n        return scores;\n    }\n\n    generateInsights(scores, context) {\n        // Generate insights based on scores\n        const insights = [];\n        \n        // Only proceed if we have valid scores\n        if (!scores) return insights;\n        \n        // Generate overall insights\n        if (typeof scores.overall === 'number') {\n            if (scores.overall < 30) {\n                insights.push({\n                    type: 'critical',\n                    title: 'Significant Improvement Needed',\n                    description: 'Your marketing maturity score indicates substantial room for improvement across multiple dimensions.'\n                });\n            } else if (scores.overall < 60) {\n                insights.push({\n                    type: 'warning',\n                    title: 'Building Foundations',\n                    description: 'You have some marketing fundamentals in place, but there are key areas that need strengthening.'\n                });\n            } else if (scores.overall < 80) {\n                insights.push({\n                    type: 'positive',\n                    title: 'Solid Performance',\n                    description: 'Your marketing operations show good maturity with specific opportunities for optimization.'\n                });\n            } else {\n                insights.push({\n                    type: 'excellent',\n                    title: 'Marketing Excellence',\n                    description: 'Your marketing organization demonstrates high levels of maturity and effectiveness.'\n                });\n            }\n        }\n        \n        // Generate dimension-specific insights\n        Object.entries(scores.dimensions || {}).forEach(([dimension, data]) => {\n            if (typeof data.score === 'number' && data.score < 50) {\n                insights.push({\n                    type: 'opportunity',\n                    dimension: dimension,\n                    title: `${this.formatDimension(dimension)} Opportunity`,\n                    description: `Your ${this.formatDimension(dimension)} score suggests this is a high-priority area for improvement.`\n                });\n            }\n        });\n        \n        return insights;\n    }\n}\n\nexport default ScoringEngine;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}