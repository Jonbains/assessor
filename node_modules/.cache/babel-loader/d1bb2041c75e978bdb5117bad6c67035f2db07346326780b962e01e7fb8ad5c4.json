{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEBUG_MODE = process.env.NODE_ENV === 'development';\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  onComplete,\n  onBack,\n  progress = 50\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [allAnswers, setAllAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Helper function for debugging - only logs in development mode\n  const debugLog = (...args) => {\n    if (DEBUG_MODE) {\n      console.log(...args);\n    }\n  };\n\n  // Load questions from appropriate JSON files based on assessment type\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      console.log(`🔍 [${assessmentType}] LOADING QUESTIONS - DEBUGGING ISSUE`);\n\n      // Load core questions\n      let coreQuestions = [];\n      let categoryQuestionCounts = {};\n\n      // Enhanced function to recursively extract questions from any nested structure\n      const extractQuestionsFromNestedObject = (obj, path = '') => {\n        let extractedQuestions = [];\n\n        // Base case: If it's an array, verify each item looks like a question (has id and options)\n        if (Array.isArray(obj)) {\n          const validQuestions = obj.filter(item => {\n            return item && typeof item === 'object' && item.id && item.options && Array.isArray(item.options) && item.options.length > 0;\n          });\n          if (validQuestions.length > 0) {\n            console.log(`🔢 Found ${validQuestions.length} valid questions at path: ${path}`);\n            // Count questions per category for debugging\n            if (path) {\n              categoryQuestionCounts[path] = validQuestions.length;\n            }\n            return validQuestions;\n          }\n          return [];\n        }\n\n        // If it's an object, traverse its properties\n        if (obj && typeof obj === 'object') {\n          // First check if this object itself is a question\n          if (obj.id && obj.options && Array.isArray(obj.options) && obj.options.length > 0) {\n            console.log(`🔢 Found individual question with ID: ${obj.id}`);\n            return [obj];\n          }\n\n          // Otherwise check all properties\n          for (const key in obj) {\n            const newPath = path ? `${path}.${key}` : key;\n            if (Array.isArray(obj[key])) {\n              // Check if this array contains question objects\n              const questions = obj[key].filter(item => {\n                return item && typeof item === 'object' && item.id && item.options && Array.isArray(item.options) && item.options.length > 0;\n              });\n              if (questions.length > 0) {\n                console.log(`🔢 Found ${questions.length} valid questions in ${newPath}`);\n                categoryQuestionCounts[newPath] = questions.length;\n                extractedQuestions = extractedQuestions.concat(questions);\n              }\n            } else if (obj[key] && typeof obj[key] === 'object') {\n              // Found a nested object, recursively extract questions from it\n              const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n              if (nestedQuestions.length > 0) {\n                console.log(`➕ Adding ${nestedQuestions.length} questions from ${newPath}`);\n                extractedQuestions = extractedQuestions.concat(nestedQuestions);\n              }\n            }\n          }\n        }\n        return extractedQuestions;\n      };\n\n      // LOAD CORE QUESTIONS\n      try {\n        const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n        const coreData = coreModule.default || coreModule;\n        console.log(`📁 [${assessmentType}] Core questions data structure:`, Object.keys(coreData));\n\n        // Handle different possible structures\n        if (Array.isArray(coreData)) {\n          // Direct array structure\n          coreQuestions = coreData;\n          console.log(`📊 Loaded ${coreQuestions.length} core questions (direct array)`);\n        } else if (coreData.coreQuestions) {\n          // Structure with coreQuestions property\n          if (Array.isArray(coreData.coreQuestions)) {\n            // coreQuestions is a direct array\n            coreQuestions = coreData.coreQuestions;\n            console.log(`📊 Loaded ${coreQuestions.length} core questions from coreQuestions array`);\n          } else {\n            // coreQuestions is an object with nested question arrays\n            console.log(`🔍 Extracting questions from nested coreQuestions object with categories:`, Object.keys(coreData.coreQuestions));\n\n            // First, let's log all the categories and their question counts\n            for (const category in coreData.coreQuestions) {\n              if (Array.isArray(coreData.coreQuestions[category])) {\n                console.log(`📊 Category ${category} has ${coreData.coreQuestions[category].length} direct questions`);\n              } else if (typeof coreData.coreQuestions[category] === 'object') {\n                console.log(`🔍 Category ${category} has nested structure:`, Object.keys(coreData.coreQuestions[category]));\n              }\n            }\n            coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n            console.log(`📊 Category question counts:`, categoryQuestionCounts);\n            console.log(`📊 Total extracted core questions: ${coreQuestions.length}`);\n\n            // Verify by listing all question IDs\n            const coreQuestionIds = coreQuestions.map(q => q.id);\n            console.log(`🆔 Core question IDs:`, coreQuestionIds);\n          }\n        } else {\n          // Try to extract questions from the entire object\n          coreQuestions = extractQuestionsFromNestedObject(coreData);\n          console.log(`📊 Extracted ${coreQuestions.length} questions from entire data object`);\n        }\n        if (coreQuestions.length === 0) {\n          console.error(`❌ Could not find questions array in core data structure:`, Object.keys(coreData));\n        }\n      } catch (error) {\n        console.error(`❌ Error loading core questions for ${assessmentType}:`, error);\n      }\n      console.log(`📊 Loaded ${coreQuestions.length} core questions`);\n\n      // LOAD SERVICE QUESTIONS\n      let serviceQuestions = [];\n      const selectedServices = getContext('selectedServices');\n      console.log('🏢 Selected services', selectedServices);\n      try {\n        // First try to load from service-questions.json\n        let serviceModule;\n        try {\n          serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n          console.log(`✅ Loaded service-questions.json for ${assessmentType}`);\n        } catch (error) {\n          console.log(`❌ No service-questions.json found for ${assessmentType}, trying activity-questions.json`);\n          // Fallback to activity-questions.json if service-questions.json doesn't exist\n          serviceModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n          console.log(`✅ Loaded activity-questions.json as fallback`);\n        }\n        const serviceData = serviceModule.default || serviceModule;\n        const serviceQuestionsData = serviceData.serviceQuestions || {};\n        console.log('📁 Service questions data structure', Object.keys(serviceData));\n\n        // Handle service ID mappings (for matching with different naming conventions)\n        const serviceIdMappings = {\n          'social': ['social', 'social-media', 'socialMedia'],\n          'paid-search': ['paid-search', 'paidSearch', 'sem', 'ppc'],\n          'content': ['content', 'content-marketing', 'contentMarketing'],\n          'seo': ['seo', 'search-engine-optimization'],\n          'email': ['email', 'email-marketing', 'emailMarketing'],\n          'web': ['web', 'website', 'web-development'],\n          'data': ['data', 'analytics', 'data-analytics'],\n          'crm': ['crm', 'customer-relationship-management'],\n          'automation': ['automation', 'marketing-automation'],\n          'strategy': ['strategy', 'marketing-strategy']\n        };\n        const ALLOCATION_THRESHOLD = 5; // 5% minimum allocation to include service questions\n\n        // Check if selectedServices is available and correctly formatted\n        if (selectedServices && typeof selectedServices === 'object') {\n          // Process each selected service\n          Object.keys(selectedServices).forEach(serviceId => {\n            const allocation = selectedServices[serviceId];\n            if (allocation >= ALLOCATION_THRESHOLD) {\n              console.log(`Service ${serviceId} allocation ${allocation} exceeds threshold`);\n\n              // Get the mapped question categories for this service ID\n              const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n              console.log(`Service ${serviceId} maps to categories`, mappedCategories);\n\n              // Process each mapped category\n              let foundQuestionsForService = false;\n              mappedCategories.forEach(mappedId => {\n                // Check if there's a direct match in serviceQuestionsData\n                if (serviceQuestionsData[mappedId]) {\n                  const serviceObj = serviceQuestionsData[mappedId];\n\n                  // Handle both structures: nested 'questions' array or direct array\n                  if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                    serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                    console.log(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`);\n                    foundQuestionsForService = true;\n                  } else if (Array.isArray(serviceObj)) {\n                    serviceQuestions = [...serviceQuestions, ...serviceObj];\n                    console.log(`Found ${serviceObj.length} questions for service ID ${mappedId}`);\n                    foundQuestionsForService = true;\n                  }\n                }\n              });\n              if (!foundQuestionsForService) {\n                console.log(`No questions found for service ${serviceId} in any mapped categories`);\n              }\n            } else {\n              console.log(`Service ${serviceId} allocation ${allocation} below threshold`);\n            }\n          });\n          console.log('🔑 Processing service questions complete');\n\n          // Log all service questions we found\n          console.log(`📊 Found ${serviceQuestions.length} total service-specific questions`);\n\n          // Verify by listing all service question IDs for debugging\n          if (serviceQuestions.length > 0) {\n            const serviceQuestionIds = serviceQuestions.map(q => q.id);\n            console.log(`🆔 Service question IDs:`, serviceQuestionIds);\n          }\n        } else {\n          console.warn('❌ No services selected or invalid selectedServices format:', selectedServices);\n        }\n      } catch (error) {\n        console.error('❌ Error loading service questions:', error);\n      }\n      console.log(`📊 Found ${serviceQuestions.length} service-specific questions`);\n\n      // REMOVE DUPLICATES AND VALIDATE QUESTIONS\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // Process core questions first\n      coreQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            console.log(`⚠️ Skipping invalid question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            console.log(`⚠️ Skipping invalid service question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      console.log(`📊 FINAL COUNT: Total unique questions to display: ${uniqueQuestions.length}`);\n      console.log('🆔 Question IDs:', Array.from(questionIds));\n\n      // Double-check for any issues with question structure\n      uniqueQuestions.forEach((q, index) => {\n        if (!q.id) console.log(`⚠️ Question at index ${index} has no ID!`, q);\n        if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n          console.log(`⚠️ Question ${q.id} has invalid options!`, q.options);\n        }\n      });\n\n      // Force log each category's question count again to make it clear\n      console.log('📊 FINAL CATEGORY QUESTION COUNTS:', categoryQuestionCounts);\n      console.log(`🔍 TOTAL CORE QUESTIONS: ${coreQuestions.length}`);\n      console.log(`🔍 TOTAL SERVICE QUESTIONS: ${serviceQuestions.length}`);\n      console.log(`🔍 TOTAL AFTER DEDUPLICATION: ${uniqueQuestions.length}`);\n      if (uniqueQuestions.length < 50) {\n        console.log('⚠️ WARNING: Expected more than 50 questions but only found', uniqueQuestions.length);\n      }\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('❌ Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load initial questions and answers\n  useEffect(() => {\n    const loadInitialData = async () => {\n      // Get previously saved answers if available\n      const savedAnswers = getResponse('answers') || {};\n      debugLog('Loaded saved answers', savedAnswers);\n      setAllAnswers(savedAnswers);\n\n      // Load questions from JSON file\n      await loadQuestions();\n    };\n    loadInitialData();\n  }, [assessmentType, getResponse]);\n\n  // Handle answer changes\n  const handleAnswerChange = (questionId, answer, optionObj = null) => {\n    console.log(`Saving answer for question ${questionId}:`, answer, optionObj);\n    const updatedAnswers = {\n      ...allAnswers,\n      [questionId]: answer\n    };\n    setAllAnswers(updatedAnswers);\n    saveResponse('answers', updatedAnswers);\n    debugLog(`Answer updated for question ${questionId}:`, answer);\n  };\n\n  // Navigation functions\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      window.scrollTo(0, 0);\n    } else {\n      // Save final answers and complete\n      saveResponse('answers', allAnswers);\n      debugLog('Total questions:', questions.length);\n\n      // Before completing, ensure selectedServices is stored in both context and responses\n      if (typeof getContext === 'function') {\n        const selectedServices = getContext('selectedServices');\n        if (selectedServices && typeof saveResponse === 'function') {\n          // Save as a response to ensure it's available in both places\n          saveResponse('selectedServices', selectedServices);\n          debugLog('Saved selectedServices to responses as backup', selectedServices);\n        }\n      }\n\n      // Set a global flag to indicate this component has completed with answers\n      if (typeof window !== 'undefined') {\n        window.dynamicQuestionsCompleted = true;\n        window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n      }\n\n      // Move to the next stage using onComplete callback\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  };\n  const handleBack = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n      window.scrollTo(0, 0);\n    } else {\n      // Go back to previous component\n      if (onBack) {\n        onBack();\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.loadingSpinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: styles.loadingText,\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: styles.errorHeading,\n        children: \"Error: No questions found for this assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.errorButton,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }, this);\n  }\n  const currentQuestionData = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.questionsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.assessmentTitle,\n        children: assessmentType === 'agency-vulnerability' ? 'Agency AI Vulnerability Assessment' : 'Marketing Assessment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.questionCounter,\n        children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }, this), currentQuestionData && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: currentQuestionData,\n      questionNumber: currentQuestion + 1,\n      totalQuestions: questions.length,\n      selectedValue: allAnswers[currentQuestionData.id] || '',\n      onSelect: (value, option) => handleAnswerChange(currentQuestionData.id, value, option)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      currentStep: currentQuestion + 1,\n      totalSteps: questions.length,\n      onNext: handleNext,\n      onBack: handleBack,\n      nextDisabled: !allAnswers[currentQuestionData === null || currentQuestionData === void 0 ? void 0 : currentQuestionData.id],\n      progress: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"7o4OKYpJxzVQ21ub/a49dFS10wg=\", false, function () {\n  return [useNavigate];\n});\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","QuestionCard","Navigation","styles","jsxDEV","_jsxDEV","DEBUG_MODE","process","env","NODE_ENV","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","allAnswers","setAllAnswers","loading","setLoading","navigate","debugLog","args","console","log","loadQuestions","coreQuestions","categoryQuestionCounts","extractQuestionsFromNestedObject","obj","path","extractedQuestions","Array","isArray","validQuestions","filter","item","id","options","length","key","newPath","concat","nestedQuestions","coreModule","coreData","default","Object","keys","category","coreQuestionIds","map","q","error","serviceQuestions","selectedServices","serviceModule","serviceData","serviceQuestionsData","serviceIdMappings","ALLOCATION_THRESHOLD","forEach","serviceId","allocation","mappedCategories","foundQuestionsForService","mappedId","serviceObj","serviceQuestionIds","warn","uniqueQuestions","questionIds","Set","has","add","push","from","index","loadInitialData","savedAnswers","handleAnswerChange","questionId","answer","optionObj","updatedAnswers","handleNext","window","scrollTo","dynamicQuestionsCompleted","dynamicQuestionsAnswerCount","handleBack","className","loadingContainer","children","loadingSpinner","fileName","_jsxFileName","lineNumber","columnNumber","loadingText","errorContainer","errorHeading","onClick","errorButton","currentQuestionData","questionsContainer","questionHeader","assessmentTitle","questionCounter","question","questionNumber","totalQuestions","selectedValue","onSelect","value","option","currentStep","totalSteps","onNext","nextDisabled","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\nconst DEBUG_MODE = process.env.NODE_ENV === 'development';\n\nconst DynamicQuestions = ({\n    assessmentType,\n    saveResponse,\n    getResponse,\n    getContext,\n    onComplete,\n    onBack,\n    progress = 50\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [allAnswers, setAllAnswers] = useState({});\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    // Helper function for debugging - only logs in development mode\n    const debugLog = (...args) => {\n        if (DEBUG_MODE) {\n            console.log(...args);\n        }\n    };\n\n    // Load questions from appropriate JSON files based on assessment type\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            console.log(`🔍 [${assessmentType}] LOADING QUESTIONS - DEBUGGING ISSUE`);\n            \n            // Load core questions\n            let coreQuestions = [];\n            let categoryQuestionCounts = {};\n            \n            // Enhanced function to recursively extract questions from any nested structure\n            const extractQuestionsFromNestedObject = (obj, path = '') => {\n                let extractedQuestions = [];\n                \n                // Base case: If it's an array, verify each item looks like a question (has id and options)\n                if (Array.isArray(obj)) {\n                    const validQuestions = obj.filter(item => {\n                        return item && typeof item === 'object' && item.id && \n                               item.options && Array.isArray(item.options) && item.options.length > 0;\n                    });\n                    \n                    if (validQuestions.length > 0) {\n                        console.log(`🔢 Found ${validQuestions.length} valid questions at path: ${path}`);\n                        // Count questions per category for debugging\n                        if (path) {\n                            categoryQuestionCounts[path] = validQuestions.length;\n                        }\n                        return validQuestions;\n                    }\n                    return [];\n                }\n                \n                // If it's an object, traverse its properties\n                if (obj && typeof obj === 'object') {\n                    // First check if this object itself is a question\n                    if (obj.id && obj.options && Array.isArray(obj.options) && obj.options.length > 0) {\n                        console.log(`🔢 Found individual question with ID: ${obj.id}`);\n                        return [obj];\n                    }\n                    \n                    // Otherwise check all properties\n                    for (const key in obj) {\n                        const newPath = path ? `${path}.${key}` : key;\n                        \n                        if (Array.isArray(obj[key])) {\n                            // Check if this array contains question objects\n                            const questions = obj[key].filter(item => {\n                                return item && typeof item === 'object' && item.id && \n                                      item.options && Array.isArray(item.options) && item.options.length > 0;\n                            });\n                            \n                            if (questions.length > 0) {\n                                console.log(`🔢 Found ${questions.length} valid questions in ${newPath}`);\n                                categoryQuestionCounts[newPath] = questions.length;\n                                extractedQuestions = extractedQuestions.concat(questions);\n                            }\n                        } else if (obj[key] && typeof obj[key] === 'object') {\n                            // Found a nested object, recursively extract questions from it\n                            const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n                            if (nestedQuestions.length > 0) {\n                                console.log(`➕ Adding ${nestedQuestions.length} questions from ${newPath}`);\n                                extractedQuestions = extractedQuestions.concat(nestedQuestions);\n                            }\n                        }\n                    }\n                }\n                \n                return extractedQuestions;\n            };\n            \n            // LOAD CORE QUESTIONS\n            try {\n                const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n                const coreData = coreModule.default || coreModule;\n                \n                console.log(`📁 [${assessmentType}] Core questions data structure:`, Object.keys(coreData));\n                \n                // Handle different possible structures\n                if (Array.isArray(coreData)) {\n                    // Direct array structure\n                    coreQuestions = coreData;\n                    console.log(`📊 Loaded ${coreQuestions.length} core questions (direct array)`);\n                } else if (coreData.coreQuestions) {\n                    // Structure with coreQuestions property\n                    if (Array.isArray(coreData.coreQuestions)) {\n                        // coreQuestions is a direct array\n                        coreQuestions = coreData.coreQuestions;\n                        console.log(`📊 Loaded ${coreQuestions.length} core questions from coreQuestions array`);\n                    } else {\n                        // coreQuestions is an object with nested question arrays\n                        console.log(`🔍 Extracting questions from nested coreQuestions object with categories:`, Object.keys(coreData.coreQuestions));\n                        \n                        // First, let's log all the categories and their question counts\n                        for (const category in coreData.coreQuestions) {\n                            if (Array.isArray(coreData.coreQuestions[category])) {\n                                console.log(`📊 Category ${category} has ${coreData.coreQuestions[category].length} direct questions`);\n                            } else if (typeof coreData.coreQuestions[category] === 'object') {\n                                console.log(`🔍 Category ${category} has nested structure:`, Object.keys(coreData.coreQuestions[category]));\n                            }\n                        }\n                        \n                        coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n                        console.log(`📊 Category question counts:`, categoryQuestionCounts);\n                        console.log(`📊 Total extracted core questions: ${coreQuestions.length}`);\n                        \n                        // Verify by listing all question IDs\n                        const coreQuestionIds = coreQuestions.map(q => q.id);\n                        console.log(`🆔 Core question IDs:`, coreQuestionIds);\n                    }\n                } else {\n                    // Try to extract questions from the entire object\n                    coreQuestions = extractQuestionsFromNestedObject(coreData);\n                    console.log(`📊 Extracted ${coreQuestions.length} questions from entire data object`);\n                }\n                \n                if (coreQuestions.length === 0) {\n                    console.error(`❌ Could not find questions array in core data structure:`, Object.keys(coreData));\n                }\n            } catch (error) {\n                console.error(`❌ Error loading core questions for ${assessmentType}:`, error);\n            }\n            \n            console.log(`📊 Loaded ${coreQuestions.length} core questions`);\n            \n            // LOAD SERVICE QUESTIONS\n            let serviceQuestions = [];\n            const selectedServices = getContext('selectedServices');\n            console.log('🏢 Selected services', selectedServices);\n            \n            try {\n                // First try to load from service-questions.json\n                let serviceModule;\n                try {\n                    serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    console.log(`✅ Loaded service-questions.json for ${assessmentType}`);\n                } catch (error) {\n                    console.log(`❌ No service-questions.json found for ${assessmentType}, trying activity-questions.json`);\n                    // Fallback to activity-questions.json if service-questions.json doesn't exist\n                    serviceModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n                    console.log(`✅ Loaded activity-questions.json as fallback`);\n                }\n                \n                const serviceData = serviceModule.default || serviceModule;\n                const serviceQuestionsData = serviceData.serviceQuestions || {};\n                console.log('📁 Service questions data structure', Object.keys(serviceData));\n                \n                // Handle service ID mappings (for matching with different naming conventions)\n                const serviceIdMappings = {\n                    'social': ['social', 'social-media', 'socialMedia'],\n                    'paid-search': ['paid-search', 'paidSearch', 'sem', 'ppc'],\n                    'content': ['content', 'content-marketing', 'contentMarketing'],\n                    'seo': ['seo', 'search-engine-optimization'],\n                    'email': ['email', 'email-marketing', 'emailMarketing'],\n                    'web': ['web', 'website', 'web-development'],\n                    'data': ['data', 'analytics', 'data-analytics'],\n                    'crm': ['crm', 'customer-relationship-management'],\n                    'automation': ['automation', 'marketing-automation'],\n                    'strategy': ['strategy', 'marketing-strategy']\n                };\n                \n                const ALLOCATION_THRESHOLD = 5; // 5% minimum allocation to include service questions\n                \n                // Check if selectedServices is available and correctly formatted\n                if (selectedServices && typeof selectedServices === 'object') {\n                    // Process each selected service\n                    Object.keys(selectedServices).forEach(serviceId => {\n                        const allocation = selectedServices[serviceId];\n                        \n                        if (allocation >= ALLOCATION_THRESHOLD) {\n                            console.log(`Service ${serviceId} allocation ${allocation} exceeds threshold`);\n                            \n                            // Get the mapped question categories for this service ID\n                            const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                            console.log(`Service ${serviceId} maps to categories`, mappedCategories);\n                            \n                            // Process each mapped category\n                            let foundQuestionsForService = false;\n                            \n                            mappedCategories.forEach(mappedId => {\n                                // Check if there's a direct match in serviceQuestionsData\n                                if (serviceQuestionsData[mappedId]) {\n                                    const serviceObj = serviceQuestionsData[mappedId];\n                                    \n                                    // Handle both structures: nested 'questions' array or direct array\n                                    if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                        serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                        console.log(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`);\n                                        foundQuestionsForService = true;\n                                    } else if (Array.isArray(serviceObj)) {\n                                        serviceQuestions = [...serviceQuestions, ...serviceObj];\n                                        console.log(`Found ${serviceObj.length} questions for service ID ${mappedId}`);\n                                        foundQuestionsForService = true;\n                                    }\n                                }\n                            });\n                            \n                            if (!foundQuestionsForService) {\n                                console.log(`No questions found for service ${serviceId} in any mapped categories`);\n                            }\n                        } else {\n                            console.log(`Service ${serviceId} allocation ${allocation} below threshold`);\n                        }\n                    });\n                    \n                    console.log('🔑 Processing service questions complete');\n                    \n                        // Log all service questions we found\n                    console.log(`📊 Found ${serviceQuestions.length} total service-specific questions`);\n                    \n                    // Verify by listing all service question IDs for debugging\n                    if (serviceQuestions.length > 0) {\n                        const serviceQuestionIds = serviceQuestions.map(q => q.id);\n                        console.log(`🆔 Service question IDs:`, serviceQuestionIds);\n                    }\n                } else {\n                    console.warn('❌ No services selected or invalid selectedServices format:', selectedServices);\n                }\n            } catch (error) {\n                console.error('❌ Error loading service questions:', error);\n            }\n            \n            console.log(`📊 Found ${serviceQuestions.length} service-specific questions`);\n            \n            // REMOVE DUPLICATES AND VALIDATE QUESTIONS\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // Process core questions first\n            coreQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        console.log(`⚠️ Skipping invalid question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        console.log(`⚠️ Skipping invalid service question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            console.log(`📊 FINAL COUNT: Total unique questions to display: ${uniqueQuestions.length}`);\n            console.log('🆔 Question IDs:', Array.from(questionIds));\n            \n            // Double-check for any issues with question structure\n            uniqueQuestions.forEach((q, index) => {\n                if (!q.id) console.log(`⚠️ Question at index ${index} has no ID!`, q);\n                if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                    console.log(`⚠️ Question ${q.id} has invalid options!`, q.options);\n                }\n            });\n            \n            // Force log each category's question count again to make it clear\n            console.log('📊 FINAL CATEGORY QUESTION COUNTS:', categoryQuestionCounts);\n            console.log(`🔍 TOTAL CORE QUESTIONS: ${coreQuestions.length}`);\n            console.log(`🔍 TOTAL SERVICE QUESTIONS: ${serviceQuestions.length}`);\n            console.log(`🔍 TOTAL AFTER DEDUPLICATION: ${uniqueQuestions.length}`);\n            \n            if (uniqueQuestions.length < 50) {\n                console.log('⚠️ WARNING: Expected more than 50 questions but only found', uniqueQuestions.length);\n            }\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('❌ Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Load initial questions and answers\n    useEffect(() => {\n        const loadInitialData = async () => {\n            // Get previously saved answers if available\n            const savedAnswers = getResponse('answers') || {};\n            debugLog('Loaded saved answers', savedAnswers);\n            setAllAnswers(savedAnswers);\n            \n            // Load questions from JSON file\n            await loadQuestions();\n        };\n        \n        loadInitialData();\n    }, [assessmentType, getResponse]);\n\n    // Handle answer changes\n    const handleAnswerChange = (questionId, answer, optionObj = null) => {\n        console.log(`Saving answer for question ${questionId}:`, answer, optionObj);\n        const updatedAnswers = {\n            ...allAnswers,\n            [questionId]: answer\n        };\n        \n        setAllAnswers(updatedAnswers);\n        saveResponse('answers', updatedAnswers);\n        debugLog(`Answer updated for question ${questionId}:`, answer);\n    };\n\n    // Navigation functions\n    const handleNext = () => {\n        if (currentQuestion < questions.length - 1) {\n            setCurrentQuestion(currentQuestion + 1);\n            window.scrollTo(0, 0);\n        } else {\n            // Save final answers and complete\n            saveResponse('answers', allAnswers);\n            \n            debugLog('Total questions:', questions.length);\n            \n            // Before completing, ensure selectedServices is stored in both context and responses\n            if (typeof getContext === 'function') {\n                const selectedServices = getContext('selectedServices');\n                if (selectedServices && typeof saveResponse === 'function') {\n                    // Save as a response to ensure it's available in both places\n                    saveResponse('selectedServices', selectedServices);\n                    debugLog('Saved selectedServices to responses as backup', selectedServices);\n                }\n            }\n            \n            // Set a global flag to indicate this component has completed with answers\n            if (typeof window !== 'undefined') {\n                window.dynamicQuestionsCompleted = true;\n                window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n            }\n            \n            // Move to the next stage using onComplete callback\n            if (onComplete) {\n                onComplete();\n            }\n        }\n    };\n\n    const handleBack = () => {\n        if (currentQuestion > 0) {\n            setCurrentQuestion(currentQuestion - 1);\n            window.scrollTo(0, 0);\n        } else {\n            // Go back to previous component\n            if (onBack) {\n                onBack();\n            }\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.loadingSpinner}></div>\n                <h3 className={styles.loadingText}>\n                    Loading questions...\n                </h3>\n            </div>\n        );\n    }\n\n    if (questions.length === 0) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3 className={styles.errorHeading}>\n                    Error: No questions found for this assessment\n                </h3>\n                <button \n                    onClick={onBack} \n                    className={styles.errorButton}\n                >\n                    Go Back\n                </button>\n            </div>\n        );\n    }\n\n    const currentQuestionData = questions[currentQuestion];\n    \n    return (\n        <div className={styles.questionsContainer}>\n            <div className={styles.questionHeader}>\n                <h2 className={styles.assessmentTitle}>\n                    {assessmentType === 'agency-vulnerability' \n                        ? 'Agency AI Vulnerability Assessment' \n                        : 'Marketing Assessment'}\n                </h2>\n                <p className={styles.questionCounter}>\n                    Question {currentQuestion + 1} of {questions.length}\n                </p>\n            </div>\n            \n            {currentQuestionData && (\n                <QuestionCard\n                    question={currentQuestionData}\n                    questionNumber={currentQuestion + 1}\n                    totalQuestions={questions.length}\n                    selectedValue={allAnswers[currentQuestionData.id] || ''}\n                    onSelect={(value, option) => handleAnswerChange(currentQuestionData.id, value, option)}\n                />\n            )}\n            \n            <Navigation \n                currentStep={currentQuestion + 1}\n                totalSteps={questions.length}\n                onNext={handleNext}\n                onBack={handleBack}\n                nextDisabled={!allAnswers[currentQuestionData?.id]}\n                progress={progress}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}