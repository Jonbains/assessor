{"ast":null,"code":"export class ScoringEngine {\n  constructor(customScoring) {\n    this.customScoring = customScoring;\n    this.weights = (customScoring === null || customScoring === void 0 ? void 0 : customScoring.weights) || this.defaultWeights;\n  }\n  calculate(responses, context) {\n    var _this$customScoring;\n    // Base scoring logic used by all assessments\n    let scores = this.calculateDimensionScores(responses);\n\n    // Apply custom scoring if provided\n    if ((_this$customScoring = this.customScoring) !== null && _this$customScoring !== void 0 && _this$customScoring.calculate) {\n      scores = this.customScoring.calculate(scores, responses, context);\n    }\n\n    // Apply context-based adjustments\n    scores = this.applyContextAdjustments(scores, context);\n    return {\n      overall: this.calculateOverallScore(scores),\n      dimensions: scores,\n      insights: this.generateInsights(scores, context)\n    };\n  }\n  calculateDimensionScores(responses) {\n    // Implementation for base dimension calculation\n    return {};\n  }\n  calculateOverallScore(dimensionScores) {\n    // Implementation for overall score calculation\n    return 0;\n  }\n  applyContextAdjustments(scores, context) {\n    // Apply size, industry, or other contextual adjustments\n    return scores;\n  }\n  generateInsights(scores, context) {\n    // Generate insights based on scores\n    return [];\n  }\n}\nexport default ScoringEngine;","map":{"version":3,"names":["ScoringEngine","constructor","customScoring","weights","defaultWeights","calculate","responses","context","_this$customScoring","scores","calculateDimensionScores","applyContextAdjustments","overall","calculateOverallScore","dimensions","insights","generateInsights","dimensionScores"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ScoringEngine.js"],"sourcesContent":["export class ScoringEngine {\n    constructor(customScoring) {\n        this.customScoring = customScoring;\n        this.weights = customScoring?.weights || this.defaultWeights;\n    }\n\n    calculate(responses, context) {\n        // Base scoring logic used by all assessments\n        let scores = this.calculateDimensionScores(responses);\n\n        // Apply custom scoring if provided\n        if (this.customScoring?.calculate) {\n            scores = this.customScoring.calculate(scores, responses, context);\n        }\n\n        // Apply context-based adjustments\n        scores = this.applyContextAdjustments(scores, context);\n\n        return {\n            overall: this.calculateOverallScore(scores),\n            dimensions: scores,\n            insights: this.generateInsights(scores, context)\n        };\n    }\n\n    calculateDimensionScores(responses) {\n        // Implementation for base dimension calculation\n        return {};\n    }\n\n    calculateOverallScore(dimensionScores) {\n        // Implementation for overall score calculation\n        return 0;\n    }\n\n    applyContextAdjustments(scores, context) {\n        // Apply size, industry, or other contextual adjustments\n        return scores;\n    }\n\n    generateInsights(scores, context) {\n        // Generate insights based on scores\n        return [];\n    }\n}\n\nexport default ScoringEngine;\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,CAAC;EACvBC,WAAWA,CAACC,aAAa,EAAE;IACvB,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,OAAO,GAAG,CAAAD,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,OAAO,KAAI,IAAI,CAACC,cAAc;EAChE;EAEAC,SAASA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAAA,IAAAC,mBAAA;IAC1B;IACA,IAAIC,MAAM,GAAG,IAAI,CAACC,wBAAwB,CAACJ,SAAS,CAAC;;IAErD;IACA,KAAAE,mBAAA,GAAI,IAAI,CAACN,aAAa,cAAAM,mBAAA,eAAlBA,mBAAA,CAAoBH,SAAS,EAAE;MAC/BI,MAAM,GAAG,IAAI,CAACP,aAAa,CAACG,SAAS,CAACI,MAAM,EAAEH,SAAS,EAAEC,OAAO,CAAC;IACrE;;IAEA;IACAE,MAAM,GAAG,IAAI,CAACE,uBAAuB,CAACF,MAAM,EAAEF,OAAO,CAAC;IAEtD,OAAO;MACHK,OAAO,EAAE,IAAI,CAACC,qBAAqB,CAACJ,MAAM,CAAC;MAC3CK,UAAU,EAAEL,MAAM;MAClBM,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACP,MAAM,EAAEF,OAAO;IACnD,CAAC;EACL;EAEAG,wBAAwBA,CAACJ,SAAS,EAAE;IAChC;IACA,OAAO,CAAC,CAAC;EACb;EAEAO,qBAAqBA,CAACI,eAAe,EAAE;IACnC;IACA,OAAO,CAAC;EACZ;EAEAN,uBAAuBA,CAACF,MAAM,EAAEF,OAAO,EAAE;IACrC;IACA,OAAOE,MAAM;EACjB;EAEAO,gBAAgBA,CAACP,MAAM,EAAEF,OAAO,EAAE;IAC9B;IACA,OAAO,EAAE;EACb;AACJ;AAEA,eAAeP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}