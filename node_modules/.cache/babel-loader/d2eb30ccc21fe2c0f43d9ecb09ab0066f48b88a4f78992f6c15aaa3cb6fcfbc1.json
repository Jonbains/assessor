{"ast":null,"code":"export class ScoringEngine {\n  constructor(customScoring, assessmentType = 'agency-vulnerability') {\n    this.customScoring = customScoring;\n    this.assessmentType = assessmentType;\n    this.weights = (customScoring === null || customScoring === void 0 ? void 0 : customScoring.weights) || this.defaultWeights;\n    this.specificScoringEngine = null;\n\n    // Initialize the specific scoring engine\n    this.initializeSpecificEngine();\n  }\n\n  /**\n   * Dynamically load and instantiate the assessment-specific scoring engine\n   */\n  async initializeSpecificEngine() {\n    try {\n      // Dynamically import the appropriate scoring engine based on assessment type\n      const scoringModule = await import(`../../assessments/${this.assessmentType}/scoring.js`);\n      const ScoringClass = scoringModule.default;\n      if (ScoringClass) {\n        this.specificScoringEngine = new ScoringClass(this.customScoring);\n        console.log(`Loaded specific scoring engine for ${this.assessmentType}`);\n      } else {\n        console.warn(`Scoring module found for ${this.assessmentType} but no default export`);\n      }\n    } catch (error) {\n      console.error(`Failed to load scoring engine for ${this.assessmentType}:`, error);\n      // Continue with base implementation if specific engine can't be loaded\n    }\n  }\n  async calculate(responses, context) {\n    var _this$customScoring;\n    // Ensure specific scoring engine is initialized\n    if (!this.specificScoringEngine) {\n      await this.initializeSpecificEngine();\n    }\n\n    // If we have a specific scoring engine, use it\n    if (this.specificScoringEngine && this.specificScoringEngine.calculateScores) {\n      try {\n        // Use the assessment-specific calculation method\n        const specificScores = this.specificScoringEngine.calculateScores(responses, context);\n\n        // Format the result to match our expected structure\n        return {\n          overall: specificScores.overallScore || specificScores.overall || 0,\n          dimensions: specificScores.dimensions || specificScores,\n          insights: this.generateInsights(specificScores, context)\n        };\n      } catch (error) {\n        console.error('Error using specific scoring engine:', error);\n        // Fall back to base implementation\n      }\n    }\n\n    // Base scoring logic used by all assessments (fallback)\n    console.log('Using base scoring implementation');\n    let scores = this.calculateDimensionScores(responses);\n\n    // Apply custom scoring if provided\n    if ((_this$customScoring = this.customScoring) !== null && _this$customScoring !== void 0 && _this$customScoring.calculate) {\n      scores = this.customScoring.calculate(scores, responses, context);\n    }\n\n    // Apply context-based adjustments\n    scores = this.applyContextAdjustments(scores, context);\n    return {\n      overall: this.calculateOverallScore(scores),\n      dimensions: scores,\n      insights: this.generateInsights(scores, context)\n    };\n  }\n  calculateDimensionScores(responses) {\n    // Implementation for base dimension calculation\n    return {};\n  }\n  calculateOverallScore(dimensionScores) {\n    // Implementation for overall score calculation\n    return 0;\n  }\n  applyContextAdjustments(scores, context) {\n    // Apply size, industry, or other contextual adjustments\n    return scores;\n  }\n  generateInsights(scores, context) {\n    // Generate insights based on scores\n    return [];\n  }\n}\nexport default ScoringEngine;","map":{"version":3,"names":["ScoringEngine","constructor","customScoring","assessmentType","weights","defaultWeights","specificScoringEngine","initializeSpecificEngine","scoringModule","ScoringClass","default","console","log","warn","error","calculate","responses","context","_this$customScoring","calculateScores","specificScores","overall","overallScore","dimensions","insights","generateInsights","scores","calculateDimensionScores","applyContextAdjustments","calculateOverallScore","dimensionScores"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ScoringEngine.js"],"sourcesContent":["export class ScoringEngine {\n    constructor(customScoring, assessmentType = 'agency-vulnerability') {\n        this.customScoring = customScoring;\n        this.assessmentType = assessmentType;\n        this.weights = customScoring?.weights || this.defaultWeights;\n        this.specificScoringEngine = null;\n        \n        // Initialize the specific scoring engine\n        this.initializeSpecificEngine();\n    }\n    \n    /**\n     * Dynamically load and instantiate the assessment-specific scoring engine\n     */\n    async initializeSpecificEngine() {\n        try {\n            // Dynamically import the appropriate scoring engine based on assessment type\n            const scoringModule = await import(`../../assessments/${this.assessmentType}/scoring.js`);\n            const ScoringClass = scoringModule.default;\n            \n            if (ScoringClass) {\n                this.specificScoringEngine = new ScoringClass(this.customScoring);\n                console.log(`Loaded specific scoring engine for ${this.assessmentType}`);\n            } else {\n                console.warn(`Scoring module found for ${this.assessmentType} but no default export`);\n            }\n        } catch (error) {\n            console.error(`Failed to load scoring engine for ${this.assessmentType}:`, error);\n            // Continue with base implementation if specific engine can't be loaded\n        }\n    }\n\n    async calculate(responses, context) {\n        // Ensure specific scoring engine is initialized\n        if (!this.specificScoringEngine) {\n            await this.initializeSpecificEngine();\n        }\n        \n        // If we have a specific scoring engine, use it\n        if (this.specificScoringEngine && this.specificScoringEngine.calculateScores) {\n            try {\n                // Use the assessment-specific calculation method\n                const specificScores = this.specificScoringEngine.calculateScores(responses, context);\n                \n                // Format the result to match our expected structure\n                return {\n                    overall: specificScores.overallScore || specificScores.overall || 0,\n                    dimensions: specificScores.dimensions || specificScores,\n                    insights: this.generateInsights(specificScores, context)\n                };\n            } catch (error) {\n                console.error('Error using specific scoring engine:', error);\n                // Fall back to base implementation\n            }\n        }\n        \n        // Base scoring logic used by all assessments (fallback)\n        console.log('Using base scoring implementation');\n        let scores = this.calculateDimensionScores(responses);\n\n        // Apply custom scoring if provided\n        if (this.customScoring?.calculate) {\n            scores = this.customScoring.calculate(scores, responses, context);\n        }\n\n        // Apply context-based adjustments\n        scores = this.applyContextAdjustments(scores, context);\n\n        return {\n            overall: this.calculateOverallScore(scores),\n            dimensions: scores,\n            insights: this.generateInsights(scores, context)\n        };\n    }\n\n    calculateDimensionScores(responses) {\n        // Implementation for base dimension calculation\n        return {};\n    }\n\n    calculateOverallScore(dimensionScores) {\n        // Implementation for overall score calculation\n        return 0;\n    }\n\n    applyContextAdjustments(scores, context) {\n        // Apply size, industry, or other contextual adjustments\n        return scores;\n    }\n\n    generateInsights(scores, context) {\n        // Generate insights based on scores\n        return [];\n    }\n}\n\nexport default ScoringEngine;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}