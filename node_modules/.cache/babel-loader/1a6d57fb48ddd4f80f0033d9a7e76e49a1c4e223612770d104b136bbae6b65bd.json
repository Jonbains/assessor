{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceSelector = ({\n  assessmentType,\n  onSelect,\n  onBack\n}) => {\n  _s();\n  const [services, setServices] = useState([]);\n  const [selectedServices, setSelectedServices] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n  console.log('Current assessment data:', {\n    qualifying: {},\n    services: services || [],\n    responses: {}\n  });\n  const loadServices = async () => {\n    try {\n      setLoading(true);\n      console.log(`Loading services for ${assessmentType}`);\n      // Dynamic import for services based on assessment type - fix path to be relative to src\n      const servicesModule = await import(`../../../assessments/${assessmentType}/services.json`);\n      // Ensure services is always an array\n      const servicesData = servicesModule.default || {};\n      const formattedServices = Array.isArray(servicesData) ? servicesData : Object.values(servicesData);\n      console.log('Services loaded:', formattedServices);\n      if (formattedServices && formattedServices.length > 0) {\n        setServices(formattedServices);\n        setError(null);\n      } else {\n        console.error('Services data is empty or not in expected format:', servicesData);\n        setError('No services found for this assessment type.');\n      }\n    } catch (error) {\n      console.error('Failed to load services:', error);\n      setError(`Failed to load services: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadServices();\n  }, [assessmentType]);\n  const toggleService = serviceId => {\n    setSelectedServices(prev => {\n      const newSelections = {\n        ...prev\n      };\n      if (newSelections[serviceId]) {\n        delete newSelections[serviceId];\n      } else {\n        newSelections[serviceId] = 1;\n      }\n      return newSelections;\n    });\n  };\n  const handleContinue = () => {\n    const selected = Object.keys(selectedServices);\n    if (selected.length === 0) {\n      alert('Please select at least one service to continue');\n      return;\n    }\n    onSelect(selected);\n  };\n  const hasSelections = Object.keys(selectedServices).length > 0;\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loading,\n      children: \"Loading services...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => loadServices(),\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Services\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Which services does your agency provide? Select all that apply.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceGrid,\n      children: services.map(service => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.serviceCard} ${selectedServices[service.id] ? styles.selected : ''}`,\n        onClick: () => toggleService(service.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.serviceIcon,\n          children: service.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: service.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: service.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), selectedServices[service.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.checkmark,\n          children: \"\\u2713\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 58\n        }, this)]\n      }, service.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.backButton,\n        onClick: onBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.continueButton,\n        disabled: !hasSelections,\n        onClick: handleContinue,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(ServiceSelector, \"B/N3A929WzrHhGs/MBebNSkG4Lc=\");\n_c = ServiceSelector;\nexport default ServiceSelector;\nvar _c;\n$RefreshReg$(_c, \"ServiceSelector\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","styles","jsxDEV","_jsxDEV","ServiceSelector","assessmentType","onSelect","onBack","_s","services","setServices","selectedServices","setSelectedServices","loading","setLoading","error","setError","console","log","qualifying","responses","loadServices","servicesModule","servicesData","default","formattedServices","Array","isArray","Object","values","length","message","toggleService","serviceId","prev","newSelections","handleContinue","selected","keys","alert","hasSelections","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","container","header","progress","serviceGrid","map","service","serviceCard","id","serviceIcon","icon","name","description","checkmark","buttonContainer","backButton","continueButton","disabled","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst ServiceSelector = ({ assessmentType, onSelect, onBack }) => {\n    const [services, setServices] = useState([]);\n    const [selectedServices, setSelectedServices] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n    console.log('Current assessment data:', { qualifying: {}, services: services || [], responses: {} });\n\n    const loadServices = async () => {\n        try {\n            setLoading(true);\n            console.log(`Loading services for ${assessmentType}`);\n            // Dynamic import for services based on assessment type - fix path to be relative to src\n            const servicesModule = await import(`../../../assessments/${assessmentType}/services.json`);\n            // Ensure services is always an array\n            const servicesData = servicesModule.default || {};\n            const formattedServices = Array.isArray(servicesData) ? servicesData : \n                Object.values(servicesData);\n                \n            console.log('Services loaded:', formattedServices);\n            \n            if (formattedServices && formattedServices.length > 0) {\n                setServices(formattedServices);\n                setError(null);\n            } else {\n                console.error('Services data is empty or not in expected format:', servicesData);\n                setError('No services found for this assessment type.');\n            }\n        } catch (error) {\n            console.error('Failed to load services:', error);\n            setError(`Failed to load services: ${error.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        loadServices();\n    }, [assessmentType]);\n\n    const toggleService = (serviceId) => {\n        setSelectedServices(prev => {\n            const newSelections = { ...prev };\n            if (newSelections[serviceId]) {\n                delete newSelections[serviceId];\n            } else {\n                newSelections[serviceId] = 1;\n            }\n            return newSelections;\n        });\n    };\n\n    const handleContinue = () => {\n        const selected = Object.keys(selectedServices);\n        \n        if (selected.length === 0) {\n            alert('Please select at least one service to continue');\n            return;\n        }\n        \n        onSelect(selected);\n    };\n\n    const hasSelections = Object.keys(selectedServices).length > 0;\n\n    if (loading) {\n        return <div className={styles.loading}>Loading services...</div>;\n    }\n\n    if (error) {\n        return (\n            <div className={styles.error}>\n                <p>{error}</p>\n                <button onClick={() => loadServices()}>Try Again</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.header}>\n                <h2>Select Services</h2>\n                <ProgressBar progress={40} />\n            </div>\n            \n            <p>Which services does your agency provide? Select all that apply.</p>\n            \n            <div className={styles.serviceGrid}>\n                {services.map(service => (\n                    <div \n                        key={service.id}\n                        className={`${styles.serviceCard} ${selectedServices[service.id] ? styles.selected : ''}`}\n                        onClick={() => toggleService(service.id)}\n                    >\n                        <div className={styles.serviceIcon}>{service.icon}</div>\n                        <h3>{service.name}</h3>\n                        <p>{service.description}</p>\n                        {selectedServices[service.id] && <div className={styles.checkmark}>✓</div>}\n                    </div>\n                ))}\n            </div>\n            \n            <div className={styles.buttonContainer}>\n                <button \n                    className={styles.backButton} \n                    onClick={onBack}\n                >\n                    Back\n                </button>\n                <button \n                    className={styles.continueButton}\n                    disabled={!hasSelections}\n                    onClick={handleContinue}\n                >\n                    Continue\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ServiceSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}