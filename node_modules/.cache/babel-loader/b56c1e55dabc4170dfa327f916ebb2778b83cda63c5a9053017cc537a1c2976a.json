{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/app/AssessmentFlow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useParams, useNavigate, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAssessment } from '../core/hooks/useAssessment';\nimport SectorSelector from '../core/components/SectorSelector';\nimport QualifyingQuestions from '../core/components/QualifyingQuestions';\nimport ServiceSelector from '../core/components/ServiceSelector';\nimport DynamicQuestions from '../core/components/DynamicQuestions';\nimport EmailGate from '../core/components/EmailGate';\nimport ResultsDashboard from '../core/components/ResultsDashboard';\nimport LoadingSpinner from '../core/components/LoadingSpinner';\nimport ErrorMessage from '../core/components/ErrorMessage';\n\n// Lazy-load assessment-specific ResultsView components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getResultsView = assessmentType => {\n  console.log(`Attempting to load ResultsView for assessment type: ${assessmentType}`);\n  try {\n    // Validate assessment type to prevent errors\n    if (!assessmentType) {\n      console.error('Cannot load ResultsView: assessmentType is undefined');\n      return null;\n    }\n\n    // Log the exact path we're trying to load\n    const viewPath = `../assessments/${assessmentType}/ResultsView.jsx`;\n    console.log(`Attempting to require: ${viewPath}`);\n\n    // This assumes each assessment type has a corresponding ResultsView.jsx\n    const ResultsViewModule = require(`../assessments/${assessmentType}/ResultsView.jsx`);\n    console.log('ResultsView module loaded:', ResultsViewModule);\n    if (!ResultsViewModule || !ResultsViewModule.default) {\n      console.error(`ResultsView for ${assessmentType} was loaded but no default export found:`, ResultsViewModule);\n      return null;\n    }\n\n    // Get the default export which should be the component\n    const ResultsView = ResultsViewModule.default;\n    console.log('ResultsView component successfully loaded:', ResultsView ? 'Component Found' : 'Component Not Found');\n    return ResultsView;\n  } catch (error) {\n    console.error(`Failed to load ResultsView for ${assessmentType}:`, error);\n    return null;\n  }\n};\nfunction AssessmentFlow() {\n  _s();\n  const {\n    type\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    loading,\n    error,\n    currentStage,\n    progress,\n    nextStage,\n    previousStage,\n    saveResponse,\n    getResponse,\n    setContext,\n    getContext,\n    // Added missing getContext from hook\n    calculateResults,\n    reset\n  } = useAssessment(type);\n  useEffect(() => {\n    // Handle stage navigation\n    if (currentStage) {\n      navigate(currentStage);\n    }\n  }, [currentStage, navigate]);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"sector\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"sector\",\n      element: /*#__PURE__*/_jsxDEV(SectorSelector, {\n        assessmentType: type,\n        onSelect: sector => {\n          setContext('sector', sector);\n          nextStage();\n        },\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"qualifying\",\n      element: /*#__PURE__*/_jsxDEV(QualifyingQuestions, {\n        assessmentType: type,\n        saveResponse: saveResponse,\n        getResponse: getResponse,\n        onComplete: nextStage,\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"services\",\n      element: /*#__PURE__*/_jsxDEV(ServiceSelector, {\n        assessmentType: type,\n        onSelect: services => {\n          setContext('selectedServices', services);\n          nextStage();\n        },\n        onBack: previousStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"questions\",\n      element: /*#__PURE__*/_jsxDEV(DynamicQuestions, {\n        assessmentType: type,\n        saveResponse: saveResponse,\n        getResponse: getResponse,\n        getContext: getContext,\n        onComplete: nextStage,\n        onBack: previousStage,\n        progress: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"email\",\n      element: /*#__PURE__*/_jsxDEV(EmailGate, {\n        onSubmit: formData => {\n          setContext('contact', formData);\n          nextStage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"results\",\n      element: /*#__PURE__*/_jsxDEV(ResultsDashboard, {\n        assessmentType: type,\n        calculateResults: calculateResults,\n        onRestart: reset,\n        getResponse: getResponse,\n        getContext: getContext,\n        ResultsView: getResultsView(type) // Pass the ResultsView component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(AssessmentFlow, \"Zd4GRK0jOd9O7zhke8RgVXOwGkc=\", false, function () {\n  return [useParams, useNavigate, useAssessment];\n});\n_c = AssessmentFlow;\nexport default AssessmentFlow;\nvar _c;\n$RefreshReg$(_c, \"AssessmentFlow\");","map":{"version":3,"names":["React","useEffect","useParams","useNavigate","Routes","Route","Navigate","useAssessment","SectorSelector","QualifyingQuestions","ServiceSelector","DynamicQuestions","EmailGate","ResultsDashboard","LoadingSpinner","ErrorMessage","jsxDEV","_jsxDEV","getResultsView","assessmentType","console","log","error","viewPath","ResultsViewModule","require","default","ResultsView","AssessmentFlow","_s","type","navigate","loading","currentStage","progress","nextStage","previousStage","saveResponse","getResponse","setContext","getContext","calculateResults","reset","fileName","_jsxFileName","lineNumber","columnNumber","message","children","index","element","to","replace","path","onSelect","sector","onBack","onComplete","services","onSubmit","formData","onRestart","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/app/AssessmentFlow.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, useNavigate, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAssessment } from '../core/hooks/useAssessment';\nimport SectorSelector from '../core/components/SectorSelector';\nimport QualifyingQuestions from '../core/components/QualifyingQuestions';\nimport ServiceSelector from '../core/components/ServiceSelector';\nimport DynamicQuestions from '../core/components/DynamicQuestions';\nimport EmailGate from '../core/components/EmailGate';\nimport ResultsDashboard from '../core/components/ResultsDashboard';\nimport LoadingSpinner from '../core/components/LoadingSpinner';\nimport ErrorMessage from '../core/components/ErrorMessage';\n\n// Lazy-load assessment-specific ResultsView components\nconst getResultsView = (assessmentType) => {\n  console.log(`Attempting to load ResultsView for assessment type: ${assessmentType}`);\n  \n  try {\n    // Validate assessment type to prevent errors\n    if (!assessmentType) {\n      console.error('Cannot load ResultsView: assessmentType is undefined');\n      return null;\n    }\n    \n    // Log the exact path we're trying to load\n    const viewPath = `../assessments/${assessmentType}/ResultsView.jsx`;\n    console.log(`Attempting to require: ${viewPath}`);\n    \n    // This assumes each assessment type has a corresponding ResultsView.jsx\n    const ResultsViewModule = require(`../assessments/${assessmentType}/ResultsView.jsx`);\n    console.log('ResultsView module loaded:', ResultsViewModule);\n    \n    if (!ResultsViewModule || !ResultsViewModule.default) {\n      console.error(`ResultsView for ${assessmentType} was loaded but no default export found:`, ResultsViewModule);\n      return null;\n    }\n    \n    // Get the default export which should be the component\n    const ResultsView = ResultsViewModule.default;\n    console.log('ResultsView component successfully loaded:', ResultsView ? 'Component Found' : 'Component Not Found');\n    \n    return ResultsView;\n  } catch (error) {\n    console.error(`Failed to load ResultsView for ${assessmentType}:`, error);\n    return null;\n  }\n};\n\nfunction AssessmentFlow() {\n    const { type } = useParams();\n    const navigate = useNavigate();\n    const {\n        loading,\n        error,\n        currentStage,\n        progress,\n        nextStage,\n        previousStage,\n        saveResponse,\n        getResponse,\n        setContext,\n        getContext, // Added missing getContext from hook\n        calculateResults,\n        reset\n    } = useAssessment(type);\n\n    useEffect(() => {\n        // Handle stage navigation\n        if (currentStage) {\n            navigate(currentStage);\n        }\n    }, [currentStage, navigate]);\n\n    if (loading) return <LoadingSpinner />;\n    if (error) return <ErrorMessage message={error} />;\n\n    return (\n        <Routes>\n            {/* Default route - redirect to sector selection when just /assessment/:type is accessed */}\n            <Route index element={<Navigate to=\"sector\" replace />} />\n            <Route path=\"sector\" element={\n                <SectorSelector \n                    assessmentType={type}\n                    onSelect={(sector) => {\n                        setContext('sector', sector);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"qualifying\" element={\n                <QualifyingQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    onComplete={nextStage}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"services\" element={\n                <ServiceSelector \n                    assessmentType={type}\n                    onSelect={(services) => {\n                        setContext('selectedServices', services);\n                        nextStage();\n                    }}\n                    onBack={previousStage}\n                />\n            } />\n            \n            <Route path=\"questions\" element={\n                <DynamicQuestions \n                    assessmentType={type}\n                    saveResponse={saveResponse}\n                    getResponse={getResponse}\n                    getContext={getContext} \n                    onComplete={nextStage}\n                    onBack={previousStage}\n                    progress={progress}\n                />\n            } />\n            \n            <Route path=\"email\" element={\n                <EmailGate \n                    onSubmit={(formData) => {\n                        setContext('contact', formData);\n                        nextStage();\n                    }}\n                />\n            } />\n            \n            <Route path=\"results\" element={\n                <ResultsDashboard \n                    assessmentType={type}\n                    calculateResults={calculateResults}\n                    onRestart={reset}\n                    getResponse={getResponse}\n                    getContext={getContext}\n                    ResultsView={getResultsView(type)} // Pass the ResultsView component\n                />\n            } />\n        </Routes>\n    );\n}\n\nexport default AssessmentFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}