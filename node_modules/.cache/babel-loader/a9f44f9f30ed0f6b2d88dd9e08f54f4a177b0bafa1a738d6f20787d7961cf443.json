{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debugLog = (message, data) => {\n  console.log(`DEBUG - ${message}:`, data);\n};\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  setContext,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadQuestions();\n  }, [assessmentType]);\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      debugLog('Loading questions for assessment type', assessmentType);\n\n      // Load core questions\n      let coreQuestions = [];\n\n      // Function to recursively extract questions from nested structure\n      const extractQuestionsFromNestedObject = (obj, path = '') => {\n        let extractedQuestions = [];\n\n        // Base case: If it's an array, we assume it's an array of questions\n        if (Array.isArray(obj)) {\n          debugLog(`Found questions array at path ${path}`, obj.length);\n          return obj;\n        }\n\n        // If it's an object, traverse its properties\n        if (obj && typeof obj === 'object') {\n          for (const key in obj) {\n            const newPath = path ? `${path}.${key}` : key;\n            if (Array.isArray(obj[key])) {\n              // Found an array, add its items to our questions\n              debugLog(`Found questions array at path ${newPath}`, obj[key].length);\n              extractedQuestions = extractedQuestions.concat(obj[key]);\n            } else if (obj[key] && typeof obj[key] === 'object') {\n              // Found a nested object, recursively extract questions from it\n              const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n              extractedQuestions = extractedQuestions.concat(nestedQuestions);\n            }\n          }\n        }\n        return extractedQuestions;\n      };\n      try {\n        const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n        const coreData = coreModule.default || coreModule;\n        debugLog(`Core questions data structure:`, Object.keys(coreData));\n\n        // Handle different possible structures\n        if (Array.isArray(coreData)) {\n          // Direct array structure\n          coreQuestions = coreData;\n          debugLog(`Loaded core questions (direct array):`, coreQuestions.length);\n        } else if (coreData.coreQuestions) {\n          // Structure with coreQuestions property\n          if (Array.isArray(coreData.coreQuestions)) {\n            // coreQuestions is a direct array\n            coreQuestions = coreData.coreQuestions;\n            debugLog(`Loaded core questions from coreQuestions array:`, coreQuestions.length);\n          } else {\n            // coreQuestions is an object with nested question arrays\n            coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n            debugLog(`Extracted questions from nested coreQuestions object:`, coreQuestions.length);\n          }\n        } else {\n          // Try to extract questions from the entire object\n          coreQuestions = extractQuestionsFromNestedObject(coreData);\n          debugLog(`Extracted questions from entire data object:`, coreQuestions.length);\n        }\n        if (coreQuestions.length === 0) {\n          debugLog(`Could not find questions array in core data structure:`, Object.keys(coreData));\n        }\n      } catch (error) {\n        console.error(`Error loading core questions for ${assessmentType}:`, error);\n      }\n      debugLog(`Loaded core questions`, coreQuestions.length);\n\n      // If we have selected services, load service-specific questions\n      let serviceQuestions = [];\n\n      // Get selected services from context or responses\n      let selectedServices;\n      try {\n        selectedServices = getContext('selectedServices');\n        debugLog('Retrieved selectedServices from context', selectedServices);\n\n        // If not in context, try to get from responses\n        if (!selectedServices || Object.keys(selectedServices).length === 0) {\n          const servicesResponse = getResponse('selectedServices');\n          if (servicesResponse) {\n            selectedServices = servicesResponse;\n            debugLog('Retrieved selectedServices from responses', selectedServices);\n          }\n        }\n      } catch (err) {\n        console.error('Error getting selectedServices:', err);\n      }\n\n      // Process service-specific questions if services are selected\n      if (selectedServices && Object.keys(selectedServices).length > 0) {\n        try {\n          // Load service-specific questions - handle different file names based on assessment type\n          let serviceData;\n          try {\n            // First try to load from service-questions.json (agency-vulnerability)\n            debugLog(`Trying to load service questions from`, `../../assessments/${assessmentType}/service-questions.json`);\n            const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n            serviceData = serviceModule.default || serviceModule;\n            debugLog('Loaded service questions from service-questions.json', Object.keys(serviceData));\n          } catch (error) {\n            // If that fails, try activity-questions.json (inhouse-marketing)\n            debugLog(`First attempt failed, trying activity-questions.json`, error.message);\n            try {\n              debugLog(`Loading activity questions from`, `../../assessments/${assessmentType}/activity-questions.json`);\n              const activityModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n              serviceData = activityModule.default || activityModule;\n              debugLog('Loaded service questions from activity-questions.json', Object.keys(serviceData));\n            } catch (activityError) {\n              debugLog('Failed to load both service-questions.json and activity-questions.json', activityError.message);\n              // Don't throw, just continue with empty service questions\n              serviceData = null;\n            }\n          }\n\n          // Extract service questions if service data was loaded\n          if (serviceData) {\n            debugLog('Service questions data structure', Object.keys(serviceData));\n\n            // Determine the property containing service questions\n            const serviceQuestionsData = serviceData.serviceQuestions || serviceData.activityQuestions || {};\n            debugLog('Service/activity questions nested structure', Object.keys(serviceQuestionsData));\n\n            // Define mappings from selected service IDs to question categories\n            const serviceIdMappings = {\n              // Agency mappings\n              'content_creation': ['content_creation', 'content_marketing'],\n              'creative_design': ['content_creation', 'creative_design'],\n              'digital_marketing': ['content_creation', 'digital_marketing'],\n              'seo_sem': ['content_creation', 'seo_sem'],\n              'pr_comms': ['content_creation', 'strategy_consulting', 'pr_comms'],\n              'web_development': ['strategy_consulting', 'web_development'],\n              'social_media': ['content_creation', 'social_media'],\n              // Inhouse mappings - direct matches to activity names\n              'content_marketing': ['content_marketing'],\n              'email_marketing': ['email_marketing'],\n              'paid_advertising': ['paid_advertising'],\n              'analytics_data': ['analytics_data'],\n              'marketing_automation': ['marketing_automation']\n            };\n\n            // Process each selected service\n            const ALLOCATION_THRESHOLD = 0.05; // 5% threshold\n\n            Object.keys(selectedServices).forEach(serviceId => {\n              const allocation = selectedServices[serviceId];\n              if (allocation >= ALLOCATION_THRESHOLD) {\n                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold`, '');\n\n                // Get the mapped question categories for this service ID\n                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n\n                // Process each mapped category\n                let foundQuestionsForService = false;\n                mappedCategories.forEach(mappedId => {\n                  // Check if there's a direct match in serviceQuestionsData\n                  if (serviceQuestionsData[mappedId]) {\n                    const serviceObj = serviceQuestionsData[mappedId];\n\n                    // Handle both structures: nested 'questions' array or direct array\n                    if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                      serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                      debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`, '');\n                      foundQuestionsForService = true;\n                    } else if (Array.isArray(serviceObj)) {\n                      serviceQuestions = [...serviceQuestions, ...serviceObj];\n                      debugLog(`Found ${serviceObj.length} questions for service ID ${mappedId}`, '');\n                      foundQuestionsForService = true;\n                    } else if (typeof serviceObj === 'object') {\n                      // Try to extract questions from nested structure\n                      const extractedQuestions = extractQuestionsFromNestedObject(serviceObj, mappedId);\n                      if (extractedQuestions.length > 0) {\n                        serviceQuestions = [...serviceQuestions, ...extractedQuestions];\n                        debugLog(`Extracted ${extractedQuestions.length} questions from nested service object ${mappedId}`, '');\n                        foundQuestionsForService = true;\n                      }\n                    }\n                  } else {\n                    // Try fuzzy matching by service name\n                    Object.keys(serviceQuestionsData).forEach(key => {\n                      if (key.toLowerCase().includes(mappedId.toLowerCase()) || mappedId.toLowerCase().includes(key.toLowerCase())) {\n                        const serviceObj = serviceQuestionsData[key];\n                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                          serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                          debugLog(`Found ${serviceObj.questions.length} questions for similar key ${key}`, '');\n                          foundQuestionsForService = true;\n                        } else if (Array.isArray(serviceObj)) {\n                          serviceQuestions = [...serviceQuestions, ...serviceObj];\n                          debugLog(`Found ${serviceObj.length} questions for similar key ${key}`, '');\n                          foundQuestionsForService = true;\n                        }\n                      }\n                    });\n                  }\n                });\n                if (!foundQuestionsForService) {\n                  debugLog(`Could not find any questions for service ${serviceId}`, '');\n                }\n              }\n            });\n          }\n        } catch (error) {\n          console.error('Error loading service questions:', error);\n        }\n      } else {\n        console.warn('No services selected or invalid selectedServices format:', selectedServices);\n      }\n      debugLog(`Found service-specific questions`, serviceQuestions.length);\n\n      // Remove any potential duplicate questions by ID and validate questions\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // Process core questions first\n      coreQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            debugLog(`Skipping invalid question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (q && q.id && !questionIds.has(q.id)) {\n          // Ensure question has all required properties\n          if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n            debugLog(`Skipping invalid service question without options:`, q.id);\n            return;\n          }\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      debugLog(`Total unique questions to display`, uniqueQuestions.length);\n      debugLog('Question IDs', Array.from(questionIds));\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (questionId, value) => {\n    // Save the answer\n    saveResponse(questionId, value);\n\n    // Log the answer being saved for debugging\n    debugLog(`Saving answer for question ${questionId}:`, value);\n\n    // Try to retrieve all saved answers\n    if (typeof getResponse === 'function') {\n      const allAnswers = {};\n      questions.forEach(q => {\n        const answer = getResponse(q.id);\n        if (answer !== undefined) {\n          allAnswers[q.id] = answer;\n        }\n      });\n      debugLog('Current saved answers:', allAnswers);\n    }\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = () => {\n    // Validate if the current question is answered\n    const currentQ = questions[currentQuestionIndex];\n    if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n      alert('Please answer this question before continuing');\n      return;\n    }\n    if (isLastQuestion) {\n      // Collect and log all answers for debugging\n      const allAnswers = {};\n      questions.forEach(q => {\n        const answer = getResponse(q.id);\n        if (answer !== undefined) {\n          allAnswers[q.id] = answer;\n        }\n      });\n      debugLog('FINAL ANSWERS being submitted:', allAnswers);\n      debugLog('Number of answered questions:', Object.keys(allAnswers).length);\n      debugLog('Total questions:', questions.length);\n\n      // Before completing, ensure selectedServices is stored in both context and responses\n      if (typeof getContext === 'function') {\n        const selectedServices = getContext('selectedServices');\n        if (selectedServices && typeof saveResponse === 'function') {\n          // Save as a response to ensure it's available in both places\n          saveResponse('selectedServices', selectedServices);\n          debugLog('Saved selectedServices to responses as backup', selectedServices);\n        }\n      }\n\n      // Set a global flag to indicate this component has completed with answers\n      if (typeof window !== 'undefined') {\n        window.dynamicQuestionsCompleted = true;\n        window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n      }\n\n      // Move to the next stage using onComplete callback\n      if (onComplete) {\n        onComplete();\n      }\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      // Go back to the previous stage in the assessment flow\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress || 65,\n      stage: \"assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Organization Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question || currentQuestion.text, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${selectedValue === (option.value || option.score || index) ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value || option.score || index),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label || option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 25\n        }, this), currentQuestion.insight && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionInsight,\n          children: currentQuestion.insight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 29\n        }, this), currentQuestion.benchmark && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionBenchmark,\n          children: currentQuestion.benchmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${getResponse(questions[index].id) ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handlePrevious,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? handleSkip : null,\n      nextLabel: isLastQuestion ? \"Complete\" : \"Continue\",\n      showNext: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","Navigation","styles","jsxDEV","_jsxDEV","debugLog","message","data","console","log","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","setContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","coreQuestions","extractQuestionsFromNestedObject","obj","path","extractedQuestions","Array","isArray","length","key","newPath","concat","nestedQuestions","coreModule","coreData","default","Object","keys","error","serviceQuestions","selectedServices","servicesResponse","err","serviceData","serviceModule","activityModule","activityError","serviceQuestionsData","activityQuestions","serviceIdMappings","ALLOCATION_THRESHOLD","forEach","serviceId","allocation","mappedCategories","foundQuestionsForService","mappedId","serviceObj","toLowerCase","includes","warn","uniqueQuestions","questionIds","Set","q","id","has","options","add","push","from","currentQuestion","isLastQuestion","handleAnswer","questionId","value","allAnswers","answer","undefined","setTimeout","handleNext","currentQ","required","alert","window","dynamicQuestionsCompleted","dynamicQuestionsAnswerCount","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","selectedValue","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","text","optionsGrid","map","option","index","optionButton","score","selected","optionLabel","label","insight","questionInsight","benchmark","questionBenchmark","questionDots","_","dot","active","answered","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\n// Debug helper function\nconst debugLog = (message, data) => {\n    console.log(`DEBUG - ${message}:`, data);\n};\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    getContext,\n    setContext, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            debugLog('Loading questions for assessment type', assessmentType);\n            \n            // Load core questions\n            let coreQuestions = [];\n            \n            // Function to recursively extract questions from nested structure\n            const extractQuestionsFromNestedObject = (obj, path = '') => {\n                let extractedQuestions = [];\n                \n                // Base case: If it's an array, we assume it's an array of questions\n                if (Array.isArray(obj)) {\n                    debugLog(`Found questions array at path ${path}`, obj.length);\n                    return obj;\n                }\n                \n                // If it's an object, traverse its properties\n                if (obj && typeof obj === 'object') {\n                    for (const key in obj) {\n                        const newPath = path ? `${path}.${key}` : key;\n                        \n                        if (Array.isArray(obj[key])) {\n                            // Found an array, add its items to our questions\n                            debugLog(`Found questions array at path ${newPath}`, obj[key].length);\n                            extractedQuestions = extractedQuestions.concat(obj[key]);\n                        } else if (obj[key] && typeof obj[key] === 'object') {\n                            // Found a nested object, recursively extract questions from it\n                            const nestedQuestions = extractQuestionsFromNestedObject(obj[key], newPath);\n                            extractedQuestions = extractedQuestions.concat(nestedQuestions);\n                        }\n                    }\n                }\n                \n                return extractedQuestions;\n            };\n            \n            try {\n                const coreModule = await import(`../../assessments/${assessmentType}/questions.json`);\n                const coreData = coreModule.default || coreModule;\n                \n                debugLog(`Core questions data structure:`, Object.keys(coreData));\n                \n                // Handle different possible structures\n                if (Array.isArray(coreData)) {\n                    // Direct array structure\n                    coreQuestions = coreData;\n                    debugLog(`Loaded core questions (direct array):`, coreQuestions.length);\n                } else if (coreData.coreQuestions) {\n                    // Structure with coreQuestions property\n                    if (Array.isArray(coreData.coreQuestions)) {\n                        // coreQuestions is a direct array\n                        coreQuestions = coreData.coreQuestions;\n                        debugLog(`Loaded core questions from coreQuestions array:`, coreQuestions.length);\n                    } else {\n                        // coreQuestions is an object with nested question arrays\n                        coreQuestions = extractQuestionsFromNestedObject(coreData.coreQuestions, 'coreQuestions');\n                        debugLog(`Extracted questions from nested coreQuestions object:`, coreQuestions.length);\n                    }\n                } else {\n                    // Try to extract questions from the entire object\n                    coreQuestions = extractQuestionsFromNestedObject(coreData);\n                    debugLog(`Extracted questions from entire data object:`, coreQuestions.length);\n                }\n                \n                if (coreQuestions.length === 0) {\n                    debugLog(`Could not find questions array in core data structure:`, Object.keys(coreData));\n                }\n            } catch (error) {\n                console.error(`Error loading core questions for ${assessmentType}:`, error);\n            }\n            debugLog(`Loaded core questions`, coreQuestions.length);\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            \n            // Get selected services from context or responses\n            let selectedServices;\n            try {\n                selectedServices = getContext('selectedServices');\n                debugLog('Retrieved selectedServices from context', selectedServices);\n                \n                // If not in context, try to get from responses\n                if (!selectedServices || Object.keys(selectedServices).length === 0) {\n                    const servicesResponse = getResponse('selectedServices');\n                    if (servicesResponse) {\n                        selectedServices = servicesResponse;\n                        debugLog('Retrieved selectedServices from responses', selectedServices);\n                    }\n                }\n            } catch (err) {\n                console.error('Error getting selectedServices:', err);\n            }\n            \n            // Process service-specific questions if services are selected\n            if (selectedServices && Object.keys(selectedServices).length > 0) {\n                try {\n                    // Load service-specific questions - handle different file names based on assessment type\n                    let serviceData;\n                    \n                    try {\n                        // First try to load from service-questions.json (agency-vulnerability)\n                        debugLog(`Trying to load service questions from`, `../../assessments/${assessmentType}/service-questions.json`);\n                        const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                        serviceData = serviceModule.default || serviceModule;\n                        debugLog('Loaded service questions from service-questions.json', Object.keys(serviceData));\n                    } catch (error) {\n                        // If that fails, try activity-questions.json (inhouse-marketing)\n                        debugLog(`First attempt failed, trying activity-questions.json`, error.message);\n                        try {\n                            debugLog(`Loading activity questions from`, `../../assessments/${assessmentType}/activity-questions.json`);\n                            const activityModule = await import(`../../assessments/${assessmentType}/activity-questions.json`);\n                            serviceData = activityModule.default || activityModule;\n                            debugLog('Loaded service questions from activity-questions.json', Object.keys(serviceData));\n                        } catch (activityError) {\n                            debugLog('Failed to load both service-questions.json and activity-questions.json', activityError.message);\n                            // Don't throw, just continue with empty service questions\n                            serviceData = null;\n                        }\n                    }\n                    \n                    // Extract service questions if service data was loaded\n                    if (serviceData) {\n                        debugLog('Service questions data structure', Object.keys(serviceData));\n                        \n                        // Determine the property containing service questions\n                        const serviceQuestionsData = serviceData.serviceQuestions || serviceData.activityQuestions || {};\n                        debugLog('Service/activity questions nested structure', Object.keys(serviceQuestionsData));\n                        \n                        // Define mappings from selected service IDs to question categories\n                        const serviceIdMappings = {\n                            // Agency mappings\n                            'content_creation': ['content_creation', 'content_marketing'],\n                            'creative_design': ['content_creation', 'creative_design'],\n                            'digital_marketing': ['content_creation', 'digital_marketing'], \n                            'seo_sem': ['content_creation', 'seo_sem'],\n                            'pr_comms': ['content_creation', 'strategy_consulting', 'pr_comms'],\n                            'web_development': ['strategy_consulting', 'web_development'],\n                            'social_media': ['content_creation', 'social_media'],\n                            \n                            // Inhouse mappings - direct matches to activity names\n                            'content_marketing': ['content_marketing'],\n                            'email_marketing': ['email_marketing'],\n                            'paid_advertising': ['paid_advertising'],\n                            'analytics_data': ['analytics_data'],\n                            'marketing_automation': ['marketing_automation']\n                        };\n                        \n                        // Process each selected service\n                        const ALLOCATION_THRESHOLD = 0.05; // 5% threshold\n                        \n                        Object.keys(selectedServices).forEach(serviceId => {\n                            const allocation = selectedServices[serviceId];\n                            \n                            if (allocation >= ALLOCATION_THRESHOLD) {\n                                debugLog(`Service ${serviceId} allocation ${allocation} exceeds threshold`, '');\n                                \n                                // Get the mapped question categories for this service ID\n                                const mappedCategories = serviceIdMappings[serviceId] || [serviceId];\n                                debugLog(`Service ${serviceId} maps to categories`, mappedCategories);\n                                \n                                // Process each mapped category\n                                let foundQuestionsForService = false;\n                                \n                                mappedCategories.forEach(mappedId => {\n                                    // Check if there's a direct match in serviceQuestionsData\n                                    if (serviceQuestionsData[mappedId]) {\n                                        const serviceObj = serviceQuestionsData[mappedId];\n                                        \n                                        // Handle both structures: nested 'questions' array or direct array\n                                        if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                            serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                            debugLog(`Found ${serviceObj.questions.length} questions for service ID ${mappedId}`, '');\n                                            foundQuestionsForService = true;\n                                        } else if (Array.isArray(serviceObj)) {\n                                            serviceQuestions = [...serviceQuestions, ...serviceObj];\n                                            debugLog(`Found ${serviceObj.length} questions for service ID ${mappedId}`, '');\n                                            foundQuestionsForService = true;\n                                        } else if (typeof serviceObj === 'object') {\n                                            // Try to extract questions from nested structure\n                                            const extractedQuestions = extractQuestionsFromNestedObject(serviceObj, mappedId);\n                                            if (extractedQuestions.length > 0) {\n                                                serviceQuestions = [...serviceQuestions, ...extractedQuestions];\n                                                debugLog(`Extracted ${extractedQuestions.length} questions from nested service object ${mappedId}`, '');\n                                                foundQuestionsForService = true;\n                                            }\n                                        }\n                                    } else {\n                                        // Try fuzzy matching by service name\n                                        Object.keys(serviceQuestionsData).forEach(key => {\n                                            if (key.toLowerCase().includes(mappedId.toLowerCase()) || \n                                                mappedId.toLowerCase().includes(key.toLowerCase())) {\n                                                \n                                                const serviceObj = serviceQuestionsData[key];\n                                                if (serviceObj.questions && Array.isArray(serviceObj.questions)) {\n                                                    serviceQuestions = [...serviceQuestions, ...serviceObj.questions];\n                                                    debugLog(`Found ${serviceObj.questions.length} questions for similar key ${key}`, '');\n                                                    foundQuestionsForService = true;\n                                                } else if (Array.isArray(serviceObj)) {\n                                                    serviceQuestions = [...serviceQuestions, ...serviceObj];\n                                                    debugLog(`Found ${serviceObj.length} questions for similar key ${key}`, '');\n                                                    foundQuestionsForService = true;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                \n                                if (!foundQuestionsForService) {\n                                    debugLog(`Could not find any questions for service ${serviceId}`, '');\n                                }\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.error('Error loading service questions:', error);\n                }\n            } else {\n                console.warn('No services selected or invalid selectedServices format:', selectedServices);\n            }\n            \n            debugLog(`Found service-specific questions`, serviceQuestions.length);\n            \n            // Remove any potential duplicate questions by ID and validate questions\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // Process core questions first\n            coreQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        debugLog(`Skipping invalid question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (q && q.id && !questionIds.has(q.id)) {\n                    // Ensure question has all required properties\n                    if (!q.options || !Array.isArray(q.options) || q.options.length === 0) {\n                        debugLog(`Skipping invalid service question without options:`, q.id);\n                        return;\n                    }\n                    \n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            debugLog(`Total unique questions to display`, uniqueQuestions.length);\n            debugLog('Question IDs', Array.from(questionIds));\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (questionId, value) => {\n        // Save the answer\n        saveResponse(questionId, value);\n        \n        // Log the answer being saved for debugging\n        debugLog(`Saving answer for question ${questionId}:`, value);\n        \n        // Try to retrieve all saved answers\n        if (typeof getResponse === 'function') {\n            const allAnswers = {};\n            questions.forEach(q => {\n                const answer = getResponse(q.id);\n                if (answer !== undefined) {\n                    allAnswers[q.id] = answer;\n                }\n            });\n            debugLog('Current saved answers:', allAnswers);\n        }\n        \n        // Auto-advance to next question after a short delay\n        setTimeout(() => {\n            if (currentQuestionIndex < questions.length - 1) {\n                setCurrentQuestionIndex(currentQuestionIndex + 1);\n            }\n        }, 300);\n    };\n\n    const handleNext = () => {\n        // Validate if the current question is answered\n        const currentQ = questions[currentQuestionIndex];\n        if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n            alert('Please answer this question before continuing');\n            return;\n        }\n        \n        if (isLastQuestion) {\n            // Collect and log all answers for debugging\n            const allAnswers = {};\n            questions.forEach(q => {\n                const answer = getResponse(q.id);\n                if (answer !== undefined) {\n                    allAnswers[q.id] = answer;\n                }\n            });\n            debugLog('FINAL ANSWERS being submitted:', allAnswers);\n            debugLog('Number of answered questions:', Object.keys(allAnswers).length);\n            debugLog('Total questions:', questions.length);\n            \n            // Before completing, ensure selectedServices is stored in both context and responses\n            if (typeof getContext === 'function') {\n                const selectedServices = getContext('selectedServices');\n                if (selectedServices && typeof saveResponse === 'function') {\n                    // Save as a response to ensure it's available in both places\n                    saveResponse('selectedServices', selectedServices);\n                    debugLog('Saved selectedServices to responses as backup', selectedServices);\n                }\n            }\n            \n            // Set a global flag to indicate this component has completed with answers\n            if (typeof window !== 'undefined') {\n                window.dynamicQuestionsCompleted = true;\n                window.dynamicQuestionsAnswerCount = Object.keys(allAnswers).length;\n            }\n            \n            // Move to the next stage using onComplete callback\n            if (onComplete) {\n                onComplete();\n            }\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.qualifyingContainer}>\n            <ProgressBar progress={progress || 65} stage=\"assessment\" />\n            \n            <div className={styles.questionContainer}>\n                <div className={styles.questionHeader}>\n                    <h2>Your Organization Assessment</h2>\n                    <p className={styles.questionNumber}>\n                        Question {currentQuestionIndex + 1} of {questions.length}\n                    </p>\n                </div>\n\n                {currentQuestion && (\n                    <div className={styles.questionContent}>\n                        <h3 className={styles.questionText}>\n                            {currentQuestion.question || currentQuestion.text}\n                            {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n                        </h3>\n                        \n                        <div className={styles.optionsGrid}>\n                            {currentQuestion.options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    className={`${styles.optionButton} ${\n                                        selectedValue === (option.value || option.score || index) ? styles.selected : ''\n                                    }`}\n                                    onClick={() => handleAnswer(currentQuestion.id, option.value || option.score || index)}\n                                >\n                                    <span className={styles.optionLabel}>{option.label || option.text}</span>\n                                </button>\n                            ))}\n                        </div>\n                        \n                        {currentQuestion.insight && (\n                            <p className={styles.questionInsight}>{currentQuestion.insight}</p>\n                        )}\n                        \n                        {currentQuestion.benchmark && (\n                            <p className={styles.questionBenchmark}>{currentQuestion.benchmark}</p>\n                        )}\n                    </div>\n                )}\n\n                {/* Question navigation dots */}\n                <div className={styles.questionDots}>\n                    {questions.map((_, index) => (\n                        <button\n                            key={index}\n                            className={`${styles.dot} ${\n                                index === currentQuestionIndex ? styles.active : ''\n                            } ${getResponse(questions[index].id) ? styles.answered : ''}`}\n                            onClick={() => setCurrentQuestionIndex(index)}\n                            aria-label={`Go to question ${index + 1}`}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <Navigation\n                onBack={handlePrevious}\n                onNext={handleNext}\n                onSkip={currentQuestion?.required === false ? handleSkip : null}\n                nextLabel={isLastQuestion ? \"Complete\" : \"Continue\"}\n                showNext={true}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}