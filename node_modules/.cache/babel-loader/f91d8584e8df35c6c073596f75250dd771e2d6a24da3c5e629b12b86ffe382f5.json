{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { AssessmentEngine } from '../engine/AssessmentEngine';\n\n// Define the assessment flow stages in order\nconst ASSESSMENT_STAGES = ['sector',\n// Sector selection\n'qualifying',\n// Qualifying questions\n'services',\n// Service selection \n'questions',\n// Dynamic questions\n'email',\n// Email collection\n'results' // Results dashboard\n];\nexport const useAssessment = assessmentType => {\n  _s();\n  const [engine, setEngine] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentStage, setCurrentStage] = useState(() => {\n    // Initialize current stage from localStorage if available\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('assessmentStage') || 'sector';\n    }\n    return 'sector';\n  });\n  const [progress, setProgress] = useState(() => {\n    // Calculate progress based on current stage\n    const stageIndex = ASSESSMENT_STAGES.indexOf(currentStage);\n    return stageIndex >= 0 ? stageIndex / (ASSESSMENT_STAGES.length - 1) * 100 : 0;\n  });\n\n  // Initialize assessment data from localStorage if available\n  const [assessmentData, setAssessmentData] = useState(() => {\n    if (typeof window !== 'undefined') {\n      const savedData = localStorage.getItem('assessmentData');\n      if (savedData) {\n        try {\n          const parsedData = JSON.parse(savedData);\n          console.log('Loaded assessment data from localStorage:', parsedData);\n          return parsedData;\n        } catch (e) {\n          console.error('Error parsing saved assessment data:', e);\n        }\n      }\n    }\n    // Default initial state\n    return {\n      type: assessmentType,\n      qualifying: {},\n      services: [],\n      responses: {}\n    };\n  });\n  useEffect(() => {\n    const initializeAssessment = async () => {\n      try {\n        setLoading(true);\n        const assessmentEngine = new AssessmentEngine(assessmentType);\n        await assessmentEngine.initialize();\n        setEngine(assessmentEngine);\n        setCurrentStage(assessmentEngine.flow.getCurrentStage());\n        updateProgress(assessmentEngine);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (assessmentType) {\n      initializeAssessment();\n    }\n  }, [assessmentType]);\n  const updateProgress = useCallback(assessmentEngine => {\n    const progressData = assessmentEngine.getProgress();\n    setProgress(progressData.percentage);\n  }, []);\n  const nextStage = useCallback(async () => {\n    if (!engine) return;\n    try {\n      const nextStage = await engine.nextStage();\n      setCurrentStage(nextStage);\n      updateProgress(engine);\n    } catch (err) {\n      setError(err.message);\n    }\n  }, [engine, updateProgress]);\n  const previousStage = useCallback(async () => {\n    if (!engine) return;\n    try {\n      const prevStage = await engine.previousStage();\n      setCurrentStage(prevStage);\n      updateProgress(engine);\n    } catch (err) {\n      setError(err.message);\n    }\n  }, [engine, updateProgress]);\n  const saveResponse = useCallback((questionId, value) => {\n    if (!engine) return;\n    engine.saveResponse(questionId, value);\n  }, [engine]);\n  const getResponse = useCallback(questionId => {\n    if (!engine) return null;\n    return engine.getResponse(questionId);\n  }, [engine]);\n  const setContext = useCallback((key, value) => {\n    if (!engine) return;\n    engine.setContext(key, value);\n  }, [engine]);\n  const getContext = useCallback(key => {\n    if (!engine) return null;\n    return engine.getContext(key);\n  }, [engine]);\n  const updateAssessmentData = useCallback(newData => {\n    // Update state with new data\n    setAssessmentData(prevData => {\n      const updatedData = {\n        ...prevData,\n        ...newData\n      };\n\n      // Immediately persist to localStorage for reliability\n      try {\n        console.log('Immediately persisting assessment data:', updatedData);\n        localStorage.setItem('assessmentData', JSON.stringify(updatedData));\n      } catch (error) {\n        console.error('Error immediately persisting assessment data:', error);\n      }\n      return updatedData;\n    });\n  }, []);\n  const saveProgress = useCallback(async stage => {\n    try {\n      // Save to localStorage\n      localStorage.setItem('assessmentData', JSON.stringify(assessmentData));\n      localStorage.setItem('assessmentStage', stage);\n      console.log(`Saving progress for stage: ${stage}`, assessmentData);\n      return true;\n    } catch (error) {\n      console.error('Error saving assessment data:', error);\n      return false;\n    }\n  }, [assessmentData]);\n  const calculateResults = useCallback(() => {\n    if (!engine) return null;\n    return engine.calculateResults();\n  }, [engine]);\n  const getAssessmentConfig = useCallback(async type => {\n    try {\n      // Dynamically import the assessment configuration file\n      const config = await import(`../../assessments/${type}/config.json`);\n      return config;\n    } catch (err) {\n      console.error('Error loading assessment config:', err);\n      throw new Error(`Failed to load configuration for assessment type: ${type}`);\n    }\n  }, []);\n  const reset = useCallback(() => {\n    if (!engine) return;\n    engine.reset();\n    setCurrentStage(engine.flow.getCurrentStage());\n    setProgress(0);\n  }, [engine]);\n  return {\n    loading,\n    error,\n    currentStage,\n    progress,\n    nextStage,\n    previousStage,\n    saveResponse,\n    getResponse,\n    setContext,\n    getContext,\n    calculateResults,\n    reset,\n    getAssessmentConfig,\n    assessmentData,\n    updateAssessmentData,\n    saveProgress\n  };\n};\n_s(useAssessment, \"aqtUmLUynXQITcg9lZ16uBHpprM=\");\nexport default useAssessment;","map":{"version":3,"names":["useState","useEffect","useCallback","AssessmentEngine","ASSESSMENT_STAGES","useAssessment","assessmentType","_s","engine","setEngine","loading","setLoading","error","setError","currentStage","setCurrentStage","window","localStorage","getItem","progress","setProgress","stageIndex","indexOf","length","assessmentData","setAssessmentData","savedData","parsedData","JSON","parse","console","log","e","type","qualifying","services","responses","initializeAssessment","assessmentEngine","initialize","flow","getCurrentStage","updateProgress","err","message","progressData","getProgress","percentage","nextStage","previousStage","prevStage","saveResponse","questionId","value","getResponse","setContext","key","getContext","updateAssessmentData","newData","prevData","updatedData","setItem","stringify","saveProgress","stage","calculateResults","getAssessmentConfig","config","Error","reset"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/hooks/useAssessment.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { AssessmentEngine } from '../engine/AssessmentEngine';\n\n// Define the assessment flow stages in order\nconst ASSESSMENT_STAGES = [\n    'sector',      // Sector selection\n    'qualifying',  // Qualifying questions\n    'services',    // Service selection \n    'questions',   // Dynamic questions\n    'email',       // Email collection\n    'results'      // Results dashboard\n];\n\nexport const useAssessment = (assessmentType) => {\n    const [engine, setEngine] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [currentStage, setCurrentStage] = useState(() => {\n        // Initialize current stage from localStorage if available\n        if (typeof window !== 'undefined') {\n            return localStorage.getItem('assessmentStage') || 'sector';\n        }\n        return 'sector';\n    });\n    const [progress, setProgress] = useState(() => {\n        // Calculate progress based on current stage\n        const stageIndex = ASSESSMENT_STAGES.indexOf(currentStage);\n        return stageIndex >= 0 ? (stageIndex / (ASSESSMENT_STAGES.length - 1)) * 100 : 0;\n    });\n    \n    // Initialize assessment data from localStorage if available\n    const [assessmentData, setAssessmentData] = useState(() => {\n        if (typeof window !== 'undefined') {\n            const savedData = localStorage.getItem('assessmentData');\n            if (savedData) {\n                try {\n                    const parsedData = JSON.parse(savedData);\n                    console.log('Loaded assessment data from localStorage:', parsedData);\n                    return parsedData;\n                } catch (e) {\n                    console.error('Error parsing saved assessment data:', e);\n                }\n            }\n        }\n        // Default initial state\n        return {\n            type: assessmentType,\n            qualifying: {},\n            services: [],\n            responses: {}\n        };\n    });\n\n    useEffect(() => {\n        const initializeAssessment = async () => {\n            try {\n                setLoading(true);\n                const assessmentEngine = new AssessmentEngine(assessmentType);\n                await assessmentEngine.initialize();\n                setEngine(assessmentEngine);\n                setCurrentStage(assessmentEngine.flow.getCurrentStage());\n                updateProgress(assessmentEngine);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (assessmentType) {\n            initializeAssessment();\n        }\n    }, [assessmentType]);\n\n    const updateProgress = useCallback((assessmentEngine) => {\n        const progressData = assessmentEngine.getProgress();\n        setProgress(progressData.percentage);\n    }, []);\n\n    const nextStage = useCallback(async () => {\n        if (!engine) return;\n        \n        try {\n            const nextStage = await engine.nextStage();\n            setCurrentStage(nextStage);\n            updateProgress(engine);\n        } catch (err) {\n            setError(err.message);\n        }\n    }, [engine, updateProgress]);\n\n    const previousStage = useCallback(async () => {\n        if (!engine) return;\n        \n        try {\n            const prevStage = await engine.previousStage();\n            setCurrentStage(prevStage);\n            updateProgress(engine);\n        } catch (err) {\n            setError(err.message);\n        }\n    }, [engine, updateProgress]);\n\n    const saveResponse = useCallback((questionId, value) => {\n        if (!engine) return;\n        engine.saveResponse(questionId, value);\n    }, [engine]);\n\n    const getResponse = useCallback((questionId) => {\n        if (!engine) return null;\n        return engine.getResponse(questionId);\n    }, [engine]);\n\n    const setContext = useCallback((key, value) => {\n        if (!engine) return;\n        engine.setContext(key, value);\n    }, [engine]);\n\n    const getContext = useCallback((key) => {\n        if (!engine) return null;\n        return engine.getContext(key);\n    }, [engine]);\n    \n    const updateAssessmentData = useCallback((newData) => {\n        // Update state with new data\n        setAssessmentData(prevData => {\n            const updatedData = {\n                ...prevData,\n                ...newData\n            };\n            \n            // Immediately persist to localStorage for reliability\n            try {\n                console.log('Immediately persisting assessment data:', updatedData);\n                localStorage.setItem('assessmentData', JSON.stringify(updatedData));\n            } catch (error) {\n                console.error('Error immediately persisting assessment data:', error);\n            }\n            \n            return updatedData;\n        });\n    }, []);\n    \n    const saveProgress = useCallback(async (stage) => {\n        try {\n            // Save to localStorage\n            localStorage.setItem('assessmentData', JSON.stringify(assessmentData));\n            localStorage.setItem('assessmentStage', stage);\n            console.log(`Saving progress for stage: ${stage}`, assessmentData);\n            return true;\n        } catch (error) {\n            console.error('Error saving assessment data:', error);\n            return false;\n        }\n    }, [assessmentData]);\n\n    const calculateResults = useCallback(() => {\n        if (!engine) return null;\n        return engine.calculateResults();\n    }, [engine]);\n\n    const getAssessmentConfig = useCallback(async (type) => {\n        try {\n            // Dynamically import the assessment configuration file\n            const config = await import(`../../assessments/${type}/config.json`);\n            return config;\n        } catch (err) {\n            console.error('Error loading assessment config:', err);\n            throw new Error(`Failed to load configuration for assessment type: ${type}`);\n        }\n    }, []);\n\n    const reset = useCallback(() => {\n        if (!engine) return;\n        engine.reset();\n        setCurrentStage(engine.flow.getCurrentStage());\n        setProgress(0);\n    }, [engine]);\n\n    return {\n        loading,\n        error,\n        currentStage,\n        progress,\n        nextStage,\n        previousStage,\n        saveResponse,\n        getResponse,\n        setContext,\n        getContext,\n        calculateResults,\n        reset,\n        getAssessmentConfig,\n        assessmentData,\n        updateAssessmentData,\n        saveProgress\n    };\n};\n\nexport default useAssessment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}