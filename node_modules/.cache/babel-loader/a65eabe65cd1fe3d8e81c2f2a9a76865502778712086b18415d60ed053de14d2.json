{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  getContext,\n  // Add this prop that was missing\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadQuestions();\n  }, [assessmentType]);\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      console.log('Loading questions for assessment type:', assessmentType);\n\n      // Load core questions based on assessment type\n      const module = await import(`../../assessments/${assessmentType}/questions.json`);\n      const data = module.default || module;\n\n      // Extract and flatten core questions array from the loaded data\n      let coreQuestions = [];\n      if (data.questions) {\n        // Direct questions array format\n        coreQuestions = data.questions;\n      } else if (data.coreQuestions) {\n        // Nested questions by category format\n        Object.values(data.coreQuestions).forEach(questionSet => {\n          if (Array.isArray(questionSet)) {\n            coreQuestions = [...coreQuestions, ...questionSet];\n          }\n        });\n      }\n      console.log(`Loaded ${coreQuestions.length} core questions`);\n\n      // If we have selected services, load service-specific questions\n      let serviceQuestions = [];\n\n      // Get selected services from context or responses with detailed logging\n      let selectedServices;\n      console.log('DEBUG - Trying to get selectedServices...');\n      try {\n        // First try context if available\n        if (typeof getContext === 'function') {\n          console.log('DEBUG - getContext function is available');\n          selectedServices = getContext('selectedServices');\n          console.log('DEBUG - selectedServices from context:', selectedServices);\n        } else {\n          console.log('DEBUG - getContext is not a function');\n        }\n\n        // If not found in context, fall back to response\n        if (!selectedServices && typeof getResponse === 'function') {\n          console.log('DEBUG - Trying getResponse for selectedServices');\n          selectedServices = getResponse('selectedServices');\n          console.log('DEBUG - selectedServices from responses:', selectedServices);\n        }\n\n        // Log the selected services format\n        if (selectedServices) {\n          console.log('DEBUG - selectedServices type:', typeof selectedServices);\n          console.log('DEBUG - selectedServices keys:', Object.keys(selectedServices));\n          console.log('DEBUG - selectedServices values:', Object.values(selectedServices));\n        } else {\n          console.log('DEBUG - selectedServices is null or undefined');\n        }\n      } catch (err) {\n        console.error('Error getting selectedServices:', err);\n      }\n      console.log('DEBUG - Type of selectedServices:', typeof selectedServices);\n      if (selectedServices && Object.keys(selectedServices).length > 0) {\n        try {\n          // Load service-specific questions\n          console.log(`DEBUG - Loading service questions from: ../../assessments/${assessmentType}/service-questions.json`);\n          const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n          const serviceData = serviceModule.default || serviceModule;\n          console.log('DEBUG - Service data structure found. Top-level keys:', Object.keys(serviceData));\n\n          // LOWER THRESHOLD - Use 0.05 (5%) instead of 0.1 (10%)\n          const ALLOCATION_THRESHOLD = 0.05;\n\n          // Process selected services and load their questions\n          Object.keys(selectedServices).forEach(serviceId => {\n            const allocation = selectedServices[serviceId];\n            console.log(`DEBUG - Processing service ${serviceId} with allocation ${allocation}`);\n\n            // Only include questions for services with allocation above threshold\n            if (allocation >= ALLOCATION_THRESHOLD) {\n              let serviceQuestionSet = [];\n\n              // First try standard format: serviceQuestions[serviceId].questions\n              if (serviceData.serviceQuestions && serviceData.serviceQuestions[serviceId] && Array.isArray(serviceData.serviceQuestions[serviceId].questions)) {\n                serviceQuestionSet = serviceData.serviceQuestions[serviceId].questions;\n                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in standard format`);\n              }\n              // Try alternate format: direct mapping of serviceId to questions array\n              else if (serviceData[serviceId] && Array.isArray(serviceData[serviceId])) {\n                serviceQuestionSet = serviceData[serviceId];\n                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in alternate format 1`);\n              }\n              // Try another alternate format: serviceId.questions\n              else if (serviceData[serviceId] && Array.isArray(serviceData[serviceId].questions)) {\n                serviceQuestionSet = serviceData[serviceId].questions;\n                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in alternate format 2`);\n              }\n              // If service ID contains underscores, try splitting and matching partial keys\n              else if (serviceId.includes('_')) {\n                const baseServiceId = serviceId.split('_')[0];\n                console.log(`Trying partial match with base service ID: ${baseServiceId}`);\n                if (serviceData.serviceQuestions && serviceData.serviceQuestions[baseServiceId]) {\n                  serviceQuestionSet = serviceData.serviceQuestions[baseServiceId].questions || [];\n                  console.log(`Found ${serviceQuestionSet.length} questions using partial service ID match`);\n                }\n              }\n              // If still no match, look for any keys that include this service ID as a substring\n              else {\n                console.log(`No direct match for ${serviceId}, looking for partial matches in keys`);\n                if (serviceData.serviceQuestions) {\n                  // Try to find a partial match in serviceQuestions keys\n                  const possibleMatches = Object.keys(serviceData.serviceQuestions).filter(key => key.includes(serviceId) || serviceId.includes(key));\n                  if (possibleMatches.length > 0) {\n                    const matchedKey = possibleMatches[0];\n                    console.log(`Found potential match: ${matchedKey}`);\n                    serviceQuestionSet = serviceData.serviceQuestions[matchedKey].questions || [];\n                  }\n                }\n              }\n              if (serviceQuestionSet.length > 0) {\n                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} (allocation: ${Math.round(allocation * 100)}%)`);\n                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n              } else {\n                console.warn(`No questions found for service ${serviceId} despite searching all possible formats`);\n              }\n            } else {\n              console.log(`Skipping questions for service ${serviceId} - allocation too low (${Math.round(allocation * 100)}% < ${ALLOCATION_THRESHOLD * 100}%)`);\n            }\n          });\n        } catch (err) {\n          console.error('Error loading service questions:', err);\n          console.error('Error details:', err.message, err.stack);\n        }\n      } else {\n        console.warn('No services selected or invalid selectedServices format:', selectedServices);\n      }\n      console.log(`Found ${serviceQuestions.length} total service-specific questions`);\n\n      // Remove any potential duplicate questions by ID\n      const uniqueQuestions = [];\n      const questionIds = new Set();\n\n      // First add core questions\n      coreQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n\n      // Then add service questions, avoiding duplicates\n      serviceQuestions.forEach(q => {\n        if (!questionIds.has(q.id)) {\n          questionIds.add(q.id);\n          uniqueQuestions.push(q);\n        }\n      });\n      console.log(`Total unique questions to display: ${uniqueQuestions.length}`);\n      console.log('Question IDs:', Array.from(questionIds));\n      setQuestions(uniqueQuestions);\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (questionId, value) => {\n    // Save the answer\n    saveResponse(questionId, value);\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = () => {\n    // Validate if the current question is answered\n    const currentQ = questions[currentQuestionIndex];\n    if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n      alert('Please answer this question before continuing');\n      return;\n    }\n    if (isLastQuestion) {\n      // Move to the next stage using onComplete callback\n      onComplete();\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      // Go back to the previous stage in the assessment flow\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress || 65,\n      stage: \"assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Organization Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question || currentQuestion.text, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${selectedValue === (option.value || option.score || index) ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value || option.score || index),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label || option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 25\n        }, this), currentQuestion.insight && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionInsight,\n          children: currentQuestion.insight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 29\n        }, this), currentQuestion.benchmark && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionBenchmark,\n          children: currentQuestion.benchmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${getResponse(questions[index].id) ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handlePrevious,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? handleSkip : null,\n      nextLabel: isLastQuestion ? \"Complete\" : \"Continue\",\n      showNext: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","Navigation","styles","jsxDEV","_jsxDEV","DynamicQuestions","assessmentType","saveResponse","getResponse","getContext","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","console","log","module","data","default","coreQuestions","Object","values","forEach","questionSet","Array","isArray","length","serviceQuestions","selectedServices","keys","err","error","serviceModule","serviceData","ALLOCATION_THRESHOLD","serviceId","allocation","serviceQuestionSet","includes","baseServiceId","split","possibleMatches","filter","key","matchedKey","Math","round","warn","message","stack","uniqueQuestions","questionIds","Set","q","has","id","add","push","from","currentQuestion","isLastQuestion","handleAnswer","questionId","value","setTimeout","handleNext","currentQ","required","alert","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","selectedValue","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","text","optionsGrid","options","map","option","index","optionButton","score","selected","optionLabel","label","insight","questionInsight","benchmark","questionBenchmark","questionDots","_","dot","active","answered","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    getContext, // Add this prop that was missing\n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            console.log('Loading questions for assessment type:', assessmentType);\n            \n            // Load core questions based on assessment type\n            const module = await import(`../../assessments/${assessmentType}/questions.json`);\n            const data = module.default || module;\n            \n            // Extract and flatten core questions array from the loaded data\n            let coreQuestions = [];\n            if (data.questions) {\n                // Direct questions array format\n                coreQuestions = data.questions;\n            } else if (data.coreQuestions) {\n                // Nested questions by category format\n                Object.values(data.coreQuestions).forEach(questionSet => {\n                    if (Array.isArray(questionSet)) {\n                        coreQuestions = [...coreQuestions, ...questionSet];\n                    }\n                });\n            }\n            console.log(`Loaded ${coreQuestions.length} core questions`);\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            \n            // Get selected services from context or responses with detailed logging\n            let selectedServices;\n            console.log('DEBUG - Trying to get selectedServices...');\n            \n            try {\n                // First try context if available\n                if (typeof getContext === 'function') {\n                    console.log('DEBUG - getContext function is available');\n                    selectedServices = getContext('selectedServices');\n                    console.log('DEBUG - selectedServices from context:', selectedServices);\n                } else {\n                    console.log('DEBUG - getContext is not a function');\n                }\n                \n                // If not found in context, fall back to response\n                if (!selectedServices && typeof getResponse === 'function') {\n                    console.log('DEBUG - Trying getResponse for selectedServices');\n                    selectedServices = getResponse('selectedServices');\n                    console.log('DEBUG - selectedServices from responses:', selectedServices);\n                }\n                \n                // Log the selected services format\n                if (selectedServices) {\n                    console.log('DEBUG - selectedServices type:', typeof selectedServices);\n                    console.log('DEBUG - selectedServices keys:', Object.keys(selectedServices));\n                    console.log('DEBUG - selectedServices values:', Object.values(selectedServices));\n                } else {\n                    console.log('DEBUG - selectedServices is null or undefined');\n                }\n            } catch (err) {\n                console.error('Error getting selectedServices:', err);\n            }\n            \n            console.log('DEBUG - Type of selectedServices:', typeof selectedServices);\n            \n            if (selectedServices && Object.keys(selectedServices).length > 0) {\n                try {\n                    // Load service-specific questions\n                    console.log(`DEBUG - Loading service questions from: ../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceData = serviceModule.default || serviceModule;\n                    \n                    console.log('DEBUG - Service data structure found. Top-level keys:', Object.keys(serviceData));\n                    \n                    // LOWER THRESHOLD - Use 0.05 (5%) instead of 0.1 (10%)\n                    const ALLOCATION_THRESHOLD = 0.05;\n                    \n                    // Process selected services and load their questions\n                    Object.keys(selectedServices).forEach(serviceId => {\n                        const allocation = selectedServices[serviceId];\n                        console.log(`DEBUG - Processing service ${serviceId} with allocation ${allocation}`);\n                        \n                        // Only include questions for services with allocation above threshold\n                        if (allocation >= ALLOCATION_THRESHOLD) {\n                            let serviceQuestionSet = [];\n                            \n                            // First try standard format: serviceQuestions[serviceId].questions\n                            if (serviceData.serviceQuestions && \n                                serviceData.serviceQuestions[serviceId] && \n                                Array.isArray(serviceData.serviceQuestions[serviceId].questions)) {\n                                \n                                serviceQuestionSet = serviceData.serviceQuestions[serviceId].questions;\n                                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in standard format`);\n                            }\n                            // Try alternate format: direct mapping of serviceId to questions array\n                            else if (serviceData[serviceId] && Array.isArray(serviceData[serviceId])) {\n                                serviceQuestionSet = serviceData[serviceId];\n                                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in alternate format 1`);\n                            }\n                            // Try another alternate format: serviceId.questions\n                            else if (serviceData[serviceId] && Array.isArray(serviceData[serviceId].questions)) {\n                                serviceQuestionSet = serviceData[serviceId].questions;\n                                console.log(`Found ${serviceQuestionSet.length} questions for service ${serviceId} in alternate format 2`);\n                            }\n                            // If service ID contains underscores, try splitting and matching partial keys\n                            else if (serviceId.includes('_')) {\n                                const baseServiceId = serviceId.split('_')[0];\n                                console.log(`Trying partial match with base service ID: ${baseServiceId}`);\n                                \n                                if (serviceData.serviceQuestions && serviceData.serviceQuestions[baseServiceId]) {\n                                    serviceQuestionSet = serviceData.serviceQuestions[baseServiceId].questions || [];\n                                    console.log(`Found ${serviceQuestionSet.length} questions using partial service ID match`);\n                                }\n                            }\n                            // If still no match, look for any keys that include this service ID as a substring\n                            else {\n                                console.log(`No direct match for ${serviceId}, looking for partial matches in keys`);\n                                \n                                if (serviceData.serviceQuestions) {\n                                    // Try to find a partial match in serviceQuestions keys\n                                    const possibleMatches = Object.keys(serviceData.serviceQuestions)\n                                        .filter(key => key.includes(serviceId) || serviceId.includes(key));\n                                    \n                                    if (possibleMatches.length > 0) {\n                                        const matchedKey = possibleMatches[0];\n                                        console.log(`Found potential match: ${matchedKey}`);\n                                        serviceQuestionSet = serviceData.serviceQuestions[matchedKey].questions || [];\n                                    }\n                                }\n                            }\n                            \n                            if (serviceQuestionSet.length > 0) {\n                                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} (allocation: ${Math.round(allocation * 100)}%)`);\n                                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n                            } else {\n                                console.warn(`No questions found for service ${serviceId} despite searching all possible formats`);\n                            }\n                        } else {\n                            console.log(`Skipping questions for service ${serviceId} - allocation too low (${Math.round(allocation * 100)}% < ${ALLOCATION_THRESHOLD * 100}%)`);\n                        }\n                    });\n                } catch (err) {\n                    console.error('Error loading service questions:', err);\n                    console.error('Error details:', err.message, err.stack);\n                }\n            } else {\n                console.warn('No services selected or invalid selectedServices format:', selectedServices);\n            }\n            \n            console.log(`Found ${serviceQuestions.length} total service-specific questions`);\n            \n            // Remove any potential duplicate questions by ID\n            const uniqueQuestions = [];\n            const questionIds = new Set();\n            \n            // First add core questions\n            coreQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            // Then add service questions, avoiding duplicates\n            serviceQuestions.forEach(q => {\n                if (!questionIds.has(q.id)) {\n                    questionIds.add(q.id);\n                    uniqueQuestions.push(q);\n                }\n            });\n            \n            console.log(`Total unique questions to display: ${uniqueQuestions.length}`);\n            console.log('Question IDs:', Array.from(questionIds));\n            \n            setQuestions(uniqueQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (questionId, value) => {\n        // Save the answer\n        saveResponse(questionId, value);\n        \n        // Auto-advance to next question after a short delay\n        setTimeout(() => {\n            if (currentQuestionIndex < questions.length - 1) {\n                setCurrentQuestionIndex(currentQuestionIndex + 1);\n            }\n        }, 300);\n    };\n\n    const handleNext = () => {\n        // Validate if the current question is answered\n        const currentQ = questions[currentQuestionIndex];\n        if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n            alert('Please answer this question before continuing');\n            return;\n        }\n        \n        if (isLastQuestion) {\n            // Move to the next stage using onComplete callback\n            onComplete();\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.qualifyingContainer}>\n            <ProgressBar progress={progress || 65} stage=\"assessment\" />\n            \n            <div className={styles.questionContainer}>\n                <div className={styles.questionHeader}>\n                    <h2>Your Organization Assessment</h2>\n                    <p className={styles.questionNumber}>\n                        Question {currentQuestionIndex + 1} of {questions.length}\n                    </p>\n                </div>\n\n                {currentQuestion && (\n                    <div className={styles.questionContent}>\n                        <h3 className={styles.questionText}>\n                            {currentQuestion.question || currentQuestion.text}\n                            {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n                        </h3>\n                        \n                        <div className={styles.optionsGrid}>\n                            {currentQuestion.options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    className={`${styles.optionButton} ${\n                                        selectedValue === (option.value || option.score || index) ? styles.selected : ''\n                                    }`}\n                                    onClick={() => handleAnswer(currentQuestion.id, option.value || option.score || index)}\n                                >\n                                    <span className={styles.optionLabel}>{option.label || option.text}</span>\n                                </button>\n                            ))}\n                        </div>\n                        \n                        {currentQuestion.insight && (\n                            <p className={styles.questionInsight}>{currentQuestion.insight}</p>\n                        )}\n                        \n                        {currentQuestion.benchmark && (\n                            <p className={styles.questionBenchmark}>{currentQuestion.benchmark}</p>\n                        )}\n                    </div>\n                )}\n\n                {/* Question navigation dots */}\n                <div className={styles.questionDots}>\n                    {questions.map((_, index) => (\n                        <button\n                            key={index}\n                            className={`${styles.dot} ${\n                                index === currentQuestionIndex ? styles.active : ''\n                            } ${getResponse(questions[index].id) ? styles.answered : ''}`}\n                            onClick={() => setCurrentQuestionIndex(index)}\n                            aria-label={`Go to question ${index + 1}`}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <Navigation\n                onBack={handlePrevious}\n                onNext={handleNext}\n                onSkip={currentQuestion?.required === false ? handleSkip : null}\n                nextLabel={isLastQuestion ? \"Complete\" : \"Continue\"}\n                showNext={true}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}