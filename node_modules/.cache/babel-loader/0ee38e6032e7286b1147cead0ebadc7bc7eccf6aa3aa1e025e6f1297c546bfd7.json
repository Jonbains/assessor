{"ast":null,"code":"/**\n * Agency Transformation Scoring Engine - Enhanced Version\n * \n * Calculates both transformation readiness and valuation metrics\n * with sophisticated weighting and market benchmarking\n */\n\nexport class AgencyTransformationScoring {\n  constructor(config = {}) {\n    this.config = config;\n\n    // Dimension weights for transformation score\n    this.transformationWeights = {\n      transformation: 0.25,\n      resources: 0.20,\n      leadership: 0.20,\n      change: 0.35\n    };\n\n    // Valuation dimension weights\n    this.valuationWeights = {\n      financial: 0.35,\n      operational: 0.30,\n      strategic: 0.20,\n      ai: 0.15\n    };\n\n    // Question weights by importance\n    this.questionWeights = {\n      tc: {\n        // Transformation capability\n        tc_1: 1.5,\n        // Current AI usage (critical)\n        tc_2: 1.2,\n        // Process improvement\n        tc_3: 1.0,\n        // Experimentation\n        tc_4: 1.3,\n        // Integration capability\n        tc_5: 1.4 // Strategic planning\n      },\n      rc: {\n        // Resource capability\n        rc_1: 1.3,\n        // Budget availability\n        rc_2: 1.1,\n        // Tool investment\n        rc_3: 1.0,\n        // Training time\n        rc_4: 1.4,\n        // Revenue predictability\n        rc_5: 1.2 // Resource allocation\n      },\n      lc: {\n        // Leadership commitment\n        lc_1: 1.5,\n        // Leadership vision (critical)\n        lc_2: 1.2,\n        // Decision making\n        lc_3: 1.3,\n        // Strategic alignment\n        lc_4: 1.1,\n        // Risk tolerance\n        lc_5: 1.4 // Innovation culture\n      },\n      cr: {\n        // Change readiness\n        cr_1: 1.2,\n        // Past transformations\n        cr_2: 1.4,\n        // AI understanding\n        cr_3: 1.3,\n        // Client readiness  \n        cr_4: 1.1,\n        // Knowledge management\n        cr_5: 1.0,\n        // Team structure\n        cr_6: 1.5 // Client concentration\n      }\n    };\n\n    // Service vulnerability baseline scores\n    this.serviceVulnerability = {\n      content_creation: 85,\n      seo_sem: 80,\n      digital_marketing: 75,\n      media_planning: 70,\n      creative_design: 65,\n      pr_comms: 60,\n      video_production: 55,\n      strategy_consulting: 35,\n      brand_strategy: 30\n    };\n\n    // Agency size modifiers\n    this.sizeModifiers = {\n      '1-10': {\n        agility: 1.2,\n        resource_constraint: 0.8,\n        benchmarks: {\n          low: 25,\n          average: 40,\n          high: 65,\n          exceptional: 80\n        }\n      },\n      '11-50': {\n        agility: 1.0,\n        resource_constraint: 1.0,\n        benchmarks: {\n          low: 30,\n          average: 50,\n          high: 70,\n          exceptional: 85\n        }\n      },\n      '51-200': {\n        agility: 0.8,\n        resource_constraint: 1.2,\n        benchmarks: {\n          low: 35,\n          average: 55,\n          high: 75,\n          exceptional: 90\n        }\n      },\n      '200+': {\n        agility: 0.6,\n        resource_constraint: 1.3,\n        benchmarks: {\n          low: 40,\n          average: 60,\n          high: 80,\n          exceptional: 95\n        }\n      }\n    };\n\n    // Valuation impact factors\n    this.valuationFactors = {\n      recurring_revenue: {\n        threshold: 40,\n        // % of revenue\n        impact: 0.5,\n        // Multiple increase\n        current_avg: 25\n      },\n      client_concentration: {\n        threshold: 20,\n        // Max % per client\n        impact: 0.5,\n        current_avg: 35\n      },\n      ai_capability: {\n        threshold: 70,\n        // Readiness score\n        impact: 1.5,\n        current_avg: 30\n      },\n      process_maturity: {\n        threshold: 60,\n        impact: 0.3,\n        current_avg: 40\n      },\n      team_capability: {\n        threshold: 65,\n        impact: 0.7,\n        current_avg: 35\n      }\n    };\n  }\n\n  /**\n   * Main scoring method - enhanced version\n   */\n  calculateScores(answers, metadata) {\n    const {\n      selectedServices = [],\n      agencySize,\n      revenue,\n      agencyType\n    } = metadata;\n\n    // Calculate weighted dimension scores\n    const dimensionScores = this.calculateWeightedDimensionScores(answers);\n\n    // Map to valuation dimensions with context\n    const valuationDimensions = this.calculateValuationDimensions(answers, dimensionScores, metadata);\n\n    // Calculate service-specific scores with competitive analysis\n    const serviceScores = this.calculateServiceScores(answers, selectedServices);\n\n    // Calculate aggregate vulnerability metrics\n    const vulnerabilityMetrics = this.calculateVulnerabilityMetrics(serviceScores, selectedServices);\n\n    // Calculate transformation readiness with size adjustments\n    const transformationScore = this.calculateTransformationScore(dimensionScores, agencySize);\n\n    // Calculate valuation score with market context\n    const valuationScore = this.calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores);\n\n    // Calculate overall score with strategic weighting\n    const overallScore = this.calculateOverallScore(transformationScore, valuationScore);\n\n    // Determine categories with benchmarking\n    const readinessCategory = this.getReadinessCategory(transformationScore, agencySize);\n    const valuationCategory = this.getValuationCategory(valuationScore);\n\n    // Extract actionable insights\n    const insights = this.extractActionableInsights(dimensionScores, valuationDimensions, serviceScores, answers, metadata);\n\n    // Calculate specific risk factors with severity\n    const riskFactors = this.calculateDetailedRiskFactors(answers, serviceScores, metadata);\n\n    // Identify transformation priorities\n    const priorities = this.identifyTransformationPriorities(dimensionScores, serviceScores, riskFactors, agencySize);\n\n    // Calculate savings and efficiency potential\n    const efficiencyPotential = this.calculateEfficiencyPotential(serviceScores, selectedServices, agencySize, revenue);\n\n    // Market positioning analysis\n    const marketPosition = this.analyzeMarketPosition(overallScore, agencySize, agencyType);\n    return {\n      overall: Math.round(overallScore),\n      transformation: Math.round(transformationScore),\n      valuation: Math.round(valuationScore),\n      dimensions: {\n        transformation: Math.round(dimensionScores.transformation),\n        resources: Math.round(dimensionScores.resources),\n        leadership: Math.round(dimensionScores.leadership),\n        change: Math.round(dimensionScores.change)\n      },\n      valuationDimensions: {\n        financial: Math.round(valuationDimensions.financial),\n        operational: Math.round(valuationDimensions.operational),\n        strategic: Math.round(valuationDimensions.strategic),\n        ai: Math.round(valuationDimensions.ai)\n      },\n      serviceScores: serviceScores,\n      vulnerabilityMetrics: vulnerabilityMetrics,\n      categories: {\n        readiness: readinessCategory,\n        valuation: valuationCategory\n      },\n      riskFactors: riskFactors,\n      insights: insights,\n      priorities: priorities,\n      efficiencyPotential: efficiencyPotential,\n      marketPosition: marketPosition,\n      metadata: {\n        agencySize,\n        revenue,\n        agencyType,\n        selectedServices,\n        questionCount: Object.keys(answers).length,\n        completionRate: this.calculateCompletionRate(answers),\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Calculate weighted dimension scores\n   */\n  calculateWeightedDimensionScores(answers) {\n    const dimensions = {\n      transformation: {\n        scores: [],\n        weights: []\n      },\n      resources: {\n        scores: [],\n        weights: []\n      },\n      leadership: {\n        scores: [],\n        weights: []\n      },\n      change: {\n        scores: [],\n        weights: []\n      }\n    };\n\n    // Process answers with weights\n    Object.entries(answers).forEach(([questionId, answer]) => {\n      const score = typeof answer === 'object' ? answer.score || 0 : answer;\n      let dimension, weight;\n\n      // Determine dimension and weight\n      if (questionId.startsWith('tc_')) {\n        dimension = 'transformation';\n        weight = this.questionWeights.tc[questionId] || 1.0;\n      } else if (questionId.startsWith('rc_')) {\n        dimension = 'resources';\n        weight = this.questionWeights.rc[questionId] || 1.0;\n      } else if (questionId.startsWith('lc_')) {\n        dimension = 'leadership';\n        weight = this.questionWeights.lc[questionId] || 1.0;\n      } else if (questionId.startsWith('cr_')) {\n        dimension = 'change';\n        weight = this.questionWeights.cr[questionId] || 1.0;\n      }\n      if (dimension) {\n        dimensions[dimension].scores.push(score);\n        dimensions[dimension].weights.push(weight);\n      }\n    });\n\n    // Calculate weighted averages\n    const dimensionScores = {};\n    Object.entries(dimensions).forEach(([dimension, data]) => {\n      if (data.scores.length > 0) {\n        const weightedSum = data.scores.reduce((sum, score, i) => sum + score * data.weights[i], 0);\n        const totalWeight = data.weights.reduce((sum, w) => sum + w, 0);\n        dimensionScores[dimension] = (weightedSum / totalWeight - 1) / 4 * 100;\n      } else {\n        dimensionScores[dimension] = 50;\n      }\n    });\n    return dimensionScores;\n  }\n\n  /**\n   * Calculate valuation dimensions with enhanced mapping\n   */\n  calculateValuationDimensions(answers, dimensionScores, metadata) {\n    var _answers$lc_, _answers$cr_, _answers$tc_, _answers$cr_2;\n    const valuationDims = {\n      financial: 0,\n      operational: 0,\n      strategic: 0,\n      ai: 0\n    };\n\n    // Financial health - weighted calculation\n    const financialFactors = [{\n      question: 'rc_1',\n      weight: 1.5\n    },\n    // Budget flexibility\n    {\n      question: 'rc_4',\n      weight: 2.0\n    },\n    // Revenue predictability\n    {\n      question: 'rc_5',\n      weight: 1.2\n    },\n    // Resource allocation\n    {\n      question: 'cr_6',\n      weight: 1.8\n    } // Client concentration\n    ];\n    let financialSum = 0,\n      financialWeight = 0;\n    financialFactors.forEach(factor => {\n      var _answers$factor$quest;\n      const score = ((_answers$factor$quest = answers[factor.question]) === null || _answers$factor$quest === void 0 ? void 0 : _answers$factor$quest.score) || answers[factor.question] || 3;\n      financialSum += score * factor.weight;\n      financialWeight += factor.weight;\n    });\n    valuationDims.financial = (financialSum / financialWeight - 1) / 4 * 100;\n\n    // Operational excellence - process and efficiency\n    const operationalFactors = [{\n      question: 'tc_2',\n      weight: 1.3\n    },\n    // Process improvement\n    {\n      question: 'tc_4',\n      weight: 1.5\n    },\n    // Integration capability\n    {\n      question: 'rc_2',\n      weight: 1.0\n    },\n    // Tool investment\n    {\n      question: 'cr_1',\n      weight: 1.2\n    },\n    // Past transformations\n    {\n      question: 'cr_4',\n      weight: 1.4\n    } // Knowledge management\n    ];\n    let operationalSum = 0,\n      operationalWeight = 0;\n    operationalFactors.forEach(factor => {\n      var _answers$factor$quest2;\n      const score = ((_answers$factor$quest2 = answers[factor.question]) === null || _answers$factor$quest2 === void 0 ? void 0 : _answers$factor$quest2.score) || answers[factor.question] || 3;\n      operationalSum += score * factor.weight;\n      operationalWeight += factor.weight;\n    });\n    valuationDims.operational = (operationalSum / operationalWeight - 1) / 4 * 100;\n\n    // Strategic position\n    valuationDims.strategic = dimensionScores.leadership * 0.5 + ((((_answers$lc_ = answers.lc_3) === null || _answers$lc_ === void 0 ? void 0 : _answers$lc_.score) || answers.lc_3 || 3) - 1) * 25 * 0.3 + ((((_answers$cr_ = answers.cr_3) === null || _answers$cr_ === void 0 ? void 0 : _answers$cr_.score) || answers.cr_3 || 3) - 1) * 25 * 0.2;\n\n    // AI capability\n    valuationDims.ai = dimensionScores.transformation * 0.6 + ((((_answers$tc_ = answers.tc_1) === null || _answers$tc_ === void 0 ? void 0 : _answers$tc_.score) || answers.tc_1 || 3) - 1) * 25 * 0.2 + ((((_answers$cr_2 = answers.cr_2) === null || _answers$cr_2 === void 0 ? void 0 : _answers$cr_2.score) || answers.cr_2 || 3) - 1) * 25 * 0.2;\n    return valuationDims;\n  }\n\n  /**\n   * Calculate service scores with competitive benchmarking\n   */\n  calculateServiceScores(answers, selectedServices) {\n    const serviceScores = {};\n    selectedServices.forEach(service => {\n      const serviceQuestions = Object.entries(answers).filter(([questionId]) => questionId.includes(service.substring(0, 4))).map(([_, answer]) => typeof answer === 'object' ? answer.score : answer);\n      if (serviceQuestions.length > 0) {\n        const avgScore = serviceQuestions.reduce((a, b) => a + b, 0) / serviceQuestions.length;\n        const normalizedScore = (avgScore - 1) / 4 * 100;\n\n        // Get AI opportunity score\n        const aiOpportunityQuestion = answers[`${service.substring(0, 7)}_5`];\n        const aiOpportunity = aiOpportunityQuestion ? ((aiOpportunityQuestion.score || aiOpportunityQuestion || 3) - 1) * 25 : 50;\n\n        // Calculate competitive position\n        const vulnerability = this.serviceVulnerability[service] || 50;\n        const competitiveGap = vulnerability - normalizedScore;\n        serviceScores[service] = {\n          score: Math.round(normalizedScore),\n          vulnerability: vulnerability,\n          adaptability: Math.round(100 - vulnerability + normalizedScore * 0.3),\n          aiOpportunity: Math.round(aiOpportunity),\n          competitiveGap: Math.round(competitiveGap),\n          marketPressure: this.calculateMarketPressure(service, vulnerability),\n          transformationUrgency: this.calculateTransformationUrgency(normalizedScore, vulnerability, aiOpportunity),\n          readiness: normalizedScore > 60 ? 'high' : normalizedScore > 40 ? 'medium' : 'low'\n        };\n      }\n    });\n    return serviceScores;\n  }\n\n  /**\n   * Calculate vulnerability metrics\n   */\n  calculateVulnerabilityMetrics(serviceScores, selectedServices) {\n    if (selectedServices.length === 0) {\n      return {\n        overall: 50,\n        highest: 50,\n        average: 50,\n        criticalServices: 0\n      };\n    }\n    let totalVulnerability = 0;\n    let maxVulnerability = 0;\n    let criticalCount = 0;\n    let weights = [];\n    selectedServices.forEach(service => {\n      const score = serviceScores[service];\n      if (score) {\n        // Weight by readiness (lower readiness = higher weight)\n        const weight = score.readiness === 'low' ? 1.5 : score.readiness === 'medium' ? 1.0 : 0.7;\n        totalVulnerability += score.vulnerability * weight;\n        weights.push(weight);\n        if (score.vulnerability > maxVulnerability) {\n          maxVulnerability = score.vulnerability;\n        }\n        if (score.vulnerability > 75 && score.readiness === 'low') {\n          criticalCount++;\n        }\n      }\n    });\n    const totalWeight = weights.reduce((a, b) => a + b, 0);\n    return {\n      overall: Math.round(totalVulnerability / totalWeight),\n      highest: maxVulnerability,\n      average: Math.round(totalVulnerability / totalWeight),\n      criticalServices: criticalCount,\n      atriskRevenue: this.calculateAtRiskRevenue(serviceScores, selectedServices)\n    };\n  }\n\n  /**\n   * Calculate transformation score with size adjustments\n   */\n  calculateTransformationScore(dimensionScores, agencySize) {\n    let weightedSum = 0;\n    let totalWeight = 0;\n    Object.entries(this.transformationWeights).forEach(([dimension, weight]) => {\n      if (dimensionScores[dimension] !== undefined) {\n        weightedSum += dimensionScores[dimension] * weight;\n        totalWeight += weight;\n      }\n    });\n    let baseScore = totalWeight > 0 ? weightedSum / totalWeight : 50;\n\n    // Apply size modifiers\n    const sizeModifier = this.sizeModifiers[agencySize] || this.sizeModifiers['11-50'];\n\n    // Agility bonus for smaller agencies\n    if (agencySize === '1-10' && baseScore > 40) {\n      baseScore *= sizeModifier.agility;\n    }\n\n    // Resource constraint penalty\n    if (dimensionScores.resources < 40) {\n      baseScore *= sizeModifier.resource_constraint;\n    }\n    return Math.max(0, Math.min(100, baseScore));\n  }\n\n  /**\n   * Calculate valuation score with market context\n   */\n  calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores) {\n    var _answers$cr_3;\n    const insights = [];\n\n    // Transformation insights\n    if (dimensionScores.transformation > 70) {\n      insights.push({\n        type: 'strength',\n        priority: 'high',\n        message: 'Your AI foundation positions you in the top 20% of agencies',\n        action: 'Leverage this advantage to win AI-forward clients',\n        impact: 'Revenue growth opportunity'\n      });\n    } else if (dimensionScores.transformation < 40) {\n      insights.push({\n        type: 'risk',\n        priority: 'critical',\n        message: 'Limited AI adoption creates immediate competitive disadvantage',\n        action: 'Start with team-wide AI literacy program this week',\n        impact: 'Prevent client loss'\n      });\n    }\n\n    // Resource insights\n    if (dimensionScores.resources > 60 && dimensionScores.transformation < 50) {\n      insights.push({\n        type: 'opportunity',\n        priority: 'high',\n        message: 'You have resources but lack AI direction',\n        action: 'Invest in strategic AI roadmap development',\n        impact: 'Accelerate transformation by 6 months'\n      });\n    }\n\n    // Leadership insights\n    if (dimensionScores.leadership > 70) {\n      insights.push({\n        type: 'strength',\n        priority: 'medium',\n        message: 'Leadership alignment is your transformation superpower',\n        action: 'Empower leaders as AI champions',\n        impact: '3x faster adoption'\n      });\n    } else if (dimensionScores.leadership < 40) {\n      insights.push({\n        type: 'blocker',\n        priority: 'critical',\n        message: 'Leadership skepticism will sabotage AI initiatives',\n        action: 'Executive AI immersion session urgently needed',\n        impact: 'Unblock transformation'\n      });\n    }\n\n    // Service vulnerability insights\n    const criticalServices = Object.entries(serviceScores).filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low').map(([service]) => service);\n    if (criticalServices.length > 0) {\n      insights.push({\n        type: 'threat',\n        priority: 'critical',\n        message: `${criticalServices.length} core services face immediate AI disruption`,\n        action: `Transform ${this.getServiceName(criticalServices[0])} first`,\n        impact: 'Protect revenue base'\n      });\n    }\n\n    // Valuation insights\n    if (valuationDimensions.financial < 40 && valuationDimensions.ai > 60) {\n      insights.push({\n        type: 'opportunity',\n        priority: 'high',\n        message: 'Strong AI capability hindered by weak financials',\n        action: 'Focus on recurring revenue and client diversification',\n        impact: '+1-2x valuation multiple'\n      });\n    }\n\n    // Client concentration insight\n    const clientConcentration = ((_answers$cr_3 = answers.cr_6) === null || _answers$cr_3 === void 0 ? void 0 : _answers$cr_3.score) || answers.cr_6 || 3;\n    if (clientConcentration <= 2) {\n      insights.push({\n        type: 'risk',\n        priority: 'high',\n        message: 'Major client dependency threatens stability',\n        action: 'Urgent business development in similar verticals',\n        impact: 'Reduce existential risk'\n      });\n    }\n\n    // Quick win identification\n    const quickWinServices = Object.entries(serviceScores).filter(([_, score]) => score.aiOpportunity > 75 && score.score > 50).map(([service]) => service);\n    if (quickWinServices.length > 0) {\n      insights.push({\n        type: 'opportunity',\n        priority: 'medium',\n        message: `Quick AI wins available in ${this.getServiceName(quickWinServices[0])}`,\n        action: 'Run 2-week pilot with measurable metrics',\n        impact: 'Build momentum and confidence'\n      });\n    }\n\n    // Sort by priority and return top insights\n    const priorityOrder = {\n      critical: 0,\n      high: 1,\n      medium: 2,\n      low: 3\n    };\n    return insights.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]).slice(0, 6);\n  }\n\n  /**\n   * Calculate detailed risk factors\n   */\n  calculateDetailedRiskFactors(answers, serviceScores, metadata) {\n    var _answers$cr_4, _answers$rc_, _answers$cr_5, _answers$cr_6, _answers$cr_7, _answers$lc_2;\n    const risks = [];\n\n    // Client concentration risk\n    const clientConcentration = ((_answers$cr_4 = answers.cr_6) === null || _answers$cr_4 === void 0 ? void 0 : _answers$cr_4.score) || answers.cr_6 || 3;\n    if (clientConcentration <= 2) {\n      const concentrationLevel = clientConcentration === 1 ? '>50%' : '>30%';\n      risks.push({\n        factor: 'Client Concentration',\n        severity: 'critical',\n        currentState: `Major client represents ${concentrationLevel} of revenue`,\n        impact: '-1.0-1.5x multiple',\n        mitigation: 'Diversify to no client >20% within 12 months',\n        timeframe: '12 months'\n      });\n    }\n\n    // Revenue predictability\n    const revenuePredictability = ((_answers$rc_ = answers.rc_4) === null || _answers$rc_ === void 0 ? void 0 : _answers$rc_.score) || answers.rc_4 || 3;\n    if (revenuePredictability <= 2) {\n      const recurringPct = revenuePredictability === 1 ? '<10%' : '<25%';\n      risks.push({\n        factor: 'Revenue Volatility',\n        severity: 'high',\n        currentState: `Only ${recurringPct} recurring revenue`,\n        impact: '-0.5-1.0x multiple',\n        mitigation: 'Convert project clients to retainers',\n        timeframe: '6 months'\n      });\n    }\n\n    // Key person dependency\n    const keyPerson = ((_answers$cr_5 = answers.cr_4) === null || _answers$cr_5 === void 0 ? void 0 : _answers$cr_5.score) || answers.cr_4 || 3;\n    if (keyPerson <= 2) {\n      risks.push({\n        factor: 'Key Person Risk',\n        severity: 'high',\n        currentState: 'Critical knowledge concentrated in few people',\n        impact: '-0.5x multiple',\n        mitigation: 'Document processes and cross-train team',\n        timeframe: '3 months'\n      });\n    }\n\n    // Service vulnerability  \n    const highVulnerabilityServices = Object.entries(serviceScores).filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low').map(([service, score]) => ({\n      service,\n      revenue: this.estimateServiceRevenue(service, metadata)\n    }));\n    if (highVulnerabilityServices.length > 0) {\n      const atRiskRevenue = highVulnerabilityServices.reduce((sum, s) => sum + s.revenue, 0);\n      risks.push({\n        factor: 'Service Disruption',\n        severity: 'critical',\n        currentState: `${highVulnerabilityServices.length} services highly vulnerable`,\n        impact: '-0.5-1.5x multiple',\n        mitigation: `Transform ${this.getServiceName(highVulnerabilityServices[0].service)} immediately`,\n        timeframe: '6 months',\n        revenueAtRisk: atRiskRevenue\n      });\n    }\n\n    // AI readiness gap\n    const aiReadiness = ((_answers$cr_6 = answers.cr_2) === null || _answers$cr_6 === void 0 ? void 0 : _answers$cr_6.score) || answers.cr_2 || 3;\n    const competitorPressure = ((_answers$cr_7 = answers.cr_3) === null || _answers$cr_7 === void 0 ? void 0 : _answers$cr_7.score) || answers.cr_3 || 3;\n    if (aiReadiness <= 2 && competitorPressure >= 4) {\n      risks.push({\n        factor: 'Competitive Disadvantage',\n        severity: 'high',\n        currentState: 'Competitors advancing while you lag',\n        impact: '-0.5-1.0x multiple',\n        mitigation: 'Accelerated AI adoption program',\n        timeframe: '3 months'\n      });\n    }\n\n    // Leadership misalignment\n    const leadershipScore = ((_answers$lc_2 = answers.lc_1) === null || _answers$lc_2 === void 0 ? void 0 : _answers$lc_2.score) || answers.lc_1 || 3;\n    if (leadershipScore <= 2) {\n      risks.push({\n        factor: 'Leadership Resistance',\n        severity: 'high',\n        currentState: 'Leadership not bought into AI transformation',\n        impact: '-0.3-0.5x multiple',\n        mitigation: 'Executive AI strategy session',\n        timeframe: '1 month'\n      });\n    }\n\n    // Calculate total risk impact\n    const totalImpact = risks.reduce((sum, risk) => {\n      const impactMatch = risk.impact.match(/-?([\\d.]+)/);\n      return sum + (impactMatch ? parseFloat(impactMatch[1]) : 0);\n    }, 0);\n    risks.forEach(risk => {\n      risk.totalRiskContext = `Part of ${totalImpact.toFixed(1)}x total multiple risk`;\n    });\n    return risks;\n  }\n\n  /**\n   * Identify transformation priorities\n   */\n  identifyTransformationPriorities(dimensionScores, serviceScores, riskFactors, agencySize) {\n    const priorities = [];\n\n    // Dimension-based priorities\n    const weakestDimension = Object.entries(dimensionScores).sort((a, b) => a[1] - b[1])[0];\n    if (weakestDimension[1] < 40) {\n      priorities.push({\n        area: weakestDimension[0],\n        urgency: 'critical',\n        focus: this.getDimensionFocus(weakestDimension[0]),\n        impact: `Improve ${weakestDimension[0]} score by 20+ points`,\n        timeframe: '30 days'\n      });\n    }\n\n    // Service transformation priorities\n    const servicesByUrgency = Object.entries(serviceScores).sort((a, b) => b[1].transformationUrgency - a[1].transformationUrgency).slice(0, 3);\n    servicesByUrgency.forEach(([service, score], index) => {\n      priorities.push({\n        area: 'service',\n        service: service,\n        urgency: index === 0 ? 'critical' : 'high',\n        focus: `Transform ${this.getServiceName(service)}`,\n        impact: `Reduce vulnerability by ${score.competitiveGap}%`,\n        timeframe: index === 0 ? '60 days' : '90 days'\n      });\n    });\n\n    // Risk mitigation priorities\n    const criticalRisks = riskFactors.filter(r => r.severity === 'critical');\n    criticalRisks.forEach(risk => {\n      priorities.push({\n        area: 'risk',\n        riskFactor: risk.factor,\n        urgency: 'critical',\n        focus: risk.mitigation,\n        impact: `Protect ${risk.impact} valuation`,\n        timeframe: risk.timeframe\n      });\n    });\n\n    // Size-specific priorities\n    if (agencySize === '1-10') {\n      priorities.push({\n        area: 'agility',\n        urgency: 'high',\n        focus: 'Leverage small size for rapid AI adoption',\n        impact: 'Outmaneuver larger competitors',\n        timeframe: '30 days'\n      });\n    } else if (parseInt(agencySize.split('-')[0]) > 50) {\n      priorities.push({\n        area: 'scale',\n        urgency: 'high',\n        focus: 'Create AI center of excellence',\n        impact: 'Scale AI across all teams',\n        timeframe: '90 days'\n      });\n    }\n\n    // Sort and limit priorities\n    const urgencyOrder = {\n      critical: 0,\n      high: 1,\n      medium: 2,\n      low: 3\n    };\n    return priorities.sort((a, b) => urgencyOrder[a.urgency] - urgencyOrder[b.urgency]).slice(0, 5);\n  }\n\n  /**\n   * Calculate efficiency potential\n   */\n  calculateEfficiencyPotential(serviceScores, selectedServices, agencySize, revenue) {\n    const sizeNum = parseInt(agencySize.split('-')[0]) || 10;\n    const avgSalary = 50000; // Assumed average;\n    const billableHours = 1600; // Per person per year;\n    const hourlyRate = avgSalary / billableHours * 2.5; // With margin;\n\n    let totalTimeSavings = 0;\n    let affectedRevenue = 0;\n    selectedServices.forEach(service => {\n      const score = serviceScores[service];\n      if (score) {\n        // Estimate time savings based on AI opportunity\n        const timeSavingsPct = score.aiOpportunity * 0.7 / 100; // 70% of opportunity;\n        const serviceRevenue = this.estimateServiceRevenue(service, {\n          revenue\n        });\n        const serviceHours = serviceRevenue / hourlyRate;\n        const hoursSaved = serviceHours * timeSavingsPct;\n        totalTimeSavings += hoursSaved;\n        affectedRevenue += serviceRevenue;\n      }\n    });\n    const annualHoursSaved = Math.round(totalTimeSavings);\n    const annualCostSavings = Math.round(annualHoursSaved * (hourlyRate * 0.4)); // Cost portion;\n    const capacityIncrease = Math.round(totalTimeSavings / (sizeNum * billableHours) * 100);\n    return {\n      annualHoursSaved,\n      annualCostSavings,\n      capacityIncrease,\n      revenueOpportunity: Math.round(annualHoursSaved * hourlyRate * 0.6),\n      // New revenue potential\n      headcountEquivalent: (annualHoursSaved / billableHours).toFixed(1),\n      roiMonths: this.calculateROIMonths(annualCostSavings, agencySize),\n      specificSavings: this.calculateSpecificSavings(serviceScores, selectedServices)\n    };\n  }\n\n  /**\n   * Analyze market position\n   */\n  analyzeMarketPosition(overallScore, agencySize, agencyType) {\n    var _this$sizeModifiers$a;\n    const benchmarks = ((_this$sizeModifiers$a = this.sizeModifiers[agencySize]) === null || _this$sizeModifiers$a === void 0 ? void 0 : _this$sizeModifiers$a.benchmarks) || this.sizeModifiers['11-50'].benchmarks;\n    let percentile;\n    if (overallScore >= benchmarks.exceptional) {\n      percentile = 90 + (overallScore - benchmarks.exceptional) / (100 - benchmarks.exceptional) * 10;\n    } else if (overallScore >= benchmarks.high) {\n      percentile = 70 + (overallScore - benchmarks.high) / (benchmarks.exceptional - benchmarks.high) * 20;\n    } else if (overallScore >= benchmarks.average) {\n      percentile = 40 + (overallScore - benchmarks.average) / (benchmarks.high - benchmarks.average) * 30;\n    } else if (overallScore >= benchmarks.low) {\n      percentile = 20 + (overallScore - benchmarks.low) / (benchmarks.average - benchmarks.low) * 20;\n    } else {\n      percentile = overallScore / benchmarks.low * 20;\n    }\n    const position = {\n      percentile: Math.round(percentile),\n      comparison: `You're ahead of ${Math.round(percentile)}% of ${agencySize} agencies`,\n      quartile: this.getQuartile(percentile),\n      trend: this.getMarketTrend(percentile, agencyType),\n      competitiveAdvantage: this.getCompetitiveAdvantage(percentile),\n      marketImplication: this.getMarketImplication(percentile),\n      peerComparison: this.getPeerComparison(overallScore, agencySize, agencyType)\n    };\n    return position;\n  }\n\n  // Helper methods\n  calculateMarketPressure(service, vulnerability) {\n    if (vulnerability >= 80) return 'extreme';\n    if (vulnerability >= 70) return 'high';\n    if (vulnerability >= 60) return 'moderate';\n    if (vulnerability >= 50) return 'emerging';\n    return 'low';\n  }\n  calculateTransformationUrgency(readiness, vulnerability, aiOpportunity) {\n    // High vulnerability + low readiness + high opportunity = maximum urgency\n    const urgencyScore = (vulnerability / 100 * 0.4 + (100 - readiness) / 100 * 0.3 + aiOpportunity / 100 * 0.3) * 100;\n    return Math.round(urgencyScore);\n  }\n  calculateAtRiskRevenue(serviceScores, selectedServices) {\n    let atRisk = 0;\n    selectedServices.forEach(service => {\n      const score = serviceScores[service];\n      if (score && score.vulnerability > 70 && score.readiness === 'low') {\n        // Assume equal revenue distribution for simplicity\n        atRisk += 100 / selectedServices.length * (score.vulnerability / 100);\n      }\n    });\n    return Math.round(atRisk);\n  }\n  estimateServiceRevenue(service, metadata) {\n    // Rough estimation based on typical agency revenue distribution\n    const serviceWeights = {\n      creative_design: 0.25,\n      content_creation: 0.20,\n      digital_marketing: 0.20,\n      media_planning: 0.15,\n      strategy_consulting: 0.10,\n      pr_comms: 0.05,\n      seo_sem: 0.05\n    };\n    const weight = serviceWeights[service] || 0.1;\n    const totalRevenue = metadata.revenue || 1000000; // Default 1M;\n\n    return Math.round(totalRevenue * weight);\n  }\n  getServiceName(serviceId) {\n    const serviceNames = {\n      content_creation: \"Content Creation\",\n      creative_design: \"Creative & Design\",\n      digital_marketing: \"Digital Marketing\",\n      media_planning: \"Media Planning & Buying\",\n      seo_sem: \"SEO/SEM\",\n      pr_comms: \"PR & Communications\",\n      video_production: \"Video Production\",\n      strategy_consulting: \"Strategy & Consulting\",\n      brand_strategy: \"Brand Strategy\"\n    };\n    return serviceNames[serviceId] || serviceId;\n  }\n  getDimensionFocus(dimension) {\n    const focuses = {\n      transformation: \"Build AI capability foundation\",\n      resources: \"Secure budget and time for transformation\",\n      leadership: \"Align leadership on AI vision\",\n      change: \"Develop change management plan\"\n    };\n    return focuses[dimension] || \"Improve capability\";\n  }\n  calculateROIMonths(annualSavings, agencySize) {\n    // Estimate investment needed based on agency size\n    const investmentEstimates = {\n      '1-10': 25000,\n      '11-50': 50000,\n      '51-200': 100000,\n      '200+': 200000\n    };\n    const investment = investmentEstimates[agencySize] || 50000;\n    const monthlyReturn = annualSavings / 12;\n    return Math.ceil(investment / monthlyReturn);\n  }\n  calculateSpecificSavings(serviceScores, selectedServices) {\n    const savings = {};\n    selectedServices.forEach(service => {\n      const score = serviceScores[service];\n      if (score) {\n        savings[service] = {\n          hoursSaved: Math.round(1000 * (score.aiOpportunity / 100)),\n          tasks: this.getAutomatableTasks(service),\n          implementation: this.getImplementationTime(service)\n        };\n      }\n    });\n    return savings;\n  }\n  getAutomatableTasks(service) {\n    const tasks = {\n      content_creation: [\"First drafts\", \"SEO optimization\", \"Content repurposing\"],\n      creative_design: [\"Concept generation\", \"Asset variations\", \"Resizing\"],\n      digital_marketing: [\"Campaign optimization\", \"Audience targeting\", \"A/B testing\"],\n      media_planning: [\"Media mix modeling\", \"Budget allocation\", \"Performance tracking\"],\n      seo_sem: [\"Keyword research\", \"Content optimization\", \"Competitor analysis\"],\n      pr_comms: [\"Media monitoring\", \"Press release drafts\", \"Sentiment analysis\"]\n    };\n    return tasks[service] || [\"Process optimization\", \"Data analysis\", \"Reporting\"];\n  }\n  getImplementationTime(service) {\n    const complexity = {\n      content_creation: \"4-6 weeks\",\n      creative_design: \"6-8 weeks\",\n      digital_marketing: \"8-12 weeks\",\n      media_planning: \"8-12 weeks\",\n      seo_sem: \"4-6 weeks\",\n      pr_comms: \"6-8 weeks\"\n    };\n    return complexity[service] || \"6-8 weeks\";\n  }\n  getQuartile(percentile) {\n    if (percentile >= 75) return \"Top Quartile\";\n    if (percentile >= 50) return \"Second Quartile\";\n    if (percentile >= 25) return \"Third Quartile\";\n    return \"Bottom Quartile\";\n  }\n  getMarketTrend(percentile, agencyType) {\n    const trends = {\n      creative: \"Creative agencies leading AI adoption for concept generation\",\n      digital: \"Digital agencies integrating AI across all channels\",\n      pr: \"PR agencies using AI for media intelligence and content\",\n      integrated: \"Integrated agencies building AI centers of excellence\"\n    };\n    const trend = trends[agencyType] || \"Agencies rapidly adopting AI capabilities\";\n    if (percentile >= 75) {\n      return `Leading the trend: ${trend}`;\n    } else if (percentile >= 50) {\n      return `Keeping pace: ${trend}`;\n    } else {\n      return `Falling behind: ${trend}`;\n    }\n  }\n  getCompetitiveAdvantage(percentile) {\n    if (percentile >= 90) {\n      return \"Significant competitive advantage - win AI-forward clients\";\n    } else if (percentile >= 75) {\n      return \"Strong position - differentiate on AI capabilities\";\n    } else if (percentile >= 50) {\n      return \"Competitive parity - need differentiation\";\n    } else if (percentile >= 25) {\n      return \"Competitive disadvantage - urgent catch-up needed\";\n    }\n    return \"Severe disadvantage - at risk of obsolescence\";\n  }\n  getMarketImplication(percentile) {\n    if (percentile >= 75) {\n      return \"Position as AI transformation leader to command premium\";\n    } else if (percentile >= 50) {\n      return \"Accelerate AI adoption to stay competitive\";\n    } else if (percentile >= 25) {\n      return \"Immediate action required to prevent client loss\";\n    }\n    return \"Consider partnerships or acquisition for survival\";\n  }\n  getPeerComparison(score, agencySize, agencyType) {\n    var _peerAverages$agencyT;\n    // Simulated peer data for comparison\n    const peerAverages = {\n      creative: {\n        '1-10': 45,\n        '11-50': 55,\n        '51-200': 65,\n        '200+': 75\n      },\n      digital: {\n        '1-10': 50,\n        '11-50': 60,\n        '51-200': 70,\n        '200+': 80\n      },\n      pr: {\n        '1-10': 40,\n        '11-50': 50,\n        '51-200': 60,\n        '200+': 70\n      },\n      integrated: {\n        '1-10': 48,\n        '11-50': 58,\n        '51-200': 68,\n        '200+': 78\n      }\n    };\n    const peerAvg = ((_peerAverages$agencyT = peerAverages[agencyType]) === null || _peerAverages$agencyT === void 0 ? void 0 : _peerAverages$agencyT[agencySize]) || 55;\n    const difference = score - peerAvg;\n    return {\n      peerAverage: peerAvg,\n      difference: difference,\n      comparison: difference > 0 ? `${Math.abs(difference)} points ahead of similar agencies` : `${Math.abs(difference)} points behind similar agencies`\n    };\n  }\n  calculateCompletionRate(answers) {\n    const expectedQuestions = 30; // Approximate total;\n    const answered = Object.keys(answers).length;\n    return Math.round(answered / expectedQuestions * 100);\n  }\n}\n\n// Export for use in assessment system\nexport default AgencyTransformationScoring;","map":{"version":3,"names":["AgencyTransformationScoring","constructor","config","transformationWeights","transformation","resources","leadership","change","valuationWeights","financial","operational","strategic","ai","questionWeights","tc","tc_1","tc_2","tc_3","tc_4","tc_5","rc","rc_1","rc_2","rc_3","rc_4","rc_5","lc","lc_1","lc_2","lc_3","lc_4","lc_5","cr","cr_1","cr_2","cr_3","cr_4","cr_5","cr_6","serviceVulnerability","content_creation","seo_sem","digital_marketing","media_planning","creative_design","pr_comms","video_production","strategy_consulting","brand_strategy","sizeModifiers","agility","resource_constraint","benchmarks","low","average","high","exceptional","valuationFactors","recurring_revenue","threshold","impact","current_avg","client_concentration","ai_capability","process_maturity","team_capability","calculateScores","answers","metadata","selectedServices","agencySize","revenue","agencyType","dimensionScores","calculateWeightedDimensionScores","valuationDimensions","calculateValuationDimensions","serviceScores","calculateServiceScores","vulnerabilityMetrics","calculateVulnerabilityMetrics","transformationScore","calculateTransformationScore","valuationScore","calculateValuationScore","overallScore","calculateOverallScore","readinessCategory","getReadinessCategory","valuationCategory","getValuationCategory","insights","extractActionableInsights","riskFactors","calculateDetailedRiskFactors","priorities","identifyTransformationPriorities","efficiencyPotential","calculateEfficiencyPotential","marketPosition","analyzeMarketPosition","overall","Math","round","valuation","dimensions","categories","readiness","questionCount","Object","keys","length","completionRate","calculateCompletionRate","timestamp","Date","toISOString","scores","weights","entries","forEach","questionId","answer","score","dimension","weight","startsWith","push","data","weightedSum","reduce","sum","i","totalWeight","w","_answers$lc_","_answers$cr_","_answers$tc_","_answers$cr_2","valuationDims","financialFactors","question","financialSum","financialWeight","factor","_answers$factor$quest","operationalFactors","operationalSum","operationalWeight","_answers$factor$quest2","service","serviceQuestions","filter","includes","substring","map","_","avgScore","a","b","normalizedScore","aiOpportunityQuestion","aiOpportunity","vulnerability","competitiveGap","adaptability","marketPressure","calculateMarketPressure","transformationUrgency","calculateTransformationUrgency","highest","criticalServices","totalVulnerability","maxVulnerability","criticalCount","atriskRevenue","calculateAtRiskRevenue","undefined","baseScore","sizeModifier","max","min","_answers$cr_3","type","priority","message","action","getServiceName","clientConcentration","quickWinServices","priorityOrder","critical","medium","sort","slice","_answers$cr_4","_answers$rc_","_answers$cr_5","_answers$cr_6","_answers$cr_7","_answers$lc_2","risks","concentrationLevel","severity","currentState","mitigation","timeframe","revenuePredictability","recurringPct","keyPerson","highVulnerabilityServices","estimateServiceRevenue","atRiskRevenue","s","revenueAtRisk","aiReadiness","competitorPressure","leadershipScore","totalImpact","risk","impactMatch","match","parseFloat","totalRiskContext","toFixed","weakestDimension","area","urgency","focus","getDimensionFocus","servicesByUrgency","index","criticalRisks","r","riskFactor","parseInt","split","urgencyOrder","sizeNum","avgSalary","billableHours","hourlyRate","totalTimeSavings","affectedRevenue","timeSavingsPct","serviceRevenue","serviceHours","hoursSaved","annualHoursSaved","annualCostSavings","capacityIncrease","revenueOpportunity","headcountEquivalent","roiMonths","calculateROIMonths","specificSavings","calculateSpecificSavings","_this$sizeModifiers$a","percentile","position","comparison","quartile","getQuartile","trend","getMarketTrend","competitiveAdvantage","getCompetitiveAdvantage","marketImplication","getMarketImplication","peerComparison","getPeerComparison","urgencyScore","atRisk","serviceWeights","totalRevenue","serviceId","serviceNames","focuses","annualSavings","investmentEstimates","investment","monthlyReturn","ceil","savings","tasks","getAutomatableTasks","implementation","getImplementationTime","complexity","trends","creative","digital","pr","integrated","_peerAverages$agencyT","peerAverages","peerAvg","difference","peerAverage","abs","expectedQuestions","answered"],"sources":["/Users/jon/Documents/GitHub/assessor/src/assessments/agency-vulnerability/scoring.js"],"sourcesContent":["/**\n * Agency Transformation Scoring Engine - Enhanced Version\n * \n * Calculates both transformation readiness and valuation metrics\n * with sophisticated weighting and market benchmarking\n */\n\nexport class AgencyTransformationScoring {\n    constructor(config = {}) {\n      this.config = config;\n      \n      // Dimension weights for transformation score\n      this.transformationWeights = {\n        transformation: 0.25,\n        resources: 0.20,\n        leadership: 0.20,\n        change: 0.35\n      };\n      \n      // Valuation dimension weights\n      this.valuationWeights = {\n        financial: 0.35,\n        operational: 0.30,\n        strategic: 0.20,\n        ai: 0.15\n      };\n      \n      // Question weights by importance\n      this.questionWeights = {\n        tc: { // Transformation capability\n          tc_1: 1.5,  // Current AI usage (critical)\n          tc_2: 1.2,  // Process improvement\n          tc_3: 1.0,  // Experimentation\n          tc_4: 1.3,  // Integration capability\n          tc_5: 1.4   // Strategic planning\n        },\n        rc: { // Resource capability\n          rc_1: 1.3,  // Budget availability\n          rc_2: 1.1,  // Tool investment\n          rc_3: 1.0,  // Training time\n          rc_4: 1.4,  // Revenue predictability\n          rc_5: 1.2   // Resource allocation\n        },\n        lc: { // Leadership commitment\n          lc_1: 1.5,  // Leadership vision (critical)\n          lc_2: 1.2,  // Decision making\n          lc_3: 1.3,  // Strategic alignment\n          lc_4: 1.1,  // Risk tolerance\n          lc_5: 1.4   // Innovation culture\n        },\n        cr: { // Change readiness\n          cr_1: 1.2,  // Past transformations\n          cr_2: 1.4,  // AI understanding\n          cr_3: 1.3,  // Client readiness  \n          cr_4: 1.1,  // Knowledge management\n          cr_5: 1.0,  // Team structure\n          cr_6: 1.5   // Client concentration\n        }\n      };\n      \n      // Service vulnerability baseline scores\n      this.serviceVulnerability = {\n        content_creation: 85,\n        seo_sem: 80,\n        digital_marketing: 75,\n        media_planning: 70,\n        creative_design: 65,\n        pr_comms: 60,\n        video_production: 55,\n        strategy_consulting: 35,\n        brand_strategy: 30\n      };\n      \n      // Agency size modifiers\n      this.sizeModifiers = {\n        '1-10': {\n          agility: 1.2,\n          resource_constraint: 0.8,\n          benchmarks: {\n            low: 25,\n            average: 40,\n            high: 65,\n            exceptional: 80\n          }\n        },\n        '11-50': {\n          agility: 1.0,\n          resource_constraint: 1.0,\n          benchmarks: {\n            low: 30,\n            average: 50,\n            high: 70,\n            exceptional: 85\n          }\n        },\n        '51-200': {\n          agility: 0.8,\n          resource_constraint: 1.2,\n          benchmarks: {\n            low: 35,\n            average: 55,\n            high: 75,\n            exceptional: 90\n          }\n        },\n        '200+': {\n          agility: 0.6,\n          resource_constraint: 1.3,\n          benchmarks: {\n            low: 40,\n            average: 60,\n            high: 80,\n            exceptional: 95\n          }\n        }\n      };\n      \n      // Valuation impact factors\n      this.valuationFactors = {\n        recurring_revenue: {\n          threshold: 40, // % of revenue\n          impact: 0.5,   // Multiple increase\n          current_avg: 25\n        },\n        client_concentration: {\n          threshold: 20, // Max % per client\n          impact: 0.5,\n          current_avg: 35\n        },\n        ai_capability: {\n          threshold: 70, // Readiness score\n          impact: 1.5,\n          current_avg: 30\n        },\n        process_maturity: {\n          threshold: 60,\n          impact: 0.3,\n          current_avg: 40\n        },\n        team_capability: {\n          threshold: 65,\n          impact: 0.7,\n          current_avg: 35\n        }\n      }\n    }\n  \n    /**\n     * Main scoring method - enhanced version\n     */\n    calculateScores(answers, metadata) {\n      const { selectedServices = [], agencySize, revenue, agencyType } = metadata;\n      \n      // Calculate weighted dimension scores\n      const dimensionScores = this.calculateWeightedDimensionScores(answers);\n      \n      // Map to valuation dimensions with context\n      const valuationDimensions = this.calculateValuationDimensions(answers, dimensionScores, metadata);\n      \n      // Calculate service-specific scores with competitive analysis\n      const serviceScores = this.calculateServiceScores(answers, selectedServices);\n      \n      // Calculate aggregate vulnerability metrics\n      const vulnerabilityMetrics = this.calculateVulnerabilityMetrics(serviceScores, selectedServices);\n      \n      // Calculate transformation readiness with size adjustments\n      const transformationScore = this.calculateTransformationScore(dimensionScores, agencySize);\n      \n      // Calculate valuation score with market context\n      const valuationScore = this.calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores);\n      \n      // Calculate overall score with strategic weighting\n      const overallScore = this.calculateOverallScore(transformationScore, valuationScore);\n      \n      // Determine categories with benchmarking\n      const readinessCategory = this.getReadinessCategory(transformationScore, agencySize);\n      const valuationCategory = this.getValuationCategory(valuationScore);\n      \n      // Extract actionable insights\n      const insights = this.extractActionableInsights(\n        dimensionScores, \n        valuationDimensions, \n        serviceScores, \n        answers,\n        metadata\n      );\n      \n      // Calculate specific risk factors with severity\n      const riskFactors = this.calculateDetailedRiskFactors(answers, serviceScores, metadata);\n      \n      // Identify transformation priorities\n      const priorities = this.identifyTransformationPriorities(\n        dimensionScores,\n        serviceScores,\n        riskFactors,\n        agencySize\n      );\n      \n      // Calculate savings and efficiency potential\n      const efficiencyPotential = this.calculateEfficiencyPotential(\n        serviceScores,\n        selectedServices,\n        agencySize,\n        revenue\n      );\n      \n      // Market positioning analysis\n      const marketPosition = this.analyzeMarketPosition(overallScore, agencySize, agencyType);\n      \n      return {\n        overall: Math.round(overallScore),\n        transformation: Math.round(transformationScore),\n        valuation: Math.round(valuationScore),\n        \n        dimensions: {\n          transformation: Math.round(dimensionScores.transformation),\n          resources: Math.round(dimensionScores.resources),\n          leadership: Math.round(dimensionScores.leadership),\n          change: Math.round(dimensionScores.change)\n        },\n        \n        valuationDimensions: {\n          financial: Math.round(valuationDimensions.financial),\n          operational: Math.round(valuationDimensions.operational),\n          strategic: Math.round(valuationDimensions.strategic),\n          ai: Math.round(valuationDimensions.ai)\n        },\n        \n        serviceScores: serviceScores,\n        vulnerabilityMetrics: vulnerabilityMetrics,\n        \n        categories: {\n          readiness: readinessCategory,\n          valuation: valuationCategory\n        },\n        \n        riskFactors: riskFactors,\n        insights: insights,\n        priorities: priorities,\n        efficiencyPotential: efficiencyPotential,\n        marketPosition: marketPosition,\n        \n        metadata: {\n          agencySize,\n          revenue,\n          agencyType,\n          selectedServices,\n          questionCount: Object.keys(answers).length,\n          completionRate: this.calculateCompletionRate(answers),\n          timestamp: new Date().toISOString()\n        }\n      }\n    }\n  \n    /**\n     * Calculate weighted dimension scores\n     */\n    calculateWeightedDimensionScores(answers) {\n      const dimensions = {\n        transformation: { scores: [], weights: [] },\n        resources: { scores: [], weights: [] },\n        leadership: { scores: [], weights: [] },\n        change: { scores: [], weights: [] }\n      };\n      \n      // Process answers with weights\n      Object.entries(answers).forEach(([questionId, answer]) => {\n        const score = typeof answer === 'object' ? (answer.score || 0) : answer;\n        let dimension, weight;\n        \n        // Determine dimension and weight\n        if (questionId.startsWith('tc_')) {\n          dimension = 'transformation';\n          weight = this.questionWeights.tc[questionId] || 1.0\n        } else if (questionId.startsWith('rc_')) {\n          dimension = 'resources';\n          weight = this.questionWeights.rc[questionId] || 1.0\n        } else if (questionId.startsWith('lc_')) {\n          dimension = 'leadership';\n          weight = this.questionWeights.lc[questionId] || 1.0\n        } else if (questionId.startsWith('cr_')) {\n          dimension = 'change';\n          weight = this.questionWeights.cr[questionId] || 1.0\n        }\n        \n        if (dimension) {\n          dimensions[dimension].scores.push(score);\n          dimensions[dimension].weights.push(weight)\n        }\n      });\n      \n      // Calculate weighted averages\n      const dimensionScores = {};\n      Object.entries(dimensions).forEach(([dimension, data]) => {\n        if (data.scores.length > 0) {\n          const weightedSum = data.scores.reduce((sum, score, i) => \n            sum + (score * data.weights[i]), 0\n          );\n          const totalWeight = data.weights.reduce((sum, w) => sum + w, 0);\n          dimensionScores[dimension] = ((weightedSum / totalWeight - 1) / 4) * 100\n        } else {\n          dimensionScores[dimension] = 50;\n        }\n      });\n      \n      return dimensionScores;\n    }\n  \n    /**\n     * Calculate valuation dimensions with enhanced mapping\n     */\n    calculateValuationDimensions(answers, dimensionScores, metadata) {\n      const valuationDims = {\n        financial: 0,\n        operational: 0,\n        strategic: 0,\n        ai: 0\n      };\n      \n      // Financial health - weighted calculation\n      const financialFactors = [\n        { question: 'rc_1', weight: 1.5 }, // Budget flexibility\n        { question: 'rc_4', weight: 2.0 }, // Revenue predictability\n        { question: 'rc_5', weight: 1.2 }, // Resource allocation\n        { question: 'cr_6', weight: 1.8 }  // Client concentration\n      ];\n      \n      let financialSum = 0, financialWeight = 0;\n      financialFactors.forEach(factor => {\n        const score = answers[factor.question]?.score || answers[factor.question] || 3;\n        financialSum += score * factor.weight;\n        financialWeight += factor.weight\n      });\n      \n      valuationDims.financial = ((financialSum / financialWeight - 1) / 4) * 100;\n      \n      // Operational excellence - process and efficiency\n      const operationalFactors = [\n        { question: 'tc_2', weight: 1.3 },  // Process improvement\n        { question: 'tc_4', weight: 1.5 },  // Integration capability\n        { question: 'rc_2', weight: 1.0 },  // Tool investment\n        { question: 'cr_1', weight: 1.2 },  // Past transformations\n        { question: 'cr_4', weight: 1.4 }   // Knowledge management\n      ];\n      \n      let operationalSum = 0, operationalWeight = 0;\n      operationalFactors.forEach(factor => {\n        const score = answers[factor.question]?.score || answers[factor.question] || 3;\n        operationalSum += score * factor.weight;\n        operationalWeight += factor.weight\n      });\n      \n      valuationDims.operational = ((operationalSum / operationalWeight - 1) / 4) * 100;\n      \n      // Strategic position\n      valuationDims.strategic = (\n        dimensionScores.leadership * 0.5 +\n        ((answers.lc_3?.score || answers.lc_3 || 3) - 1) * 25 * 0.3 +\n        ((answers.cr_3?.score || answers.cr_3 || 3) - 1) * 25 * 0.2\n      );\n      \n      // AI capability\n      valuationDims.ai = (\n        dimensionScores.transformation * 0.6 +\n        ((answers.tc_1?.score || answers.tc_1 || 3) - 1) * 25 * 0.2 +\n        ((answers.cr_2?.score || answers.cr_2 || 3) - 1) * 25 * 0.2\n      );\n      \n      return valuationDims;\n    }\n  \n    /**\n     * Calculate service scores with competitive benchmarking\n     */\n    calculateServiceScores(answers, selectedServices) {\n      const serviceScores = {};\n      \n      selectedServices.forEach(service => {\n        const serviceQuestions = Object.entries(answers)\n          .filter(([questionId]) => questionId.includes(service.substring(0, 4)))\n          .map(([_, answer]) => typeof answer === 'object' ? answer.score : answer);\n        \n        if (serviceQuestions.length > 0) {\n          const avgScore = serviceQuestions.reduce((a, b) => a + b, 0) / serviceQuestions.length;\n          const normalizedScore = ((avgScore - 1) / 4) * 100;\n          \n          // Get AI opportunity score\n          const aiOpportunityQuestion = answers[`${service.substring(0, 7)}_5`];\n          const aiOpportunity = aiOpportunityQuestion ? \n            ((aiOpportunityQuestion.score || aiOpportunityQuestion || 3) - 1) * 25 : 50;\n          \n          // Calculate competitive position\n          const vulnerability = this.serviceVulnerability[service] || 50;\n          const competitiveGap = vulnerability - normalizedScore;\n          \n          serviceScores[service] = {\n            score: Math.round(normalizedScore),\n            vulnerability: vulnerability,\n            adaptability: Math.round(100 - vulnerability + (normalizedScore * 0.3)),\n            aiOpportunity: Math.round(aiOpportunity),\n            competitiveGap: Math.round(competitiveGap),\n            marketPressure: this.calculateMarketPressure(service, vulnerability),\n            transformationUrgency: this.calculateTransformationUrgency(\n              normalizedScore, \n              vulnerability, \n              aiOpportunity\n            ),\n            readiness: normalizedScore > 60 ? 'high' : normalizedScore > 40 ? 'medium' : 'low'\n          }\n        }\n      });\n      \n      return serviceScores;\n    }\n  \n    /**\n     * Calculate vulnerability metrics\n     */\n    calculateVulnerabilityMetrics(serviceScores, selectedServices) {\n      if (selectedServices.length === 0) {\n        return {\n          overall: 50,\n          highest: 50,\n          average: 50,\n          criticalServices: 0\n        }\n      }\n      \n      let totalVulnerability = 0;\n      let maxVulnerability = 0;\n      let criticalCount = 0;\n      let weights = [];\n      \n      selectedServices.forEach(service => {\n        const score = serviceScores[service];\n        if (score) {\n          // Weight by readiness (lower readiness = higher weight)\n          const weight = score.readiness === 'low' ? 1.5 : (score.readiness === 'medium' ? 1.0 : 0.7);\n          \n          totalVulnerability += score.vulnerability * weight;\n          weights.push(weight);\n          \n          if (score.vulnerability > maxVulnerability) {\n            maxVulnerability = score.vulnerability\n          }\n          \n          if (score.vulnerability > 75 && score.readiness === 'low') {\n            criticalCount++\n          }\n        }\n      });\n      \n      const totalWeight = weights.reduce((a, b) => a + b, 0);\n      \n      return {\n        overall: Math.round(totalVulnerability / totalWeight),\n        highest: maxVulnerability,\n        average: Math.round(totalVulnerability / totalWeight),\n        criticalServices: criticalCount,\n        atriskRevenue: this.calculateAtRiskRevenue(serviceScores, selectedServices)\n      }\n    }\n  \n    /**\n     * Calculate transformation score with size adjustments\n     */\n    calculateTransformationScore(dimensionScores, agencySize) {\n      let weightedSum = 0;\n      let totalWeight = 0;\n      \n      Object.entries(this.transformationWeights).forEach(([dimension, weight]) => {\n        if (dimensionScores[dimension] !== undefined) {\n          weightedSum += dimensionScores[dimension] * weight;\n          totalWeight += weight\n        }\n      });\n      \n      let baseScore = totalWeight > 0 ? weightedSum / totalWeight : 50;\n      \n      // Apply size modifiers\n      const sizeModifier = this.sizeModifiers[agencySize] || this.sizeModifiers['11-50'];\n      \n      // Agility bonus for smaller agencies\n      if (agencySize === '1-10' && baseScore > 40) {\n        baseScore *= sizeModifier.agility\n      }\n      \n      // Resource constraint penalty\n      if (dimensionScores.resources < 40) {\n        baseScore *= sizeModifier.resource_constraint\n      }\n      \n      return Math.max(0, Math.min(100, baseScore));\n    }\n  \n    /**\n     * Calculate valuation score with market context\n     */\n    calculateValuationScore(valuationDimensions, vulnerabilityMetrics, dimensionScores) {\n      const insights = [];\n      \n      // Transformation insights\n      if (dimensionScores.transformation > 70) {\n        insights.push({\n          type: 'strength',\n          priority: 'high',\n          message: 'Your AI foundation positions you in the top 20% of agencies',\n          action: 'Leverage this advantage to win AI-forward clients',\n          impact: 'Revenue growth opportunity'\n        })\n      } else if (dimensionScores.transformation < 40) {\n        insights.push({\n          type: 'risk',\n          priority: 'critical',\n          message: 'Limited AI adoption creates immediate competitive disadvantage',\n          action: 'Start with team-wide AI literacy program this week',\n          impact: 'Prevent client loss'\n        })\n      }\n      \n      // Resource insights\n      if (dimensionScores.resources > 60 && dimensionScores.transformation < 50) {\n        insights.push({\n          type: 'opportunity',\n          priority: 'high',\n          message: 'You have resources but lack AI direction',\n          action: 'Invest in strategic AI roadmap development',\n          impact: 'Accelerate transformation by 6 months'\n        })\n      }\n      \n      // Leadership insights\n      if (dimensionScores.leadership > 70) {\n        insights.push({\n          type: 'strength',\n          priority: 'medium',\n          message: 'Leadership alignment is your transformation superpower',\n          action: 'Empower leaders as AI champions',\n          impact: '3x faster adoption'\n        })\n      } else if (dimensionScores.leadership < 40) {\n        insights.push({\n          type: 'blocker',\n          priority: 'critical',\n          message: 'Leadership skepticism will sabotage AI initiatives',\n          action: 'Executive AI immersion session urgently needed',\n          impact: 'Unblock transformation'\n        })\n      }\n      \n      // Service vulnerability insights\n      const criticalServices = Object.entries(serviceScores)\n        .filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low')\n        .map(([service]) => service);\n      \n      if (criticalServices.length > 0) {\n        insights.push({\n          type: 'threat',\n          priority: 'critical',\n          message: `${criticalServices.length} core services face immediate AI disruption`,\n          action: `Transform ${this.getServiceName(criticalServices[0])} first`,\n          impact: 'Protect revenue base'\n        })\n      }\n      \n      // Valuation insights\n      if (valuationDimensions.financial < 40 && valuationDimensions.ai > 60) {\n        insights.push({\n          type: 'opportunity',\n          priority: 'high',\n          message: 'Strong AI capability hindered by weak financials',\n          action: 'Focus on recurring revenue and client diversification',\n          impact: '+1-2x valuation multiple'\n        })\n      }\n      \n      // Client concentration insight\n      const clientConcentration = answers.cr_6?.score || answers.cr_6 || 3;\n      if (clientConcentration <= 2) {\n        insights.push({\n          type: 'risk',\n          priority: 'high',\n          message: 'Major client dependency threatens stability',\n          action: 'Urgent business development in similar verticals',\n          impact: 'Reduce existential risk'\n        })\n      }\n      \n      // Quick win identification\n      const quickWinServices = Object.entries(serviceScores)\n        .filter(([_, score]) => score.aiOpportunity > 75 && score.score > 50)\n        .map(([service]) => service);\n      \n      if (quickWinServices.length > 0) {\n        insights.push({\n          type: 'opportunity',\n          priority: 'medium',\n          message: `Quick AI wins available in ${this.getServiceName(quickWinServices[0])}`,\n          action: 'Run 2-week pilot with measurable metrics',\n          impact: 'Build momentum and confidence'\n        })\n      }\n      \n      // Sort by priority and return top insights\n      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      return insights\n        .sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority])\n        .slice(0, 6)\n    }\n  \n    /**\n     * Calculate detailed risk factors\n     */\n    calculateDetailedRiskFactors(answers, serviceScores, metadata) {\n      const risks = [];\n      \n      // Client concentration risk\n      const clientConcentration = answers.cr_6?.score || answers.cr_6 || 3;\n      if (clientConcentration <= 2) {\n        const concentrationLevel = clientConcentration === 1 ? '>50%' : '>30%';\n        risks.push({\n          factor: 'Client Concentration',\n          severity: 'critical',\n          currentState: `Major client represents ${concentrationLevel} of revenue`,\n          impact: '-1.0-1.5x multiple',\n          mitigation: 'Diversify to no client >20% within 12 months',\n          timeframe: '12 months'\n        })\n      }\n      \n      // Revenue predictability\n      const revenuePredictability = answers.rc_4?.score || answers.rc_4 || 3;\n      if (revenuePredictability <= 2) {\n        const recurringPct = revenuePredictability === 1 ? '<10%' : '<25%';\n        risks.push({\n          factor: 'Revenue Volatility',\n          severity: 'high',\n          currentState: `Only ${recurringPct} recurring revenue`,\n          impact: '-0.5-1.0x multiple',\n          mitigation: 'Convert project clients to retainers',\n          timeframe: '6 months'\n        })\n      }\n      \n      // Key person dependency\n      const keyPerson = answers.cr_4?.score || answers.cr_4 || 3;\n      if (keyPerson <= 2) {\n        risks.push({\n          factor: 'Key Person Risk',\n          severity: 'high',\n          currentState: 'Critical knowledge concentrated in few people',\n          impact: '-0.5x multiple',\n          mitigation: 'Document processes and cross-train team',\n          timeframe: '3 months'\n        })\n      }\n      \n      // Service vulnerability  \n      const highVulnerabilityServices = Object.entries(serviceScores)\n        .filter(([_, score]) => score.vulnerability > 75 && score.readiness === 'low')\n        .map(([service, score]) => ({\n          service,\n          revenue: this.estimateServiceRevenue(service, metadata)\n        }));\n      \n      if (highVulnerabilityServices.length > 0) {\n        const atRiskRevenue = highVulnerabilityServices\n          .reduce((sum, s) => sum + s.revenue, 0);\n        \n        risks.push({\n          factor: 'Service Disruption',\n          severity: 'critical',\n          currentState: `${highVulnerabilityServices.length} services highly vulnerable`,\n          impact: '-0.5-1.5x multiple',\n          mitigation: `Transform ${this.getServiceName(highVulnerabilityServices[0].service)} immediately`,\n          timeframe: '6 months',\n          revenueAtRisk: atRiskRevenue\n        })\n      }\n      \n      // AI readiness gap\n      const aiReadiness = answers.cr_2?.score || answers.cr_2 || 3;\n      const competitorPressure = answers.cr_3?.score || answers.cr_3 || 3;\n      \n      if (aiReadiness <= 2 && competitorPressure >= 4) {\n        risks.push({\n          factor: 'Competitive Disadvantage',\n          severity: 'high',\n          currentState: 'Competitors advancing while you lag',\n          impact: '-0.5-1.0x multiple',\n          mitigation: 'Accelerated AI adoption program',\n          timeframe: '3 months'\n        })\n      }\n      \n      // Leadership misalignment\n      const leadershipScore = (answers.lc_1?.score || answers.lc_1 || 3);\n      if (leadershipScore <= 2) {\n        risks.push({\n          factor: 'Leadership Resistance',\n          severity: 'high',\n          currentState: 'Leadership not bought into AI transformation',\n          impact: '-0.3-0.5x multiple',\n          mitigation: 'Executive AI strategy session',\n          timeframe: '1 month'\n        })\n      }\n      \n      // Calculate total risk impact\n      const totalImpact = risks.reduce((sum, risk) => {\n        const impactMatch = risk.impact.match(/-?([\\d.]+)/);\n        return sum + (impactMatch ? parseFloat(impactMatch[1]) : 0);\n      }, 0);\n      \n      risks.forEach(risk => {\n        risk.totalRiskContext = `Part of ${totalImpact.toFixed(1)}x total multiple risk`;\n      });\n      \n      return risks;\n    }\n  \n    /**\n     * Identify transformation priorities\n     */\n    identifyTransformationPriorities(dimensionScores, serviceScores, riskFactors, agencySize) {\n      const priorities = [];\n      \n      // Dimension-based priorities\n      const weakestDimension = Object.entries(dimensionScores)\n        .sort((a, b) => a[1] - b[1])[0];\n      \n      if (weakestDimension[1] < 40) {\n        priorities.push({\n          area: weakestDimension[0],\n          urgency: 'critical',\n          focus: this.getDimensionFocus(weakestDimension[0]),\n          impact: `Improve ${weakestDimension[0]} score by 20+ points`,\n          timeframe: '30 days'\n        })\n      }\n      \n      // Service transformation priorities\n      const servicesByUrgency = Object.entries(serviceScores)\n        .sort((a, b) => b[1].transformationUrgency - a[1].transformationUrgency)\n        .slice(0, 3);\n      \n      servicesByUrgency.forEach(([service, score], index) => {\n        priorities.push({\n          area: 'service',\n          service: service,\n          urgency: index === 0 ? 'critical' : 'high',\n          focus: `Transform ${this.getServiceName(service)}`,\n          impact: `Reduce vulnerability by ${score.competitiveGap}%`,\n          timeframe: index === 0 ? '60 days' : '90 days'\n        })\n      });\n      \n      // Risk mitigation priorities\n      const criticalRisks = riskFactors.filter(r => r.severity === 'critical');\n      criticalRisks.forEach(risk => {\n        priorities.push({\n          area: 'risk',\n          riskFactor: risk.factor,\n          urgency: 'critical',\n          focus: risk.mitigation,\n          impact: `Protect ${risk.impact} valuation`,\n          timeframe: risk.timeframe\n        })\n      });\n      \n      // Size-specific priorities\n      if (agencySize === '1-10') {\n        priorities.push({\n          area: 'agility',\n          urgency: 'high',\n          focus: 'Leverage small size for rapid AI adoption',\n          impact: 'Outmaneuver larger competitors',\n          timeframe: '30 days'\n        })\n      } else if (parseInt(agencySize.split('-')[0]) > 50) {\n        priorities.push({\n          area: 'scale',\n          urgency: 'high',\n          focus: 'Create AI center of excellence',\n          impact: 'Scale AI across all teams',\n          timeframe: '90 days'\n        })\n      }\n      \n      // Sort and limit priorities\n      const urgencyOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      return priorities\n        .sort((a, b) => urgencyOrder[a.urgency] - urgencyOrder[b.urgency])\n        .slice(0, 5);\n    }\n  \n    /**\n     * Calculate efficiency potential\n     */\n    calculateEfficiencyPotential(serviceScores, selectedServices, agencySize, revenue) {\n      const sizeNum = parseInt(agencySize.split('-')[0]) || 10;\n      const avgSalary = 50000; // Assumed average;\n      const billableHours = 1600; // Per person per year;\n      const hourlyRate = avgSalary / billableHours * 2.5; // With margin;\n      \n      let totalTimeSavings = 0;\n      let affectedRevenue = 0;\n      \n      selectedServices.forEach(service => {\n        const score = serviceScores[service];\n        if (score) {\n          // Estimate time savings based on AI opportunity\n          const timeSavingsPct = score.aiOpportunity * 0.7 / 100; // 70% of opportunity;\n          const serviceRevenue = this.estimateServiceRevenue(service, { revenue });\n          const serviceHours = serviceRevenue / hourlyRate;\n          const hoursSaved = serviceHours * timeSavingsPct;\n          \n          totalTimeSavings += hoursSaved;\n          affectedRevenue += serviceRevenue\n        }\n      });\n      \n      const annualHoursSaved = Math.round(totalTimeSavings);\n      const annualCostSavings = Math.round(annualHoursSaved * (hourlyRate * 0.4)); // Cost portion;\n      const capacityIncrease = Math.round((totalTimeSavings / (sizeNum * billableHours)) * 100);\n      \n      return {\n        annualHoursSaved,\n        annualCostSavings,\n        capacityIncrease,\n        revenueOpportunity: Math.round(annualHoursSaved * hourlyRate * 0.6), // New revenue potential\n        headcountEquivalent: (annualHoursSaved / billableHours).toFixed(1),\n        roiMonths: this.calculateROIMonths(annualCostSavings, agencySize),\n        specificSavings: this.calculateSpecificSavings(serviceScores, selectedServices)\n      };\n    }\n  \n    /**\n     * Analyze market position\n     */\n    analyzeMarketPosition(overallScore, agencySize, agencyType) {\n      const benchmarks = this.sizeModifiers[agencySize]?.benchmarks || \n                        this.sizeModifiers['11-50'].benchmarks;\n      \n      let percentile;\n      if (overallScore >= benchmarks.exceptional) {\n        percentile = 90 + (overallScore - benchmarks.exceptional) / \n                     (100 - benchmarks.exceptional) * 10\n                    } else if (overallScore >= benchmarks.high) {\n                        percentile = 70 + (overallScore - benchmarks.high) / \n                                     (benchmarks.exceptional - benchmarks.high) * 20\n                      } else if (overallScore >= benchmarks.average) {\n                        percentile = 40 + (overallScore - benchmarks.average) / \n                                     (benchmarks.high - benchmarks.average) * 30\n                      } else if (overallScore >= benchmarks.low) {\n                        percentile = 20 + (overallScore - benchmarks.low) / \n                                     (benchmarks.average - benchmarks.low) * 20\n                      } else {\n                        percentile = overallScore / benchmarks.low * 20\n                      }\n                      \n                      const position = {\n                        percentile: Math.round(percentile),\n                        comparison: `You're ahead of ${Math.round(percentile)}% of ${agencySize} agencies`,\n                        quartile: this.getQuartile(percentile),\n                        trend: this.getMarketTrend(percentile, agencyType),\n                        competitiveAdvantage: this.getCompetitiveAdvantage(percentile),\n                        marketImplication: this.getMarketImplication(percentile),\n                        peerComparison: this.getPeerComparison(overallScore, agencySize, agencyType)\n                      };\n                      \n                      return position;\n                    }\n                  \n                    // Helper methods\n                    calculateMarketPressure(service, vulnerability) {\n                      if (vulnerability >= 80) return 'extreme';\n                      if (vulnerability >= 70) return 'high';\n                      if (vulnerability >= 60) return 'moderate';\n                      if (vulnerability >= 50) return 'emerging';\n                      return 'low';\n                    }\n                    ;\n                    calculateTransformationUrgency(readiness, vulnerability, aiOpportunity) {\n                      // High vulnerability + low readiness + high opportunity = maximum urgency\n                      const urgencyScore = (\n                        (vulnerability / 100) * 0.4 +\n                        ((100 - readiness) / 100) * 0.3 +\n                        (aiOpportunity / 100) * 0.3\n                      ) * 100;\n                      \n                      return Math.round(urgencyScore);\n                    }\n                    ;\n                    calculateAtRiskRevenue(serviceScores, selectedServices) {\n                      let atRisk = 0;\n                      \n                      selectedServices.forEach(service => {\n                        const score = serviceScores[service];\n                        if (score && score.vulnerability > 70 && score.readiness === 'low') {\n                          // Assume equal revenue distribution for simplicity\n                          atRisk += (100 / selectedServices.length) * (score.vulnerability / 100)\n                        }\n                      });\n                      \n                      return Math.round(atRisk);\n                    }\n                    ;\n                    estimateServiceRevenue(service, metadata) {\n                      // Rough estimation based on typical agency revenue distribution\n                      const serviceWeights = {\n                        creative_design: 0.25,\n                        content_creation: 0.20,\n                        digital_marketing: 0.20,\n                        media_planning: 0.15,\n                        strategy_consulting: 0.10,\n                        pr_comms: 0.05,\n                        seo_sem: 0.05\n                      };\n                      \n                      const weight = serviceWeights[service] || 0.1;\n                      const totalRevenue = metadata.revenue || 1000000; // Default 1M;\n                      \n                      return Math.round(totalRevenue * weight);\n                    }\n                    ;\n                    getServiceName(serviceId) {\n                      const serviceNames = {\n                        content_creation: \"Content Creation\",\n                        creative_design: \"Creative & Design\",\n                        digital_marketing: \"Digital Marketing\",\n                        media_planning: \"Media Planning & Buying\",\n                        seo_sem: \"SEO/SEM\",\n                        pr_comms: \"PR & Communications\",\n                        video_production: \"Video Production\",\n                        strategy_consulting: \"Strategy & Consulting\",\n                        brand_strategy: \"Brand Strategy\"\n                      };\n                      return serviceNames[serviceId] || serviceId;\n                    }\n                    \n                    getDimensionFocus(dimension) {\n                      const focuses = {\n                        transformation: \"Build AI capability foundation\",\n                        resources: \"Secure budget and time for transformation\",\n                        leadership: \"Align leadership on AI vision\",\n                        change: \"Develop change management plan\"\n                      };\n                      return focuses[dimension] || \"Improve capability\";\n                    }\n                    ;\n                    calculateROIMonths(annualSavings, agencySize) {\n                      // Estimate investment needed based on agency size\n                      const investmentEstimates = {\n                        '1-10': 25000,\n                        '11-50': 50000,\n                        '51-200': 100000,\n                        '200+': 200000\n                      };\n                      \n                      const investment = investmentEstimates[agencySize] || 50000;\n                      const monthlyReturn = annualSavings / 12;\n                      \n                      return Math.ceil(investment / monthlyReturn);\n                    }\n                    ;\n                    calculateSpecificSavings(serviceScores, selectedServices) {\n                      const savings = {};\n                      \n                      selectedServices.forEach(service => {\n                        const score = serviceScores[service];\n                        if (score) {\n                          savings[service] = {\n                            hoursSaved: Math.round(1000 * (score.aiOpportunity / 100)),\n                            tasks: this.getAutomatableTasks(service),\n                            implementation: this.getImplementationTime(service)\n                          }\n                        }\n                      });\n                      \n                      return savings;\n                    }\n                    \n                    getAutomatableTasks(service) {\n                      const tasks = {\n                        content_creation: [\"First drafts\", \"SEO optimization\", \"Content repurposing\"],\n                        creative_design: [\"Concept generation\", \"Asset variations\", \"Resizing\"],\n                        digital_marketing: [\"Campaign optimization\", \"Audience targeting\", \"A/B testing\"],\n                        media_planning: [\"Media mix modeling\", \"Budget allocation\", \"Performance tracking\"],\n                        seo_sem: [\"Keyword research\", \"Content optimization\", \"Competitor analysis\"],\n                        pr_comms: [\"Media monitoring\", \"Press release drafts\", \"Sentiment analysis\"]\n                      };\n                      return tasks[service] || [\"Process optimization\", \"Data analysis\", \"Reporting\"];\n                    }\n                    \n                    getImplementationTime(service) {\n                      const complexity = {\n                        content_creation: \"4-6 weeks\",\n                        creative_design: \"6-8 weeks\",\n                        digital_marketing: \"8-12 weeks\",\n                        media_planning: \"8-12 weeks\",\n                        seo_sem: \"4-6 weeks\",\n                        pr_comms: \"6-8 weeks\"\n                      };\n                      return complexity[service] || \"6-8 weeks\";\n                    }\n                    \n                    getQuartile(percentile) {\n                      if (percentile >= 75) return \"Top Quartile\";\n                      if (percentile >= 50) return \"Second Quartile\";\n                      if (percentile >= 25) return \"Third Quartile\";\n                      return \"Bottom Quartile\";\n                    }\n                    ;\n                    getMarketTrend(percentile, agencyType) {\n                      const trends = {\n                        creative: \"Creative agencies leading AI adoption for concept generation\",\n                        digital: \"Digital agencies integrating AI across all channels\",\n                        pr: \"PR agencies using AI for media intelligence and content\",\n                        integrated: \"Integrated agencies building AI centers of excellence\"\n                      };\n                      \n                      const trend = trends[agencyType] || \"Agencies rapidly adopting AI capabilities\";\n                      \n                      if (percentile >= 75) {\n                        return `Leading the trend: ${trend}`\n                      } else if (percentile >= 50) {\n                        return `Keeping pace: ${trend}`\n                      } else {\n                        return `Falling behind: ${trend}`\n                      }\n                    }\n                    \n                    getCompetitiveAdvantage(percentile) {\n                      if (percentile >= 90) {\n                        return \"Significant competitive advantage - win AI-forward clients\";\n                      } else if (percentile >= 75) {\n                        return \"Strong position - differentiate on AI capabilities\";\n                      } else if (percentile >= 50) {\n                        return \"Competitive parity - need differentiation\";\n                      } else if (percentile >= 25) {\n                        return \"Competitive disadvantage - urgent catch-up needed\";\n                      }\n                      return \"Severe disadvantage - at risk of obsolescence\";\n                    }\n                    \n                    getMarketImplication(percentile) {\n                      if (percentile >= 75) {\n                        return \"Position as AI transformation leader to command premium\";\n                      } else if (percentile >= 50) {\n                        return \"Accelerate AI adoption to stay competitive\";\n                      } else if (percentile >= 25) {\n                        return \"Immediate action required to prevent client loss\";\n                      }\n                      return \"Consider partnerships or acquisition for survival\";\n                    }\n                    \n                    getPeerComparison(score, agencySize, agencyType) {\n                      // Simulated peer data for comparison\n                      const peerAverages = {\n                        creative: { '1-10': 45, '11-50': 55, '51-200': 65, '200+': 75 },\n                        digital: { '1-10': 50, '11-50': 60, '51-200': 70, '200+': 80 },\n                        pr: { '1-10': 40, '11-50': 50, '51-200': 60, '200+': 70 },\n                        integrated: { '1-10': 48, '11-50': 58, '51-200': 68, '200+': 78 }\n                      };\n                      \n                      const peerAvg = peerAverages[agencyType]?.[agencySize] || 55;\n                      const difference = score - peerAvg;\n                      \n                      return {\n                        peerAverage: peerAvg,\n                        difference: difference,\n                        comparison: difference > 0 ? \n                          `${Math.abs(difference)} points ahead of similar agencies` :\n                          `${Math.abs(difference)} points behind similar agencies`\n                      };\n                    }\n                    \n                    calculateCompletionRate(answers) {\n                      const expectedQuestions = 30; // Approximate total;\n                      const answered = Object.keys(answers).length;\n                      return Math.round((answered / expectedQuestions) * 100);\n                    }\n                  }\n                  \n                  // Export for use in assessment system\n                  export default AgencyTransformationScoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}