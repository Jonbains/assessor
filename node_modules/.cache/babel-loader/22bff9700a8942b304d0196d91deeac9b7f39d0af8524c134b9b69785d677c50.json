{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/QualifyingQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAssessment } from '../hooks/useAssessment';\nimport Navigation from './Navigation';\nimport ProgressBar from './ProgressBar';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QualifyingQuestions = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    type\n  } = useParams();\n  const {\n    assessmentData,\n    updateAssessmentData,\n    saveProgress,\n    getAssessmentConfig\n  } = useAssessment();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadQuestions();\n  }, [type]);\n  const loadQuestions = async () => {\n    try {\n      setIsLoading(true);\n      // Load qualifying questions for this assessment type\n      const config = await getAssessmentConfig(type);\n      const qualifyingData = await import(`../../assessments/${type}/qualifying.json`);\n      setQuestions(qualifyingData.questions || []);\n\n      // Load any previously saved answers\n      if (assessmentData.qualifying) {\n        setAnswers(assessmentData.qualifying);\n      }\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error loading qualifying questions:', err);\n      setError('Failed to load questions. Please try again.');\n      setIsLoading(false);\n    }\n  };\n  const handleAnswer = (questionId, value) => {\n    const newAnswers = {\n      ...answers,\n      [questionId]: value\n    };\n    setAnswers(newAnswers);\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = async () => {\n    console.log('handleNext called');\n\n    // Validate all required questions are answered\n    const requiredQuestions = questions.filter(q => q.required !== false);\n    const missingRequired = requiredQuestions.some(q => !answers[q.id]);\n    if (missingRequired) {\n      alert('Please answer all required questions');\n      return;\n    }\n    console.log('All required questions answered');\n    try {\n      // Step 1: Save answers to assessment data\n      const dataToUpdate = {\n        qualifying: answers,\n        companySize: answers.agency_size || answers.company_size,\n        revenue: answers.annual_revenue,\n        budget: answers.budget,\n        aiExperience: answers.ai_experience\n      };\n      await updateAssessmentData(dataToUpdate);\n      console.log('Assessment data updated');\n\n      // Step 2: Save progress to persistence layer\n      await saveProgress('qualifying');\n      console.log('Progress saved');\n\n      // Step 3: Navigate to the next route\n      const navigationPath = `/assessment/${type}/services`;\n      console.log(`Navigating to ${navigationPath}`);\n\n      // Use navigate function with replace option\n      navigate(navigationPath, {\n        replace: true\n      });\n    } catch (error) {\n      console.error('Error in handleNext:', error);\n      alert('There was an error saving your answers. Please try again.');\n    }\n  };\n  const handleBack = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    } else {\n      navigate(`/assessment/${type}/sector`);\n    }\n  };\n  const calculateProgress = () => {\n    const answeredCount = Object.keys(answers).length;\n    const totalRequired = questions.filter(q => q.required !== false).length;\n    return answeredCount / totalRequired * 100;\n  };\n\n  // Get required questions for validation\n  const requiredQuestions = questions.filter(q => q.required !== false);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadQuestions,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const progress = calculateProgress();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress,\n      stage: \"qualifying\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Tell us about your organization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), currentQuestion.type === 'single-select' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${answers[currentQuestion.id] === option.value ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this)\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), currentQuestion.type === 'multi-select' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map(option => {\n            const currentAnswers = answers[currentQuestion.id] || [];\n            const isSelected = currentAnswers.includes(option.value);\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${styles.optionButton} ${isSelected ? styles.selected : ''}`,\n              onClick: () => {\n                const newAnswers = isSelected ? currentAnswers.filter(v => v !== option.value) : [...currentAnswers, option.value];\n                handleAnswer(currentQuestion.id, newAnswers);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.optionLabel,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 23\n              }, this)\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${answers[questions[index].id] ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handleBack,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? () => {\n        if (currentQuestionIndex < questions.length - 1) {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          handleNext();\n        }\n      } : null,\n      nextLabel: isLastQuestion ? \"Continue to Services\" : null,\n      showNext: isLastQuestion || requiredQuestions.length > 0 && Object.keys(answers).length >= requiredQuestions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(QualifyingQuestions, \"IntAuZcVmMh6W74vwGuyvFJq8Hw=\", false, function () {\n  return [useNavigate, useParams, useAssessment];\n});\n_c = QualifyingQuestions;\nexport default QualifyingQuestions;\nvar _c;\n$RefreshReg$(_c, \"QualifyingQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","useAssessment","Navigation","ProgressBar","styles","jsxDEV","_jsxDEV","QualifyingQuestions","_s","navigate","type","assessmentData","updateAssessmentData","saveProgress","getAssessmentConfig","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","isLoading","setIsLoading","error","setError","loadQuestions","config","qualifyingData","qualifying","err","console","handleAnswer","questionId","value","newAnswers","setTimeout","length","handleNext","log","requiredQuestions","filter","q","required","missingRequired","some","id","alert","dataToUpdate","companySize","agency_size","company_size","revenue","annual_revenue","budget","aiExperience","ai_experience","navigationPath","replace","handleBack","calculateProgress","answeredCount","Object","keys","totalRequired","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","currentQuestion","isLastQuestion","progress","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","optionsGrid","options","map","option","optionButton","selected","optionLabel","label","currentAnswers","isSelected","includes","v","questionDots","_","index","dot","active","answered","onBack","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/QualifyingQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAssessment } from '../hooks/useAssessment';\nimport Navigation from './Navigation';\nimport ProgressBar from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst QualifyingQuestions = () => {\n  const navigate = useNavigate();\n  const { type } = useParams();\n  const { \n    assessmentData, \n    updateAssessmentData, \n    saveProgress,\n    getAssessmentConfig \n  } = useAssessment();\n  \n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadQuestions();\n  }, [type]);\n\n  const loadQuestions = async () => {\n    try {\n      setIsLoading(true);\n      // Load qualifying questions for this assessment type\n      const config = await getAssessmentConfig(type);\n      const qualifyingData = await import(`../../assessments/${type}/qualifying.json`);\n      \n      setQuestions(qualifyingData.questions || []);\n      \n      // Load any previously saved answers\n      if (assessmentData.qualifying) {\n        setAnswers(assessmentData.qualifying);\n      }\n      \n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error loading qualifying questions:', err);\n      setError('Failed to load questions. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnswer = (questionId, value) => {\n    const newAnswers = { ...answers, [questionId]: value };\n    setAnswers(newAnswers);\n    \n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n\n  const handleNext = async () => {\n    console.log('handleNext called');\n    \n    // Validate all required questions are answered\n    const requiredQuestions = questions.filter(q => q.required !== false);\n    const missingRequired = requiredQuestions.some(q => !answers[q.id]);\n    \n    if (missingRequired) {\n      alert('Please answer all required questions');\n      return;\n    }\n    \n    console.log('All required questions answered');\n    \n    try {\n      // Step 1: Save answers to assessment data\n      const dataToUpdate = {\n        qualifying: answers,\n        companySize: answers.agency_size || answers.company_size,\n        revenue: answers.annual_revenue,\n        budget: answers.budget,\n        aiExperience: answers.ai_experience\n      };\n      \n      await updateAssessmentData(dataToUpdate);\n      console.log('Assessment data updated');\n      \n      // Step 2: Save progress to persistence layer\n      await saveProgress('qualifying');\n      console.log('Progress saved');\n      \n      // Step 3: Navigate to the next route\n      const navigationPath = `/assessment/${type}/services`;\n      console.log(`Navigating to ${navigationPath}`);\n      \n      // Use navigate function with replace option\n      navigate(navigationPath, { replace: true });\n    } catch (error) {\n      console.error('Error in handleNext:', error);\n      alert('There was an error saving your answers. Please try again.');\n    }\n  };\n\n  const handleBack = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    } else {\n      navigate(`/assessment/${type}/sector`);\n    }\n  };\n\n  const calculateProgress = () => {\n    const answeredCount = Object.keys(answers).length;\n    const totalRequired = questions.filter(q => q.required !== false).length;\n    return (answeredCount / totalRequired) * 100;\n  };\n  \n  // Get required questions for validation\n  const requiredQuestions = questions.filter(q => q.required !== false);\n\n  if (isLoading) {\n    return (\n      <div className={styles.loadingContainer}>\n        <div className={styles.spinner} />\n        <p>Loading questions...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={styles.errorContainer}>\n        <p>{error}</p>\n        <button onClick={loadQuestions}>Try Again</button>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const progress = calculateProgress();\n\n  \n  return (\n    <div className={styles.qualifyingContainer}>\n      <ProgressBar progress={progress} stage=\"qualifying\" />\n      \n      <div className={styles.questionContainer}>\n        <div className={styles.questionHeader}>\n          <h2>Tell us about your organization</h2>\n          <p className={styles.questionNumber}>\n            Question {currentQuestionIndex + 1} of {questions.length}\n          </p>\n        </div>\n\n        {currentQuestion && (\n          <div className={styles.questionContent}>\n            <h3 className={styles.questionText}>\n              {currentQuestion.question}\n              {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n            </h3>\n            \n            {currentQuestion.type === 'single-select' && (\n              <div className={styles.optionsGrid}>\n                {currentQuestion.options.map((option) => (\n                  <button\n                    key={option.value}\n                    className={`${styles.optionButton} ${\n                      answers[currentQuestion.id] === option.value ? styles.selected : ''\n                    }`}\n                    onClick={() => handleAnswer(currentQuestion.id, option.value)}\n                  >\n                    <span className={styles.optionLabel}>{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            )}\n            \n            {currentQuestion.type === 'multi-select' && (\n              <div className={styles.optionsGrid}>\n                {currentQuestion.options.map((option) => {\n                  const currentAnswers = answers[currentQuestion.id] || [];\n                  const isSelected = currentAnswers.includes(option.value);\n                  \n                  return (\n                    <button\n                      key={option.value}\n                      className={`${styles.optionButton} ${isSelected ? styles.selected : ''}`}\n                      onClick={() => {\n                        const newAnswers = isSelected\n                          ? currentAnswers.filter(v => v !== option.value)\n                          : [...currentAnswers, option.value];\n                        handleAnswer(currentQuestion.id, newAnswers);\n                      }}\n                    >\n                      <span className={styles.optionLabel}>{option.label}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Question navigation dots */}\n        <div className={styles.questionDots}>\n          {questions.map((_, index) => (\n            <button\n              key={index}\n              className={`${styles.dot} ${\n                index === currentQuestionIndex ? styles.active : ''\n              } ${answers[questions[index].id] ? styles.answered : ''}`}\n              onClick={() => setCurrentQuestionIndex(index)}\n              aria-label={`Go to question ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <Navigation\n        onBack={handleBack}\n        onNext={handleNext}\n        onSkip={currentQuestion?.required === false ? () => {\n          if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n          } else {\n            handleNext();\n          }\n        } : null}\n        nextLabel={isLastQuestion ? \"Continue to Services\" : null}\n        showNext={isLastQuestion || (requiredQuestions.length > 0 && Object.keys(answers).length >= requiredQuestions.length)}\n      />\n    </div>\n  );\n};\n\nexport default QualifyingQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}