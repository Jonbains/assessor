{"ast":null,"code":"export class ScoringEngine{constructor(customScoring){this.customScoring=customScoring;this.weights=(customScoring===null||customScoring===void 0?void 0:customScoring.weights)||this.defaultWeights;}calculate(responses,context){var _this$customScoring;// Base scoring logic used by all assessments\nlet scores=this.calculateDimensionScores(responses);// Apply custom scoring if provided\nif((_this$customScoring=this.customScoring)!==null&&_this$customScoring!==void 0&&_this$customScoring.calculate){scores=this.customScoring.calculate(scores,responses,context);}// Apply context-based adjustments\nscores=this.applyContextAdjustments(scores,context);return{overall:this.calculateOverallScore(scores),dimensions:scores,insights:this.generateInsights(scores,context)};}calculateDimensionScores(responses){// Implementation for base dimension calculation\nreturn{};}calculateOverallScore(dimensionScores){// Implementation for overall score calculation\nreturn 0;}applyContextAdjustments(scores,context){// Apply size, industry, or other contextual adjustments\nreturn scores;}generateInsights(scores,context){// Generate insights based on scores\nreturn[];}}export default ScoringEngine;","map":{"version":3,"names":["ScoringEngine","constructor","customScoring","weights","defaultWeights","calculate","responses","context","_this$customScoring","scores","calculateDimensionScores","applyContextAdjustments","overall","calculateOverallScore","dimensions","insights","generateInsights","dimensionScores"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ScoringEngine.js"],"sourcesContent":["export class ScoringEngine {\n    constructor(customScoring) {\n        this.customScoring = customScoring;\n        this.weights = customScoring?.weights || this.defaultWeights;\n    }\n\n    calculate(responses, context) {\n        // Base scoring logic used by all assessments\n        let scores = this.calculateDimensionScores(responses);\n\n        // Apply custom scoring if provided\n        if (this.customScoring?.calculate) {\n            scores = this.customScoring.calculate(scores, responses, context);\n        }\n\n        // Apply context-based adjustments\n        scores = this.applyContextAdjustments(scores, context);\n\n        return {\n            overall: this.calculateOverallScore(scores),\n            dimensions: scores,\n            insights: this.generateInsights(scores, context)\n        };\n    }\n\n    calculateDimensionScores(responses) {\n        // Implementation for base dimension calculation\n        return {};\n    }\n\n    calculateOverallScore(dimensionScores) {\n        // Implementation for overall score calculation\n        return 0;\n    }\n\n    applyContextAdjustments(scores, context) {\n        // Apply size, industry, or other contextual adjustments\n        return scores;\n    }\n\n    generateInsights(scores, context) {\n        // Generate insights based on scores\n        return [];\n    }\n}\n\nexport default ScoringEngine;\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,aAAc,CACvBC,WAAWA,CAACC,aAAa,CAAE,CACvB,IAAI,CAACA,aAAa,CAAGA,aAAa,CAClC,IAAI,CAACC,OAAO,CAAG,CAAAD,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEC,OAAO,GAAI,IAAI,CAACC,cAAc,CAChE,CAEAC,SAASA,CAACC,SAAS,CAAEC,OAAO,CAAE,KAAAC,mBAAA,CAC1B;AACA,GAAI,CAAAC,MAAM,CAAG,IAAI,CAACC,wBAAwB,CAACJ,SAAS,CAAC,CAErD;AACA,IAAAE,mBAAA,CAAI,IAAI,CAACN,aAAa,UAAAM,mBAAA,WAAlBA,mBAAA,CAAoBH,SAAS,CAAE,CAC/BI,MAAM,CAAG,IAAI,CAACP,aAAa,CAACG,SAAS,CAACI,MAAM,CAAEH,SAAS,CAAEC,OAAO,CAAC,CACrE,CAEA;AACAE,MAAM,CAAG,IAAI,CAACE,uBAAuB,CAACF,MAAM,CAAEF,OAAO,CAAC,CAEtD,MAAO,CACHK,OAAO,CAAE,IAAI,CAACC,qBAAqB,CAACJ,MAAM,CAAC,CAC3CK,UAAU,CAAEL,MAAM,CAClBM,QAAQ,CAAE,IAAI,CAACC,gBAAgB,CAACP,MAAM,CAAEF,OAAO,CACnD,CAAC,CACL,CAEAG,wBAAwBA,CAACJ,SAAS,CAAE,CAChC;AACA,MAAO,CAAC,CAAC,CACb,CAEAO,qBAAqBA,CAACI,eAAe,CAAE,CACnC;AACA,MAAO,EAAC,CACZ,CAEAN,uBAAuBA,CAACF,MAAM,CAAEF,OAAO,CAAE,CACrC;AACA,MAAO,CAAAE,MAAM,CACjB,CAEAO,gBAAgBA,CAACP,MAAM,CAAEF,OAAO,CAAE,CAC9B;AACA,MAAO,EAAE,CACb,CACJ,CAEA,cAAe,CAAAP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}