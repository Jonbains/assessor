{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceSelector = ({\n  assessmentType,\n  onSelect,\n  onBack\n}) => {\n  _s();\n  console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n  const [services, setServices] = useState([]);\n  const [allocations, setAllocations] = useState({});\n  const [totalAllocated, setTotalAllocated] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n  // Load services data based on assessment type\n  const loadServices = () => {\n    try {\n      setLoading(true);\n      console.log(`Loading services for ${assessmentType}`);\n\n      // Use the statically imported JSON data based on assessment type\n      let servicesData;\n      if (assessmentType === 'agency-vulnerability') {\n        console.log('Using agency services data');\n        servicesData = agencyServices;\n      } else if (assessmentType === 'inhouse-marketing') {\n        console.log('Using inhouse activities data');\n        servicesData = inhouseActivities;\n      } else {\n        throw new Error(`Unknown assessment type: ${assessmentType}`);\n      }\n\n      // Extract the correct data array\n      const serviceArray = assessmentType === 'agency-vulnerability' ? servicesData.services || [] : servicesData.activities || [];\n      console.log('Services data loaded:', serviceArray);\n      if (serviceArray.length > 0) {\n        setServices(serviceArray);\n\n        // Initialize allocations with 0 for each service\n        const initialAllocations = {};\n        serviceArray.forEach(service => {\n          initialAllocations[service.id] = 0;\n        });\n        setAllocations(initialAllocations);\n        setTotalAllocated(0);\n        setError(null);\n      } else {\n        console.error('Service data is empty:', servicesData);\n        setError('No services found for this assessment type.');\n      }\n    } catch (error) {\n      console.error('Failed to load services:', error);\n      setError(`Failed to load services: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    loadServices();\n  }, [assessmentType]);\n\n  // Handle slider value change\n  const handleSliderChange = (serviceId, value) => {\n    // Parse the value to ensure it's a number\n    const newValue = parseInt(value, 10) || 0;\n\n    // Calculate the difference from previous allocation\n    const oldValue = allocations[serviceId] || 0;\n    const difference = newValue - oldValue;\n\n    // Update the allocations and total\n    setAllocations(prev => ({\n      ...prev,\n      [serviceId]: newValue\n    }));\n    setTotalAllocated(prev => prev + difference);\n  };\n\n  // Calculate the percentage of total allocated\n  const percentageAllocated = totalAllocated;\n  const isFullyAllocated = percentageAllocated === 100;\n  const isOverAllocated = percentageAllocated > 100;\n\n  // Helper to get remaining percentage that can be allocated\n  const getRemainingPercentage = () => {\n    return Math.max(0, 100 - totalAllocated);\n  };\n\n  // Handle continue button click\n  const handleContinue = () => {\n    // Only services with allocation > 0 should be included\n    const selectedServicesWithAllocation = Object.entries(allocations).filter(([_, value]) => value > 0).reduce((acc, [key, value]) => {\n      acc[key] = value / 100; // Convert to decimal proportion\n      return acc;\n    }, {});\n    if (Object.keys(selectedServicesWithAllocation).length === 0) {\n      alert('Please allocate percentage to at least one service to continue.');\n      return;\n    }\n    if (!isFullyAllocated) {\n      if (!window.confirm(`You've only allocated ${percentageAllocated}% of your resources. Are you sure you want to continue?`)) {\n        return;\n      }\n    }\n    onSelect(selectedServicesWithAllocation);\n  };\n\n  // Reset all allocations\n  const resetAllocations = () => {\n    const resetValues = {};\n    services.forEach(service => {\n      resetValues[service.id] = 0;\n    });\n    setAllocations(resetValues);\n    setTotalAllocated(0);\n  };\n\n  // Even distribution button\n  const distributeEvenly = () => {\n    if (services.length === 0) return;\n    const equalValue = Math.floor(100 / services.length);\n    const remainder = 100 - equalValue * services.length;\n    const newAllocations = {};\n    services.forEach((service, index) => {\n      // Add the remainder to the first service\n      newAllocations[service.id] = equalValue + (index === 0 ? remainder : 0);\n    });\n    setAllocations(newAllocations);\n    setTotalAllocated(100);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading services...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadServices,\n        className: styles.button,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please allocate percentages to represent how your resources are distributed:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allocationHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.allocationTotal,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Total Allocated: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isOverAllocated ? styles.overAllocated : isFullyAllocated ? styles.fullyAllocated : '',\n          children: [percentageAllocated, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.allocationBar,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.allocationBarFill} ${isOverAllocated ? styles.overAllocated : ''}`,\n            style: {\n              width: `${Math.min(percentageAllocated, 100)}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.allocationControls,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetAllocations,\n          className: styles.buttonSmall,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: distributeEvenly,\n          className: styles.buttonSmall,\n          children: \"Distribute Evenly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceList,\n      children: services.map(service => {\n        const currentAllocation = allocations[service.id] || 0;\n        const maxAllocation = currentAllocation + getRemainingPercentage();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.serviceItem,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.serviceHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceName,\n              children: service.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.serviceAllocation,\n              children: [currentAllocation, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }, this), service.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.serviceDescription,\n            children: service.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.sliderContainer,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              value: currentAllocation,\n              onChange: e => handleSliderChange(service.id, e.target.value),\n              className: styles.slider,\n              disabled: currentAllocation === 0 && maxAllocation === 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this)]\n        }, service.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navigationButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: styles.buttonSecondary,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContinue,\n        className: styles.button,\n        disabled: isOverAllocated,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      currentStep: 2,\n      totalSteps: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n_s(ServiceSelector, \"pX566hpAqhr5lNAKlazAzg+e1DU=\");\n_c = ServiceSelector;\nexport default ServiceSelector;\nvar _c;\n$RefreshReg$(_c, \"ServiceSelector\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","styles","agencyServices","inhouseActivities","jsxDEV","_jsxDEV","ServiceSelector","assessmentType","onSelect","onBack","_s","console","log","services","setServices","allocations","setAllocations","totalAllocated","setTotalAllocated","loading","setLoading","error","setError","loadServices","servicesData","Error","serviceArray","activities","length","initialAllocations","forEach","service","id","message","handleSliderChange","serviceId","value","newValue","parseInt","oldValue","difference","prev","percentageAllocated","isFullyAllocated","isOverAllocated","getRemainingPercentage","Math","max","handleContinue","selectedServicesWithAllocation","Object","entries","filter","_","reduce","acc","key","keys","alert","window","confirm","resetAllocations","resetValues","distributeEvenly","equalValue","floor","remainder","newAllocations","index","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","button","buttonSecondary","container","allocationHeader","allocationTotal","overAllocated","fullyAllocated","allocationBar","allocationBarFill","style","width","min","allocationControls","buttonSmall","serviceList","map","currentAllocation","maxAllocation","serviceItem","serviceHeader","serviceName","name","serviceAllocation","description","serviceDescription","sliderContainer","type","onChange","e","target","slider","disabled","navigationButtons","currentStep","totalSteps","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/ServiceSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\n// Import JSON data directly for webpack to bundle correctly\nimport agencyServices from '../../assessments/agency-vulnerability/services.json';\nimport inhouseActivities from '../../assessments/inhouse-marketing/activities.json';\n\nconst ServiceSelector = ({ assessmentType, onSelect, onBack }) => {\n    console.log('==== LOADED VERSION: /src/core/components/ServiceSelector.jsx ====');\n    const [services, setServices] = useState([]);\n    const [allocations, setAllocations] = useState({});\n    const [totalAllocated, setTotalAllocated] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    console.log(`ServiceSelector rendered, assessment type: ${assessmentType}`);\n\n    // Load services data based on assessment type\n    const loadServices = () => {\n        try {\n            setLoading(true);\n            console.log(`Loading services for ${assessmentType}`);\n            \n            // Use the statically imported JSON data based on assessment type\n            let servicesData;\n            if (assessmentType === 'agency-vulnerability') {\n                console.log('Using agency services data');\n                servicesData = agencyServices;\n            } else if (assessmentType === 'inhouse-marketing') {\n                console.log('Using inhouse activities data');\n                servicesData = inhouseActivities;\n            } else {\n                throw new Error(`Unknown assessment type: ${assessmentType}`);\n            }\n            \n            // Extract the correct data array\n            const serviceArray = assessmentType === 'agency-vulnerability'\n                ? (servicesData.services || [])\n                : (servicesData.activities || []);\n                \n            console.log('Services data loaded:', serviceArray);\n            \n            if (serviceArray.length > 0) {\n                setServices(serviceArray);\n                \n                // Initialize allocations with 0 for each service\n                const initialAllocations = {};\n                serviceArray.forEach(service => {\n                    initialAllocations[service.id] = 0;\n                });\n                setAllocations(initialAllocations);\n                setTotalAllocated(0);\n                \n                setError(null);\n            } else {\n                console.error('Service data is empty:', servicesData);\n                setError('No services found for this assessment type.');\n            }\n        } catch (error) {\n            console.error('Failed to load services:', error);\n            setError(`Failed to load services: ${error.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        loadServices();\n    }, [assessmentType]);\n\n    // Handle slider value change\n    const handleSliderChange = (serviceId, value) => {\n        // Parse the value to ensure it's a number\n        const newValue = parseInt(value, 10) || 0;\n        \n        // Calculate the difference from previous allocation\n        const oldValue = allocations[serviceId] || 0;\n        const difference = newValue - oldValue;\n        \n        // Update the allocations and total\n        setAllocations(prev => ({\n            ...prev,\n            [serviceId]: newValue\n        }));\n        \n        setTotalAllocated(prev => prev + difference);\n    };\n\n    // Calculate the percentage of total allocated\n    const percentageAllocated = totalAllocated;\n    const isFullyAllocated = percentageAllocated === 100;\n    const isOverAllocated = percentageAllocated > 100;\n\n    // Helper to get remaining percentage that can be allocated\n    const getRemainingPercentage = () => {\n        return Math.max(0, 100 - totalAllocated);\n    };\n\n    // Handle continue button click\n    const handleContinue = () => {\n        // Only services with allocation > 0 should be included\n        const selectedServicesWithAllocation = Object.entries(allocations)\n            .filter(([_, value]) => value > 0)\n            .reduce((acc, [key, value]) => {\n                acc[key] = value / 100; // Convert to decimal proportion\n                return acc;\n            }, {});\n\n        if (Object.keys(selectedServicesWithAllocation).length === 0) {\n            alert('Please allocate percentage to at least one service to continue.');\n            return;\n        }\n\n        if (!isFullyAllocated) {\n            if (!window.confirm(`You've only allocated ${percentageAllocated}% of your resources. Are you sure you want to continue?`)) {\n                return;\n            }\n        }\n\n        onSelect(selectedServicesWithAllocation);\n    };\n\n    // Reset all allocations\n    const resetAllocations = () => {\n        const resetValues = {};\n        services.forEach(service => {\n            resetValues[service.id] = 0;\n        });\n        setAllocations(resetValues);\n        setTotalAllocated(0);\n    };\n\n    // Even distribution button\n    const distributeEvenly = () => {\n        if (services.length === 0) return;\n        \n        const equalValue = Math.floor(100 / services.length);\n        const remainder = 100 - (equalValue * services.length);\n        \n        const newAllocations = {};\n        services.forEach((service, index) => {\n            // Add the remainder to the first service\n            newAllocations[service.id] = equalValue + (index === 0 ? remainder : 0);\n        });\n        \n        setAllocations(newAllocations);\n        setTotalAllocated(100);\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner}></div>\n                <p>Loading services...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className={styles.errorContainer}>\n                <h3>Error</h3>\n                <p>{error}</p>\n                <button onClick={loadServices} className={styles.button}>Retry</button>\n                <button onClick={onBack} className={styles.buttonSecondary}>Go Back</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2>{assessmentType === 'agency-vulnerability' ? 'Select Your Services' : 'Select Your Activities'}</h2>\n            <p>Please allocate percentages to represent how your resources are distributed:</p>\n            \n            <div className={styles.allocationHeader}>\n                <div className={styles.allocationTotal}>\n                    <span>Total Allocated: </span>\n                    <span className={isOverAllocated ? styles.overAllocated : isFullyAllocated ? styles.fullyAllocated : ''}>\n                        {percentageAllocated}%\n                    </span>\n                    <div className={styles.allocationBar}>\n                        <div \n                            className={`${styles.allocationBarFill} ${isOverAllocated ? styles.overAllocated : ''}`}\n                            style={{ width: `${Math.min(percentageAllocated, 100)}%` }}\n                        ></div>\n                    </div>\n                </div>\n                <div className={styles.allocationControls}>\n                    <button onClick={resetAllocations} className={styles.buttonSmall}>Reset</button>\n                    <button onClick={distributeEvenly} className={styles.buttonSmall}>Distribute Evenly</button>\n                </div>\n            </div>\n            \n            <div className={styles.serviceList}>\n                {services.map(service => {\n                    const currentAllocation = allocations[service.id] || 0;\n                    const maxAllocation = currentAllocation + getRemainingPercentage();\n                    \n                    return (\n                        <div key={service.id} className={styles.serviceItem}>\n                            <div className={styles.serviceHeader}>\n                                <span className={styles.serviceName}>{service.name}</span>\n                                <span className={styles.serviceAllocation}>{currentAllocation}%</span>\n                            </div>\n                            \n                            {service.description && (\n                                <p className={styles.serviceDescription}>{service.description}</p>\n                            )}\n                            \n                            <div className={styles.sliderContainer}>\n                                <input\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    value={currentAllocation}\n                                    onChange={(e) => handleSliderChange(service.id, e.target.value)}\n                                    className={styles.slider}\n                                    disabled={currentAllocation === 0 && maxAllocation === 0}\n                                />\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            \n            <div className={styles.navigationButtons}>\n                <button onClick={onBack} className={styles.buttonSecondary}>\n                    Back\n                </button>\n                <button \n                    onClick={handleContinue} \n                    className={styles.button}\n                    disabled={isOverAllocated}\n                >\n                    Continue\n                </button>\n            </div>\n            \n            <ProgressBar currentStep={2} totalSteps={5} />\n        </div>\n    );\n};\n\nexport default ServiceSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}