{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadQuestions();\n  }, [assessmentType]);\n  const loadQuestions = async () => {\n    try {\n      setLoading(true);\n      console.log('Loading questions for assessment type:', assessmentType);\n\n      // Load core questions based on assessment type\n      const module = await import(`../../assessments/${assessmentType}/questions.json`);\n      const data = module.default || module;\n\n      // Extract and flatten core questions array from the loaded data\n      let coreQuestions = [];\n      if (data.questions) {\n        // Direct questions array format\n        coreQuestions = data.questions;\n      } else if (data.coreQuestions) {\n        // Nested questions by category format\n        Object.values(data.coreQuestions).forEach(questionSet => {\n          if (Array.isArray(questionSet)) {\n            coreQuestions = [...coreQuestions, ...questionSet];\n          }\n        });\n      }\n      console.log(`Loaded ${coreQuestions.length} core questions`);\n\n      // If we have selected services, load service-specific questions\n      let serviceQuestions = [];\n      // Get selected services from context - it's stored in context, not responses\n      // This was a critical bug - selectedServices are stored in context by AssessmentFlow\n      // Create a backup method to get it from either context or responses\n      let selectedServices;\n      try {\n        // In the react-app version, context should be used\n        const contextMethod = getContext || (() => null);\n        selectedServices = contextMethod('selectedServices');\n\n        // If not found in context, fall back to response\n        if (!selectedServices) {\n          selectedServices = getResponse('selectedServices');\n        }\n        console.log('DEBUG - Selected services (from context):', selectedServices);\n      } catch (err) {\n        console.error('Error getting selectedServices from context:', err);\n        // Fall back to response as a last resort\n        selectedServices = getResponse('selectedServices');\n        console.log('DEBUG - Selected services (fallback from responses):', selectedServices);\n      }\n      console.log('DEBUG - Type of selectedServices:', typeof selectedServices);\n      if (selectedServices && Object.keys(selectedServices).length > 0) {\n        try {\n          // Load service-specific questions\n          console.log(`DEBUG - Loading service questions from: ../../assessments/${assessmentType}/service-questions.json`);\n          const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n          const serviceData = serviceModule.default || serviceModule;\n          console.log('DEBUG - Service questions data structure:', JSON.stringify(serviceData, null, 2));\n\n          // Debug the full serviceData structure to identify correct format\n          if (serviceData.serviceQuestions) {\n            console.log('DEBUG - Service data has serviceQuestions property');\n            console.log('DEBUG - Available service IDs in serviceQuestions:', Object.keys(serviceData.serviceQuestions));\n          } else {\n            console.log('DEBUG - Service data format:', Object.keys(serviceData));\n          }\n\n          // Check threshold for including service questions (any service with allocation > 0.1 or 10%)\n          Object.keys(selectedServices).forEach(serviceId => {\n            const allocation = selectedServices[serviceId];\n            console.log(`DEBUG - Processing service ${serviceId} with allocation ${allocation}`);\n\n            // Only include questions for services with significant allocation (> 10%)\n            if (allocation > 0.1) {\n              // First check standard format: serviceQuestions[serviceId].questions\n              if (serviceData.serviceQuestions && serviceData.serviceQuestions[serviceId] && serviceData.serviceQuestions[serviceId].questions) {\n                const serviceQuestionSet = serviceData.serviceQuestions[serviceId].questions || [];\n                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} (allocation: ${Math.round(allocation * 100)}%)`);\n                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n              }\n              // Alternate format: direct mapping of serviceId to questions array\n              else if (serviceData[serviceId]) {\n                const serviceQuestionSet = Array.isArray(serviceData[serviceId]) ? serviceData[serviceId] : serviceData[serviceId].questions || [];\n                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} using alternate format`);\n                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n              } else {\n                console.error(`No questions found for service ${serviceId} - data structure may be incorrect`);\n                console.log('Available keys:', Object.keys(serviceData));\n                if (serviceData.serviceQuestions) {\n                  console.log('Available service IDs:', Object.keys(serviceData.serviceQuestions));\n                }\n              }\n            } else {\n              console.log(`Skipping questions for service ${serviceId} due to low allocation (${Math.round(allocation * 100)}%)`);\n            }\n          });\n        } catch (err) {\n          console.error('Error loading service questions:', err);\n          console.error('Error details:', err.message, err.stack);\n        }\n      } else {\n        console.warn('No services selected or invalid selectedServices format:', selectedServices);\n      }\n      console.log(`Total service questions: ${serviceQuestions.length}`);\n\n      // Combine all question types\n      const allQuestions = [...coreQuestions, ...serviceQuestions];\n      console.log(`Total questions to display: ${allQuestions.length}`);\n      setQuestions(allQuestions);\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (questionId, value) => {\n    // Save the answer\n    saveResponse(questionId, value);\n\n    // Auto-advance to next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, 300);\n  };\n  const handleNext = () => {\n    // Validate if the current question is answered\n    const currentQ = questions[currentQuestionIndex];\n    if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n      alert('Please answer this question before continuing');\n      return;\n    }\n    if (isLastQuestion) {\n      // Move to the next stage using onComplete callback\n      onComplete();\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      // Go back to the previous stage in the assessment flow\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this assessment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.qualifyingContainer,\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress || 65,\n      stage: \"assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Organization Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionNumber,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.questionText,\n          children: [currentQuestion.question || currentQuestion.text, currentQuestion.required !== false && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.required,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.optionsGrid,\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.optionButton} ${selectedValue === (option.value || option.score || index) ? styles.selected : ''}`,\n            onClick: () => handleAnswer(currentQuestion.id, option.value || option.score || index),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.optionLabel,\n              children: option.label || option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this), currentQuestion.insight && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionInsight,\n          children: currentQuestion.insight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }, this), currentQuestion.benchmark && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.questionBenchmark,\n          children: currentQuestion.benchmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionDots,\n        children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.dot} ${index === currentQuestionIndex ? styles.active : ''} ${getResponse(questions[index].id) ? styles.answered : ''}`,\n          onClick: () => setCurrentQuestionIndex(index),\n          \"aria-label\": `Go to question ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      onBack: handlePrevious,\n      onNext: handleNext,\n      onSkip: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.required) === false ? handleSkip : null,\n      nextLabel: isLastQuestion ? \"Complete\" : \"Continue\",\n      showNext: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","ProgressBar","Navigation","styles","jsxDEV","_jsxDEV","DynamicQuestions","assessmentType","saveResponse","getResponse","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","console","log","module","data","default","coreQuestions","Object","values","forEach","questionSet","Array","isArray","length","serviceQuestions","selectedServices","contextMethod","getContext","err","error","keys","serviceModule","serviceData","JSON","stringify","serviceId","allocation","serviceQuestionSet","Math","round","message","stack","warn","allQuestions","currentQuestion","isLastQuestion","handleAnswer","questionId","value","setTimeout","handleNext","currentQ","required","id","alert","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","errorContainer","onClick","selectedValue","qualifyingContainer","stage","questionContainer","questionHeader","questionNumber","questionContent","questionText","question","text","optionsGrid","options","map","option","index","optionButton","score","selected","optionLabel","label","insight","questionInsight","benchmark","questionBenchmark","questionDots","_","dot","active","answered","onNext","onSkip","nextLabel","showNext","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ProgressBar } from './ProgressBar';\nimport Navigation from './Navigation';\nimport styles from '../styles/components.module.css';\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            console.log('Loading questions for assessment type:', assessmentType);\n            \n            // Load core questions based on assessment type\n            const module = await import(`../../assessments/${assessmentType}/questions.json`);\n            const data = module.default || module;\n            \n            // Extract and flatten core questions array from the loaded data\n            let coreQuestions = [];\n            if (data.questions) {\n                // Direct questions array format\n                coreQuestions = data.questions;\n            } else if (data.coreQuestions) {\n                // Nested questions by category format\n                Object.values(data.coreQuestions).forEach(questionSet => {\n                    if (Array.isArray(questionSet)) {\n                        coreQuestions = [...coreQuestions, ...questionSet];\n                    }\n                });\n            }\n            console.log(`Loaded ${coreQuestions.length} core questions`);\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            // Get selected services from context - it's stored in context, not responses\n            // This was a critical bug - selectedServices are stored in context by AssessmentFlow\n            // Create a backup method to get it from either context or responses\n            let selectedServices;\n            try {\n                // In the react-app version, context should be used\n                const contextMethod = getContext || (() => null);\n                selectedServices = contextMethod('selectedServices');\n                \n                // If not found in context, fall back to response\n                if (!selectedServices) {\n                    selectedServices = getResponse('selectedServices');\n                }\n                \n                console.log('DEBUG - Selected services (from context):', selectedServices);\n            } catch (err) {\n                console.error('Error getting selectedServices from context:', err);\n                // Fall back to response as a last resort\n                selectedServices = getResponse('selectedServices');\n                console.log('DEBUG - Selected services (fallback from responses):', selectedServices);\n            }\n            \n            console.log('DEBUG - Type of selectedServices:', typeof selectedServices);\n            \n            if (selectedServices && Object.keys(selectedServices).length > 0) {\n                try {\n                    // Load service-specific questions\n                    console.log(`DEBUG - Loading service questions from: ../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceData = serviceModule.default || serviceModule;\n                    \n                    console.log('DEBUG - Service questions data structure:', JSON.stringify(serviceData, null, 2));\n                    \n                    // Debug the full serviceData structure to identify correct format\n                    if (serviceData.serviceQuestions) {\n                        console.log('DEBUG - Service data has serviceQuestions property');\n                        console.log('DEBUG - Available service IDs in serviceQuestions:', Object.keys(serviceData.serviceQuestions));\n                    } else {\n                        console.log('DEBUG - Service data format:', Object.keys(serviceData));\n                    }\n                    \n                    // Check threshold for including service questions (any service with allocation > 0.1 or 10%)\n                    Object.keys(selectedServices).forEach(serviceId => {\n                        const allocation = selectedServices[serviceId];\n                        console.log(`DEBUG - Processing service ${serviceId} with allocation ${allocation}`);\n                        \n                        // Only include questions for services with significant allocation (> 10%)\n                        if (allocation > 0.1) {\n                            // First check standard format: serviceQuestions[serviceId].questions\n                            if (serviceData.serviceQuestions && serviceData.serviceQuestions[serviceId] && serviceData.serviceQuestions[serviceId].questions) {\n                                const serviceQuestionSet = serviceData.serviceQuestions[serviceId].questions || [];\n                                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} (allocation: ${Math.round(allocation * 100)}%)`);\n                                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n                            } \n                            // Alternate format: direct mapping of serviceId to questions array\n                            else if (serviceData[serviceId]) {\n                                const serviceQuestionSet = Array.isArray(serviceData[serviceId]) \n                                    ? serviceData[serviceId] \n                                    : (serviceData[serviceId].questions || []);\n                                console.log(`Adding ${serviceQuestionSet.length} questions for service ${serviceId} using alternate format`);\n                                serviceQuestions = [...serviceQuestions, ...serviceQuestionSet];\n                            } else {\n                                console.error(`No questions found for service ${serviceId} - data structure may be incorrect`);\n                                console.log('Available keys:', Object.keys(serviceData));\n                                if (serviceData.serviceQuestions) {\n                                    console.log('Available service IDs:', Object.keys(serviceData.serviceQuestions));\n                                }\n                            }\n                        } else {\n                            console.log(`Skipping questions for service ${serviceId} due to low allocation (${Math.round(allocation * 100)}%)`);\n                        }\n                    });\n                } catch (err) {\n                    console.error('Error loading service questions:', err);\n                    console.error('Error details:', err.message, err.stack);\n                }\n            } else {\n                console.warn('No services selected or invalid selectedServices format:', selectedServices);\n            }\n            \n            console.log(`Total service questions: ${serviceQuestions.length}`);\n            \n            // Combine all question types\n            const allQuestions = [\n                ...coreQuestions,\n                ...serviceQuestions\n            ];\n            \n            console.log(`Total questions to display: ${allQuestions.length}`);\n            setQuestions(allQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (questionId, value) => {\n        // Save the answer\n        saveResponse(questionId, value);\n        \n        // Auto-advance to next question after a short delay\n        setTimeout(() => {\n            if (currentQuestionIndex < questions.length - 1) {\n                setCurrentQuestionIndex(currentQuestionIndex + 1);\n            }\n        }, 300);\n    };\n\n    const handleNext = () => {\n        // Validate if the current question is answered\n        const currentQ = questions[currentQuestionIndex];\n        if (currentQ && currentQ.required !== false && !getResponse(currentQ.id)) {\n            alert('Please answer this question before continuing');\n            return;\n        }\n        \n        if (isLastQuestion) {\n            // Move to the next stage using onComplete callback\n            onComplete();\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.qualifyingContainer}>\n            <ProgressBar progress={progress || 65} stage=\"assessment\" />\n            \n            <div className={styles.questionContainer}>\n                <div className={styles.questionHeader}>\n                    <h2>Your Organization Assessment</h2>\n                    <p className={styles.questionNumber}>\n                        Question {currentQuestionIndex + 1} of {questions.length}\n                    </p>\n                </div>\n\n                {currentQuestion && (\n                    <div className={styles.questionContent}>\n                        <h3 className={styles.questionText}>\n                            {currentQuestion.question || currentQuestion.text}\n                            {currentQuestion.required !== false && <span className={styles.required}>*</span>}\n                        </h3>\n                        \n                        <div className={styles.optionsGrid}>\n                            {currentQuestion.options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    className={`${styles.optionButton} ${\n                                        selectedValue === (option.value || option.score || index) ? styles.selected : ''\n                                    }`}\n                                    onClick={() => handleAnswer(currentQuestion.id, option.value || option.score || index)}\n                                >\n                                    <span className={styles.optionLabel}>{option.label || option.text}</span>\n                                </button>\n                            ))}\n                        </div>\n                        \n                        {currentQuestion.insight && (\n                            <p className={styles.questionInsight}>{currentQuestion.insight}</p>\n                        )}\n                        \n                        {currentQuestion.benchmark && (\n                            <p className={styles.questionBenchmark}>{currentQuestion.benchmark}</p>\n                        )}\n                    </div>\n                )}\n\n                {/* Question navigation dots */}\n                <div className={styles.questionDots}>\n                    {questions.map((_, index) => (\n                        <button\n                            key={index}\n                            className={`${styles.dot} ${\n                                index === currentQuestionIndex ? styles.active : ''\n                            } ${getResponse(questions[index].id) ? styles.answered : ''}`}\n                            onClick={() => setCurrentQuestionIndex(index)}\n                            aria-label={`Go to question ${index + 1}`}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <Navigation\n                onBack={handlePrevious}\n                onNext={handleNext}\n                onSkip={currentQuestion?.required === false ? handleSkip : null}\n                nextLabel={isLastQuestion ? \"Complete\" : \"Continue\"}\n                showNext={true}\n            />\n        </div>\n    );\n};\n\nexport default DynamicQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}