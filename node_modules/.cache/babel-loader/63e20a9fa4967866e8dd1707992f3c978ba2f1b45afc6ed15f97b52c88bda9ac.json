{"ast":null,"code":"/**\n * ResultsAdapterFactory\n * Creates and returns the appropriate results adapter for each assessment type\n */\n\n// Import adapters - add new adapters here as more assessment types are added\nimport AgencyVulnerabilityAdapter from '../../assessments/agency-vulnerability/ResultsAdapter';\nimport InhouseMarketingAdapter from '../../assessments/inhouse-marketing/ResultsAdapter';\nclass ResultsAdapterFactory {\n  /**\n   * Get the appropriate adapter instance for the assessment type\n   * @param {string} assessmentType - The type of assessment (e.g., 'agency-vulnerability')\n   * @returns {Object} - An instance of the appropriate adapter or null if not found\n   */\n  static getAdapter(assessmentType) {\n    console.log(`ResultsAdapterFactory: Getting adapter for ${assessmentType}`);\n    switch (assessmentType) {\n      case 'agency-vulnerability':\n        return new AgencyVulnerabilityAdapter();\n      case 'inhouse-marketing':\n        return new InhouseMarketingAdapter();\n      default:\n        console.warn(`ResultsAdapterFactory: No adapter found for ${assessmentType}`);\n        return null;\n    }\n  }\n\n  /**\n   * Adapt results using the appropriate adapter for the assessment type\n   * @param {string} assessmentType - The type of assessment\n   * @param {Object} rawResults - Raw results from the scoring engine\n   * @param {Function} getResponse - Function to retrieve saved responses\n   * @returns {Object} - The adapted results or null if adapter not found\n   */\n  static adaptResults(assessmentType, rawResults, getResponse) {\n    const adapter = this.getAdapter(assessmentType);\n    if (!adapter) {\n      console.error(`ResultsAdapterFactory: Failed to get adapter for ${assessmentType}`);\n      return rawResults; // Return raw results as fallback\n    }\n    try {\n      console.log(`ResultsAdapterFactory: Adapting results for ${assessmentType}`);\n      return adapter.adaptResults(rawResults, getResponse);\n    } catch (error) {\n      console.error(`ResultsAdapterFactory: Error adapting results for ${assessmentType}:`, error);\n      return rawResults; // Return raw results as fallback on error\n    }\n  }\n}\nexport default ResultsAdapterFactory;","map":{"version":3,"names":["AgencyVulnerabilityAdapter","InhouseMarketingAdapter","ResultsAdapterFactory","getAdapter","assessmentType","console","log","warn","adaptResults","rawResults","getResponse","adapter","error"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/ResultsAdapterFactory.js"],"sourcesContent":["/**\n * ResultsAdapterFactory\n * Creates and returns the appropriate results adapter for each assessment type\n */\n\n// Import adapters - add new adapters here as more assessment types are added\nimport AgencyVulnerabilityAdapter from '../../assessments/agency-vulnerability/ResultsAdapter';\nimport InhouseMarketingAdapter from '../../assessments/inhouse-marketing/ResultsAdapter';\n\nclass ResultsAdapterFactory {\n  /**\n   * Get the appropriate adapter instance for the assessment type\n   * @param {string} assessmentType - The type of assessment (e.g., 'agency-vulnerability')\n   * @returns {Object} - An instance of the appropriate adapter or null if not found\n   */\n  static getAdapter(assessmentType) {\n    console.log(`ResultsAdapterFactory: Getting adapter for ${assessmentType}`);\n    \n    switch (assessmentType) {\n      case 'agency-vulnerability':\n        return new AgencyVulnerabilityAdapter();\n      case 'inhouse-marketing':\n        return new InhouseMarketingAdapter();\n      default:\n        console.warn(`ResultsAdapterFactory: No adapter found for ${assessmentType}`);\n        return null;\n    }\n  }\n  \n  /**\n   * Adapt results using the appropriate adapter for the assessment type\n   * @param {string} assessmentType - The type of assessment\n   * @param {Object} rawResults - Raw results from the scoring engine\n   * @param {Function} getResponse - Function to retrieve saved responses\n   * @returns {Object} - The adapted results or null if adapter not found\n   */\n  static adaptResults(assessmentType, rawResults, getResponse) {\n    const adapter = this.getAdapter(assessmentType);\n    \n    if (!adapter) {\n      console.error(`ResultsAdapterFactory: Failed to get adapter for ${assessmentType}`);\n      return rawResults; // Return raw results as fallback\n    }\n    \n    try {\n      console.log(`ResultsAdapterFactory: Adapting results for ${assessmentType}`);\n      return adapter.adaptResults(rawResults, getResponse);\n    } catch (error) {\n      console.error(`ResultsAdapterFactory: Error adapting results for ${assessmentType}:`, error);\n      return rawResults; // Return raw results as fallback on error\n    }\n  }\n}\n\nexport default ResultsAdapterFactory;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,0BAA0B,MAAM,uDAAuD;AAC9F,OAAOC,uBAAuB,MAAM,oDAAoD;AAExF,MAAMC,qBAAqB,CAAC;EAC1B;AACF;AACA;AACA;AACA;EACE,OAAOC,UAAUA,CAACC,cAAc,EAAE;IAChCC,OAAO,CAACC,GAAG,CAAC,8CAA8CF,cAAc,EAAE,CAAC;IAE3E,QAAQA,cAAc;MACpB,KAAK,sBAAsB;QACzB,OAAO,IAAIJ,0BAA0B,CAAC,CAAC;MACzC,KAAK,mBAAmB;QACtB,OAAO,IAAIC,uBAAuB,CAAC,CAAC;MACtC;QACEI,OAAO,CAACE,IAAI,CAAC,+CAA+CH,cAAc,EAAE,CAAC;QAC7E,OAAO,IAAI;IACf;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,YAAYA,CAACJ,cAAc,EAAEK,UAAU,EAAEC,WAAW,EAAE;IAC3D,MAAMC,OAAO,GAAG,IAAI,CAACR,UAAU,CAACC,cAAc,CAAC;IAE/C,IAAI,CAACO,OAAO,EAAE;MACZN,OAAO,CAACO,KAAK,CAAC,oDAAoDR,cAAc,EAAE,CAAC;MACnF,OAAOK,UAAU,CAAC,CAAC;IACrB;IAEA,IAAI;MACFJ,OAAO,CAACC,GAAG,CAAC,+CAA+CF,cAAc,EAAE,CAAC;MAC5E,OAAOO,OAAO,CAACH,YAAY,CAACC,UAAU,EAAEC,WAAW,CAAC;IACtD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,qDAAqDR,cAAc,GAAG,EAAEQ,KAAK,CAAC;MAC5F,OAAOH,UAAU,CAAC,CAAC;IACrB;EACF;AACF;AAEA,eAAeP,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}