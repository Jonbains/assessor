{"ast":null,"code":"var _jsxFileName = \"/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { QuestionCard } from './QuestionCard';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicQuestions = ({\n  assessmentType,\n  saveResponse,\n  getResponse,\n  onComplete,\n  onBack,\n  progress\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        // Load questions based on assessment type\n        // This would be filtered based on selected services/activities\n        const module = await import(`../../assessments/${assessmentType}/questions.json`);\n        const data = module.default || module;\n\n        // Combine all question types\n        const allQuestions = [...(data.coreQuestions || [])\n        // Service questions would be loaded based on selections\n        ];\n        setQuestions(allQuestions);\n      } catch (error) {\n        console.error('Failed to load questions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadQuestions();\n  }, [assessmentType]);\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const handleAnswer = (value, option) => {\n    if (currentQuestion) {\n      saveResponse(currentQuestion.id, value);\n    }\n  };\n  const handleNext = () => {\n    if (isLastQuestion) {\n      onComplete();\n    } else {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    } else {\n      onBack();\n    }\n  };\n  const handleSkip = () => {\n    handleNext();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n  const selectedValue = getResponse(currentQuestion.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen active\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [\"obsolete\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: progress || 60,\n        label: \"Step 5 of 7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: currentQuestion,\n      questionNumber: currentQuestionIndex + 1,\n      totalQuestions: questions.length,\n      selectedValue: selectedValue,\n      onSelect: handleAnswer,\n      insight: currentQuestion.insight,\n      benchmark: currentQuestion.benchmark\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: handlePrevious,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-skip\",\n        onClick: handleSkip,\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        disabled: !selectedValue,\n        onClick: handleNext,\n        children: isLastQuestion ? 'Complete' : 'Continue'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicQuestions, \"hJiJQOXcC+XQPaBxuPtmnYbXKjw=\");\n_c = DynamicQuestions;\nexport default DynamicQuestions;\nvar _c;\n$RefreshReg$(_c, \"DynamicQuestions\");","map":{"version":3,"names":["React","useState","useEffect","QuestionCard","ProgressBar","styles","jsxDEV","_jsxDEV","DynamicQuestions","assessmentType","saveResponse","getResponse","onComplete","onBack","progress","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","module","data","default","allQuestions","coreQuestions","error","console","currentQuestion","isLastQuestion","length","handleAnswer","value","option","id","handleNext","prev","handlePrevious","handleSkip","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedValue","className","label","question","questionNumber","totalQuestions","onSelect","insight","benchmark","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { QuestionCard } from './QuestionCard';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    onComplete, \n    onBack,\n    progress \n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const loadQuestions = async () => {\n            try {\n                // Load questions based on assessment type\n                // This would be filtered based on selected services/activities\n                const module = await import(`../../assessments/${assessmentType}/questions.json`);\n                const data = module.default || module;\n                \n                // Combine all question types\n                const allQuestions = [\n                    ...(data.coreQuestions || []),\n                    // Service questions would be loaded based on selections\n                ];\n                \n                setQuestions(allQuestions);\n            } catch (error) {\n                console.error('Failed to load questions:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadQuestions();\n    }, [assessmentType]);\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (value, option) => {\n        if (currentQuestion) {\n            saveResponse(currentQuestion.id, value);\n        }\n    };\n\n    const handleNext = () => {\n        if (isLastQuestion) {\n            onComplete();\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return <div>Loading questions...</div>;\n    }\n\n    if (!currentQuestion) {\n        return <div>No questions available</div>;\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className=\"screen active\">\n            <div className=\"header\">\n                <div className=\"logo\">obsolete<span>.</span></div>\n                <ProgressBar progress={progress || 60} label=\"Step 5 of 7\" />\n            </div>\n            \n            <QuestionCard\n                question={currentQuestion}\n                questionNumber={currentQuestionIndex + 1}\n                totalQuestions={questions.length}\n                selectedValue={selectedValue}\n                onSelect={handleAnswer}\n                insight={currentQuestion.insight}\n                benchmark={currentQuestion.benchmark}\n            />\n            \n            <div className=\"navigation\">\n                <button className=\"btn btn-secondary\" onClick={handlePrevious}>\n                    ‚Üê Back\n                </button>\n                <button className=\"btn btn-skip\" onClick={handleSkip}>\n                    Skip\n                </button>\n                <button \n                    className=\"btn btn-primary\"\n                    disabled={!selectedValue}\n                    onClick={handleNext}\n                >\n                    {isLastQuestion ? 'Complete' : 'Continue'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}