{"ast":null,"code":"export class AssessmentEngine{constructor(assessmentType){this.assessmentType=assessmentType;this.config=null;this.flow=null;this.data=null;this.scoring=null;}async initialize(){// Load assessment module configuration\nthis.config=await this.loadAssessmentModule(this.assessmentType);// Initialize sub-components\nconst{FlowController}=await import('./FlowController.js');const{DataManager}=await import('./DataManager.js');const{ScoringEngine}=await import('./ScoringEngine.js');this.flow=new FlowController(this.config);this.data=new DataManager();this.scoring=new ScoringEngine(this.config.scoring);// Start the flow\nthis.flow.start();}async loadAssessmentModule(type){try{// Import the config file directly using dynamic import\nconst config=await import(\"../../assessments/\".concat(type,\"/config.json\"));return config.default||config;}catch(error){console.error(\"Failed to load assessment configuration for \".concat(type,\":\"),error);throw new Error(\"Could not load assessment type: \".concat(type));}}async nextStage(){const currentStage=this.flow.getCurrentStage();await this.saveProgress();return this.flow.advance();}async previousStage(){return this.flow.goBack();}async saveProgress(){const progress={assessmentType:this.assessmentType,currentStage:this.flow.getCurrentStage(),responses:this.data.getResponses(),timestamp:new Date().toISOString()};// Save to localStorage for now, Firebase later\nlocalStorage.setItem('assessment_progress',JSON.stringify(progress));}async loadProgress(){const saved=localStorage.getItem('assessment_progress');if(saved){const progress=JSON.parse(saved);this.data.setResponses(progress.responses);this.flow.setStage(progress.currentStage);return progress;}return null;}calculateResults(){const responses=this.data.getResponses();const context=this.data.getContext();return this.scoring.calculate(responses,context);}getRelevantQuestions(){return this.flow.getRelevantQuestions(this.data);}saveResponse(questionId,value){this.data.saveResponse(questionId,value);}getResponse(questionId){return this.data.getResponse(questionId);}getAllResponses(){return this.data.getResponses();}getContext(){return this.data.getContext();}setContext(key,value){this.data.setContext(key,value);}getProgress(){return this.flow.getProgress();}isComplete(){return this.flow.isComplete();}reset(){this.data.reset();this.flow.reset();localStorage.removeItem('assessment_progress');}}export default AssessmentEngine;","map":{"version":3,"names":["AssessmentEngine","constructor","assessmentType","config","flow","data","scoring","initialize","loadAssessmentModule","FlowController","DataManager","ScoringEngine","start","type","concat","default","error","console","Error","nextStage","currentStage","getCurrentStage","saveProgress","advance","previousStage","goBack","progress","responses","getResponses","timestamp","Date","toISOString","localStorage","setItem","JSON","stringify","loadProgress","saved","getItem","parse","setResponses","setStage","calculateResults","context","getContext","calculate","getRelevantQuestions","saveResponse","questionId","value","getResponse","getAllResponses","setContext","key","getProgress","isComplete","reset","removeItem"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/engine/AssessmentEngine.js"],"sourcesContent":["\nexport class AssessmentEngine {\n    constructor(assessmentType) {\n        this.assessmentType = assessmentType;\n        this.config = null;\n        this.flow = null;\n        this.data = null;\n        this.scoring = null;\n    }\n\n    async initialize() {\n        // Load assessment module configuration\n        this.config = await this.loadAssessmentModule(this.assessmentType);\n        \n        // Initialize sub-components\n        const { FlowController } = await import('./FlowController.js');\n        const { DataManager } = await import('./DataManager.js');\n        const { ScoringEngine } = await import('./ScoringEngine.js');\n        \n        this.flow = new FlowController(this.config);\n        this.data = new DataManager();\n        this.scoring = new ScoringEngine(this.config.scoring);\n        \n        // Start the flow\n        this.flow.start();\n    }\n\n    async loadAssessmentModule(type) {\n        try {\n            // Import the config file directly using dynamic import\n            const config = await import(`../../assessments/${type}/config.json`);\n            return config.default || config;\n        } catch (error) {\n            console.error(`Failed to load assessment configuration for ${type}:`, error);\n            throw new Error(`Could not load assessment type: ${type}`);\n        }\n    }\n\n    async nextStage() {\n        const currentStage = this.flow.getCurrentStage();\n        await this.saveProgress();\n        return this.flow.advance();\n    }\n\n    async previousStage() {\n        return this.flow.goBack();\n    }\n\n    async saveProgress() {\n        const progress = {\n            assessmentType: this.assessmentType,\n            currentStage: this.flow.getCurrentStage(),\n            responses: this.data.getResponses(),\n            timestamp: new Date().toISOString()\n        };\n        \n        // Save to localStorage for now, Firebase later\n        localStorage.setItem('assessment_progress', JSON.stringify(progress));\n    }\n\n    async loadProgress() {\n        const saved = localStorage.getItem('assessment_progress');\n        if (saved) {\n            const progress = JSON.parse(saved);\n            this.data.setResponses(progress.responses);\n            this.flow.setStage(progress.currentStage);\n            return progress;\n        }\n        return null;\n    }\n\n    calculateResults() {\n        const responses = this.data.getResponses();\n        const context = this.data.getContext();\n        return this.scoring.calculate(responses, context);\n    }\n\n    getRelevantQuestions() {\n        return this.flow.getRelevantQuestions(this.data);\n    }\n\n    saveResponse(questionId, value) {\n        this.data.saveResponse(questionId, value);\n    }\n\n    getResponse(questionId) {\n        return this.data.getResponse(questionId);\n    }\n\n    getAllResponses() {\n        return this.data.getResponses();\n    }\n\n    getContext() {\n        return this.data.getContext();\n    }\n\n    setContext(key, value) {\n        this.data.setContext(key, value);\n    }\n\n    getProgress() {\n        return this.flow.getProgress();\n    }\n\n    isComplete() {\n        return this.flow.isComplete();\n    }\n\n    reset() {\n        this.data.reset();\n        this.flow.reset();\n        localStorage.removeItem('assessment_progress');\n    }\n}\n\nexport default AssessmentEngine;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}