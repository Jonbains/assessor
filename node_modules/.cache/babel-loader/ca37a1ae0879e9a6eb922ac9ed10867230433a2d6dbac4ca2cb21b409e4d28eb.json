{"ast":null,"code":"import React,{useState,useEffect}from'react';import{QuestionCard}from'./QuestionCard';import{ProgressBar}from'./ProgressBar';import styles from'../styles/components.module.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DynamicQuestions=_ref=>{let{assessmentType,saveResponse,getResponse,onComplete,onBack,progress}=_ref;const[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[loading,setLoading]=useState(true);useEffect(()=>{loadQuestions();},[assessmentType]);const loadQuestions=async()=>{try{setLoading(true);// Load questions based on assessment type\nconst module=await import(\"../../assessments/\".concat(assessmentType,\"/questions.json\"));const data=module.default||module;// Flatten the coreQuestions object into an array\nconst coreQuestions=Object.values(data.coreQuestions||{}).flat();// If we have selected services, load service-specific questions\nlet serviceQuestions=[];// Get selected services from responses\nconst selectedServices=getResponse('selectedServices');if(selectedServices&&selectedServices.length>0){try{const serviceModule=await import(\"../../assessments/\".concat(assessmentType,\"/service-questions.json\"));const serviceData=serviceModule.default||serviceModule;// Filter questions based on selected services\nselectedServices.forEach(serviceId=>{if(serviceData[serviceId]){serviceQuestions=[...serviceQuestions,...serviceData[serviceId]];}});}catch(err){console.error('Error loading service questions:',err);}}// Combine all question types\nconst allQuestions=[...coreQuestions,...serviceQuestions];setQuestions(allQuestions);}catch(error){console.error('Failed to load questions:',error);}finally{setLoading(false);}};const currentQuestion=questions[currentQuestionIndex];const isLastQuestion=currentQuestionIndex===questions.length-1;const handleAnswer=(value,option)=>{if(currentQuestion){saveResponse(currentQuestion.id,value);}};const handleNext=()=>{if(isLastQuestion){// Move to the next stage using onComplete callback\nonComplete();}else{setCurrentQuestionIndex(prev=>prev+1);}};const handlePrevious=()=>{if(currentQuestionIndex>0){setCurrentQuestionIndex(prev=>prev-1);}else{// Go back to the previous stage in the assessment flow\nonBack();}};const handleSkip=()=>{handleNext();};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:styles.loadingContainer,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.spinner}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading questions...\"})]});}if(!currentQuestion){return/*#__PURE__*/_jsxs(\"div\",{className:styles.errorContainer,children:[/*#__PURE__*/_jsx(\"p\",{children:\"No questions available for this assessment.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onBack,children:\"Go Back\"})]});}const selectedValue=getResponse(currentQuestion.id);return/*#__PURE__*/_jsxs(\"div\",{className:styles.screen,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.header,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.logo,children:[\"obsolete\",/*#__PURE__*/_jsx(\"span\",{children:\".\"})]}),/*#__PURE__*/_jsx(ProgressBar,{progress:progress||65,label:\"Step 5 of 7\"})]}),/*#__PURE__*/_jsx(QuestionCard,{question:currentQuestion,questionNumber:currentQuestionIndex+1,totalQuestions:questions.length,selectedValue:selectedValue,onSelect:handleAnswer,insight:currentQuestion.insight,benchmark:currentQuestion.benchmark}),/*#__PURE__*/_jsxs(\"div\",{className:styles.navigation,children:[/*#__PURE__*/_jsx(\"button\",{className:styles.navButton,onClick:handlePrevious,children:\"\\u2190 Back\"}),/*#__PURE__*/_jsx(\"button\",{className:\"\".concat(styles.navButton,\" \").concat(styles.skip),onClick:handleSkip,children:\"Skip\"}),/*#__PURE__*/_jsx(\"button\",{className:\"\".concat(styles.navButton,\" \").concat(styles.primary),disabled:!selectedValue,onClick:handleNext,children:isLastQuestion?'Complete':'Continue'})]})]});};export default DynamicQuestions;","map":{"version":3,"names":["React","useState","useEffect","QuestionCard","ProgressBar","styles","jsx","_jsx","jsxs","_jsxs","DynamicQuestions","_ref","assessmentType","saveResponse","getResponse","onComplete","onBack","progress","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","loading","setLoading","loadQuestions","module","concat","data","default","coreQuestions","Object","values","flat","serviceQuestions","selectedServices","length","serviceModule","serviceData","forEach","serviceId","err","console","error","allQuestions","currentQuestion","isLastQuestion","handleAnswer","value","option","id","handleNext","prev","handlePrevious","handleSkip","className","loadingContainer","children","spinner","errorContainer","onClick","selectedValue","screen","header","logo","label","question","questionNumber","totalQuestions","onSelect","insight","benchmark","navigation","navButton","skip","primary","disabled"],"sources":["/Users/jon/Documents/GitHub/assessor/src/core/components/DynamicQuestions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { QuestionCard } from './QuestionCard';\nimport { ProgressBar } from './ProgressBar';\nimport styles from '../styles/components.module.css';\n\nconst DynamicQuestions = ({ \n    assessmentType, \n    saveResponse, \n    getResponse, \n    onComplete,\n    onBack,\n    progress\n}) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [assessmentType]);\n\n    const loadQuestions = async () => {\n        try {\n            setLoading(true);\n            // Load questions based on assessment type\n            const module = await import(`../../assessments/${assessmentType}/questions.json`);\n            const data = module.default || module;\n            \n            // Flatten the coreQuestions object into an array\n            const coreQuestions = Object.values(data.coreQuestions || {}).flat();\n            \n            // If we have selected services, load service-specific questions\n            let serviceQuestions = [];\n            // Get selected services from responses\n            const selectedServices = getResponse('selectedServices');\n            \n            if (selectedServices && selectedServices.length > 0) {\n                try {\n                    const serviceModule = await import(`../../assessments/${assessmentType}/service-questions.json`);\n                    const serviceData = serviceModule.default || serviceModule;\n                    \n                    // Filter questions based on selected services\n                    selectedServices.forEach(serviceId => {\n                        if (serviceData[serviceId]) {\n                            serviceQuestions = [...serviceQuestions, ...serviceData[serviceId]];\n                        }\n                    });\n                } catch (err) {\n                    console.error('Error loading service questions:', err);\n                }\n            }\n            \n            // Combine all question types\n            const allQuestions = [\n                ...coreQuestions,\n                ...serviceQuestions\n            ];\n            \n            setQuestions(allQuestions);\n        } catch (error) {\n            console.error('Failed to load questions:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n    const handleAnswer = (value, option) => {\n        if (currentQuestion) {\n            saveResponse(currentQuestion.id, value);\n        }\n    };\n\n    const handleNext = () => {\n        if (isLastQuestion) {\n            // Move to the next stage using onComplete callback\n            onComplete();\n        } else {\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentQuestionIndex > 0) {\n            setCurrentQuestionIndex(prev => prev - 1);\n        } else {\n            // Go back to the previous stage in the assessment flow\n            onBack();\n        }\n    };\n\n    const handleSkip = () => {\n        handleNext();\n    };\n\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer}>\n                <div className={styles.spinner} />\n                <p>Loading questions...</p>\n            </div>\n        );\n    }\n\n    if (!currentQuestion) {\n        return (\n            <div className={styles.errorContainer}>\n                <p>No questions available for this assessment.</p>\n                <button onClick={onBack}>Go Back</button>\n            </div>\n        );\n    }\n\n    const selectedValue = getResponse(currentQuestion.id);\n\n    return (\n        <div className={styles.screen}>\n            <div className={styles.header}>\n                <div className={styles.logo}>obsolete<span>.</span></div>\n                <ProgressBar progress={progress || 65} label=\"Step 5 of 7\" />\n            </div>\n            <QuestionCard\n                question={currentQuestion}\n                questionNumber={currentQuestionIndex + 1}\n                totalQuestions={questions.length}\n                selectedValue={selectedValue}\n                onSelect={handleAnswer}\n                insight={currentQuestion.insight}\n                benchmark={currentQuestion.benchmark}\n            />\n            \n            <div className={styles.navigation}>\n                <button className={styles.navButton} onClick={handlePrevious}>\n                    ‚Üê Back\n                </button>\n                <button className={`${styles.navButton} ${styles.skip}`} onClick={handleSkip}>\n                    Skip\n                </button>\n                <button \n                    className={`${styles.navButton} ${styles.primary}`}\n                    disabled={!selectedValue}\n                    onClick={handleNext}\n                >\n                    {isLastQuestion ? 'Complete' : 'Continue'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}